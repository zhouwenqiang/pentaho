/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['util/formatting.js']) {
  _$jscoverage['util/formatting.js'] = [];
  _$jscoverage['util/formatting.js'][1] = 0;
  _$jscoverage['util/formatting.js'][2] = 0;
  _$jscoverage['util/formatting.js'][9] = 0;
  _$jscoverage['util/formatting.js'][10] = 0;
  _$jscoverage['util/formatting.js'][11] = 0;
  _$jscoverage['util/formatting.js'][13] = 0;
  _$jscoverage['util/formatting.js'][16] = 0;
  _$jscoverage['util/formatting.js'][19] = 0;
  _$jscoverage['util/formatting.js'][20] = 0;
  _$jscoverage['util/formatting.js'][29] = 0;
  _$jscoverage['util/formatting.js'][30] = 0;
  _$jscoverage['util/formatting.js'][31] = 0;
  _$jscoverage['util/formatting.js'][35] = 0;
  _$jscoverage['util/formatting.js'][36] = 0;
  _$jscoverage['util/formatting.js'][37] = 0;
  _$jscoverage['util/formatting.js'][62] = 0;
  _$jscoverage['util/formatting.js'][63] = 0;
  _$jscoverage['util/formatting.js'][77] = 0;
  _$jscoverage['util/formatting.js'][78] = 0;
  _$jscoverage['util/formatting.js'][79] = 0;
  _$jscoverage['util/formatting.js'][81] = 0;
  _$jscoverage['util/formatting.js'][84] = 0;
  _$jscoverage['util/formatting.js'][87] = 0;
  _$jscoverage['util/formatting.js'][88] = 0;
  _$jscoverage['util/formatting.js'][89] = 0;
  _$jscoverage['util/formatting.js'][91] = 0;
  _$jscoverage['util/formatting.js'][94] = 0;
  _$jscoverage['util/formatting.js'][105] = 0;
  _$jscoverage['util/formatting.js'][106] = 0;
  _$jscoverage['util/formatting.js'][107] = 0;
  _$jscoverage['util/formatting.js'][109] = 0;
  _$jscoverage['util/formatting.js'][110] = 0;
  _$jscoverage['util/formatting.js'][114] = 0;
  _$jscoverage['util/formatting.js'][115] = 0;
  _$jscoverage['util/formatting.js'][116] = 0;
  _$jscoverage['util/formatting.js'][117] = 0;
  _$jscoverage['util/formatting.js'][119] = 0;
  _$jscoverage['util/formatting.js'][120] = 0;
  _$jscoverage['util/formatting.js'][121] = 0;
  _$jscoverage['util/formatting.js'][123] = 0;
  _$jscoverage['util/formatting.js'][127] = 0;
  _$jscoverage['util/formatting.js'][128] = 0;
  _$jscoverage['util/formatting.js'][130] = 0;
  _$jscoverage['util/formatting.js'][135] = 0;
  _$jscoverage['util/formatting.js'][136] = 0;
  _$jscoverage['util/formatting.js'][140] = 0;
  _$jscoverage['util/formatting.js'][141] = 0;
  _$jscoverage['util/formatting.js'][142] = 0;
  _$jscoverage['util/formatting.js'][147] = 0;
  _$jscoverage['util/formatting.js'][148] = 0;
  _$jscoverage['util/formatting.js'][152] = 0;
  _$jscoverage['util/formatting.js'][159] = 0;
  _$jscoverage['util/formatting.js'][161] = 0;
  _$jscoverage['util/formatting.js'][163] = 0;
  _$jscoverage['util/formatting.js'][170] = 0;
  _$jscoverage['util/formatting.js'][171] = 0;
  _$jscoverage['util/formatting.js'][175] = 0;
  _$jscoverage['util/formatting.js'][176] = 0;
  _$jscoverage['util/formatting.js'][177] = 0;
  _$jscoverage['util/formatting.js'][180] = 0;
  _$jscoverage['util/formatting.js'][185] = 0;
  _$jscoverage['util/formatting.js'][186] = 0;
  _$jscoverage['util/formatting.js'][187] = 0;
  _$jscoverage['util/formatting.js'][189] = 0;
  _$jscoverage['util/formatting.js'][191] = 0;
  _$jscoverage['util/formatting.js'][194] = 0;
  _$jscoverage['util/formatting.js'][197] = 0;
  _$jscoverage['util/formatting.js'][198] = 0;
  _$jscoverage['util/formatting.js'][202] = 0;
  _$jscoverage['util/formatting.js'][205] = 0;
  _$jscoverage['util/formatting.js'][210] = 0;
  _$jscoverage['util/formatting.js'][212] = 0;
  _$jscoverage['util/formatting.js'][224] = 0;
  _$jscoverage['util/formatting.js'][226] = 0;
  _$jscoverage['util/formatting.js'][228] = 0;
  _$jscoverage['util/formatting.js'][229] = 0;
  _$jscoverage['util/formatting.js'][230] = 0;
  _$jscoverage['util/formatting.js'][232] = 0;
  _$jscoverage['util/formatting.js'][234] = 0;
  _$jscoverage['util/formatting.js'][235] = 0;
  _$jscoverage['util/formatting.js'][237] = 0;
}
_$jscoverage['util/formatting.js'].source = ["pen<span class=\"k\">.</span>define<span class=\"k\">([</span><span class=\"s\">'common-ui/prompting/pentaho-prompting'</span><span class=\"k\">,</span><span class=\"s\">'common-ui/util/timeutil'</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">(</span>p<span class=\"k\">,</span> ReportTimeUtil<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Create a text formatter that formats to/from text. This is designed to convert between data formatted as a string</span>","<span class=\"c\">     * and the Reporting Engine's expected format for that object type.</span>","<span class=\"c\">     * e.g. \"01/01/2003\" &lt;-&gt; \"2003-01-01T00:00:00.000-0500\"</span>","<span class=\"c\">     */</span>","    createDataTransportFormatter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> parameter<span class=\"k\">,</span> pattern<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> formatterType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_formatTypeMap<span class=\"k\">[</span>parameter<span class=\"k\">.</span>type<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>formatterType <span class=\"k\">==</span> <span class=\"s\">'number'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">{</span>","          format<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>number<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span> <span class=\"k\">+</span> number<span class=\"k\">;</span>","          <span class=\"k\">}</span><span class=\"k\">,</span>","          parse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> s<span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>formatterType <span class=\"k\">==</span> <span class=\"s\">'date'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_createDateTransportFormatter<span class=\"k\">(</span>parameter<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Create a text formatter that can convert between a parameter's defined format and the transport</span>","<span class=\"c\">     * format the Pentaho Reporting Engine expects.</span>","<span class=\"c\">     */</span>","    createFormatter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> parameter<span class=\"k\">,</span> pattern<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>jsTextFormatter<span class=\"k\">)</span> <span class=\"k\">{</span>","        console<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"Unable to find formatter module. No text formatting will be possible.\"</span><span class=\"k\">);</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// Create a formatter if a date format was provided and we're not a list parameter type. They are</span>","      <span class=\"c\">// mutually exclusive.</span>","      <span class=\"k\">var</span> dataFormat <span class=\"k\">=</span> pattern <span class=\"k\">||</span> parameter<span class=\"k\">.</span>attributes<span class=\"k\">[</span><span class=\"s\">'data-format'</span><span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>parameter<span class=\"k\">.</span>list <span class=\"k\">&amp;&amp;</span> dataFormat<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> jsTextFormatter<span class=\"k\">.</span>createFormatter<span class=\"k\">(</span>parameter<span class=\"k\">.</span>type<span class=\"k\">,</span> dataFormat<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _formatTypeMap<span class=\"k\">:</span> <span class=\"k\">{</span>","      <span class=\"s\">'number'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.lang.Number'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.lang.Byte'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.lang.Short'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.lang.Integer'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.lang.Long'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.lang.Float'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.lang.Double'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.math.BigDecimal'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.math.BigInteger'</span><span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","","      <span class=\"s\">'date'</span><span class=\"k\">:</span> <span class=\"s\">'date'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.util.Date'</span><span class=\"k\">:</span> <span class=\"s\">'date'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.sql.Date'</span><span class=\"k\">:</span> <span class=\"s\">'date'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.sql.Time'</span><span class=\"k\">:</span> <span class=\"s\">'date'</span><span class=\"k\">,</span>","      <span class=\"s\">'java.sql.Timestamp'</span><span class=\"k\">:</span> <span class=\"s\">'date'</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    _initDateFormatters<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"c\">// Lazily create all date formatters since we may not have createFormatter available when we're loaded</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters <span class=\"k\">=</span> <span class=\"k\">{</span>","          <span class=\"s\">'with-timezone'</span><span class=\"k\">:</span> jsTextFormatter<span class=\"k\">.</span>createFormatter<span class=\"k\">(</span><span class=\"s\">'date'</span><span class=\"k\">,</span> <span class=\"s\">\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"</span><span class=\"k\">),</span>","          <span class=\"s\">'without-timezone'</span><span class=\"k\">:</span> jsTextFormatter<span class=\"k\">.</span>createFormatter<span class=\"k\">(</span><span class=\"s\">'date'</span><span class=\"k\">,</span> <span class=\"s\">\"yyyy-MM-dd'T'HH:mm:ss.SSS\"</span><span class=\"k\">),</span>","          <span class=\"s\">'utc'</span><span class=\"k\">:</span> jsTextFormatter<span class=\"k\">.</span>createFormatter<span class=\"k\">(</span><span class=\"s\">'date'</span><span class=\"k\">,</span> <span class=\"s\">\"yyyy-MM-dd'T'HH:mm:ss.SSS'+0000'\"</span><span class=\"k\">),</span>","          <span class=\"s\">'simple'</span><span class=\"k\">:</span> jsTextFormatter<span class=\"k\">.</span>createFormatter<span class=\"k\">(</span><span class=\"s\">'date'</span><span class=\"k\">,</span> <span class=\"s\">\"yyyy-MM-dd\"</span><span class=\"k\">)</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Create a formatter to pass data to/from the Pentaho Reporting Engine. This is to maintain compatibility</span>","<span class=\"c\">     * with the Parameter XML output from the Report Viewer.</span>","<span class=\"c\">     */</span>","    _createDataTransportFormatter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>parameter<span class=\"k\">,</span> formatter<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> formatterType <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_formatTypeMap<span class=\"k\">[</span>parameter<span class=\"k\">.</span>type<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>formatterType <span class=\"k\">==</span> <span class=\"s\">'number'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">{</span>","          format<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>object<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> formatter<span class=\"k\">.</span>format<span class=\"k\">(</span>object<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">,</span>","          parse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span> <span class=\"k\">+</span> formatter<span class=\"k\">.</span>parse<span class=\"k\">(</span>s<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>formatterType <span class=\"k\">==</span> <span class=\"s\">'date'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> transportFormatter <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_createDateTransportFormatter<span class=\"k\">(</span>parameter<span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">{</span>","          format<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>dateString<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> formatter<span class=\"k\">.</span>format<span class=\"k\">(</span>transportFormatter<span class=\"k\">.</span>parse<span class=\"k\">(</span>dateString<span class=\"k\">));</span>","          <span class=\"k\">}</span><span class=\"k\">,</span>","          parse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> transportFormatter<span class=\"k\">.</span>format<span class=\"k\">(</span>formatter<span class=\"k\">.</span>parse<span class=\"k\">(</span>s<span class=\"k\">));</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * This text formatter converts a Date to/from the internal transport format (ISO-8601) used by Pentaho Reporting Engine</span>","<span class=\"c\">     * and found in parameter xml generated for Report Viewer.</span>","<span class=\"c\">     */</span>","    _createDateTransportFormatter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>parameter<span class=\"k\">,</span> s<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> timezone <span class=\"k\">=</span> parameter<span class=\"k\">.</span>attributes<span class=\"k\">[</span><span class=\"s\">'timezone'</span><span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_initDateFormatters<span class=\"k\">();</span>","      <span class=\"k\">return</span> <span class=\"k\">{</span>","        format<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>date<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'client'</span> <span class=\"k\">===</span> timezone<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'with-timezone'</span><span class=\"k\">].</span>format<span class=\"k\">(</span>date<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"c\">// Take the date string as it comes from the server, cut out the timezone information - the</span>","          <span class=\"c\">// server will supply its own here.</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'server'</span> <span class=\"k\">===</span> timezone <span class=\"k\">||</span> <span class=\"k\">!</span>timezone<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'without-timezone'</span><span class=\"k\">].</span>format<span class=\"k\">(</span>date<span class=\"k\">);</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'utc'</span> <span class=\"k\">===</span> timezone<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'utc'</span><span class=\"k\">].</span>format<span class=\"k\">(</span>date<span class=\"k\">);</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> offset <span class=\"k\">=</span> ReportTimeUtil<span class=\"k\">.</span>getOffsetAsString<span class=\"k\">(</span>timezone<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span>offset<span class=\"k\">])</span> <span class=\"k\">{</span>","              <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span>offset<span class=\"k\">]</span> <span class=\"k\">=</span> jsTextFormatter<span class=\"k\">.</span>createFormatter<span class=\"k\">(</span><span class=\"s\">'date'</span><span class=\"k\">,</span> <span class=\"s\">\"yyyy-MM-dd'T'HH:mm:ss.SSS'\"</span> <span class=\"k\">+</span> offset <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span>offset<span class=\"k\">].</span>format<span class=\"k\">(</span>date<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">),</span>","        parse<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'client'</span> <span class=\"k\">===</span> timezone<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","              <span class=\"c\">// Try to parse with timezone info</span>","              <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'with-timezone'</span><span class=\"k\">].</span>parse<span class=\"k\">(</span>s<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"c\">// ignore, keep trying</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>parseDateWithoutTimezoneInfo<span class=\"k\">(</span>s<span class=\"k\">);</span>","          <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// ignore, keep trying</span>","          <span class=\"k\">}</span>","          <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>s<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'simple'</span><span class=\"k\">].</span>parse<span class=\"k\">(</span>s<span class=\"k\">);</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// ignore, keep trying</span>","          <span class=\"k\">}</span>","          <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">new</span> Date<span class=\"k\">(</span>parseFloat<span class=\"k\">(</span>s<span class=\"k\">));</span>","          <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// ignore, we're done here</span>","          <span class=\"k\">}</span>","          <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span> <span class=\"c\">// this represents a null in CDF</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">)</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    parseDateWithoutTimezoneInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>dateString<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Try to parse without timezone info</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>dateString<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">28</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        dateString <span class=\"k\">=</span> dateString<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">23</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'without-timezone'</span><span class=\"k\">].</span>parse<span class=\"k\">(</span>dateString<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Updates date values to make sure the timezone information is correct.</span>","<span class=\"c\">     */</span>","    normalizeParameterValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>parameter<span class=\"k\">,</span> type<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> type <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Strip out actual type from Java array types</span>","      <span class=\"k\">var</span> m <span class=\"k\">=</span> type<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">'^</span><span class=\"t\">\\\\</span><span class=\"s\">[L([^;]+);$'</span><span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>m <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> m<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        type <span class=\"k\">=</span> m<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">switch</span><span class=\"k\">(</span>type<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">case</span> <span class=\"s\">'java.util.Date'</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">'java.sql.Date'</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">'java.sql.Time'</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> <span class=\"s\">'java.sql.Timestamp'</span><span class=\"k\">:</span>","          <span class=\"k\">var</span> timezone <span class=\"k\">=</span> parameter<span class=\"k\">.</span>attributes<span class=\"k\">[</span><span class=\"s\">'timezone'</span><span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>timezone <span class=\"k\">||</span> timezone <span class=\"k\">==</span> <span class=\"s\">'server'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>parameter<span class=\"k\">.</span>timezoneHint <span class=\"k\">==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"c\">// Extract timezone hint from data if we can and update the parameter</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span>value<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">28</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// Update the parameter's timezone hint</span>","                parameter<span class=\"k\">.</span>timezoneHint <span class=\"k\">=</span> value<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">23</span><span class=\"k\">,</span> <span class=\"s\">28</span><span class=\"k\">);</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> value<span class=\"k\">;</span>","          <span class=\"k\">}</span>","","          <span class=\"k\">if</span><span class=\"k\">(</span>timezone <span class=\"k\">==</span> <span class=\"s\">'client'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> value<span class=\"k\">;</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// for every other mode (fixed timezone modes), translate the time into the specified timezone</span>","          <span class=\"k\">if</span> <span class=\"k\">((</span>parameter<span class=\"k\">.</span>timezoneHint <span class=\"k\">!=</span> undefined <span class=\"k\">&amp;&amp;</span> $<span class=\"k\">.</span>trim<span class=\"k\">(</span>parameter<span class=\"k\">.</span>timezoneHint<span class=\"k\">).</span>length <span class=\"k\">!=</span> <span class=\"s\">0</span><span class=\"k\">)</span>","           <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">.</span>match<span class=\"k\">(</span>parameter<span class=\"k\">.</span>timezoneHint <span class=\"k\">+</span> <span class=\"s\">'$'</span><span class=\"k\">))</span>","          <span class=\"k\">{</span>","            <span class=\"k\">return</span> value<span class=\"k\">;</span>","          <span class=\"k\">}</span>","","          <span class=\"c\">// the resulting time will have the same universal time as the original one, but the string</span>","          <span class=\"c\">// will match the timeoffset specified in the timezone.</span>","          <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>convertTimeStampToTimeZone<span class=\"k\">(</span>value<span class=\"k\">,</span> timezone<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Converts a time from a arbitary timezone into the local timezone. The timestamp value remains unchanged,</span>","<span class=\"c\">     * but the string representation changes to reflect the give timezone.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param value the timestamp as string in UTC format</span>","<span class=\"c\">     * @param timezone the target timezone</span>","<span class=\"c\">     * @return the converted timestamp string.</span>","<span class=\"c\">     */</span>","    convertTimeStampToTimeZone<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">,</span> timezone<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_initDateFormatters<span class=\"k\">();</span>","      <span class=\"c\">// Lookup the offset in minutes</span>","      <span class=\"k\">var</span> offset <span class=\"k\">=</span> ReportTimeUtil<span class=\"k\">.</span>getOffset<span class=\"k\">(</span>timezone<span class=\"k\">);</span>","","      <span class=\"k\">var</span> localDate <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parseDateWithoutTimezoneInfo<span class=\"k\">(</span>value<span class=\"k\">);</span>","      <span class=\"k\">var</span> utcDate <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'with-timezone'</span><span class=\"k\">].</span>parse<span class=\"k\">(</span>value<span class=\"k\">);</span>","      <span class=\"k\">var</span> offsetText <span class=\"k\">=</span> ReportTimeUtil<span class=\"k\">.</span>formatOffset<span class=\"k\">(</span>offset<span class=\"k\">);</span>","","      <span class=\"k\">var</span> nativeOffset <span class=\"k\">=</span> <span class=\"k\">-(</span><span class=\"k\">new</span> Date<span class=\"k\">(</span>localDate<span class=\"k\">).</span>getTimezoneOffset<span class=\"k\">());</span>","","      <span class=\"k\">var</span> time <span class=\"k\">=</span> localDate<span class=\"k\">.</span>getTime<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"k\">(</span>offset <span class=\"k\">*</span> <span class=\"s\">60000</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>utcDate<span class=\"k\">.</span>getTime<span class=\"k\">()</span> <span class=\"k\">-</span> localDate<span class=\"k\">.</span>getTime<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">(</span>nativeOffset <span class=\"k\">*</span> <span class=\"s\">60000</span><span class=\"k\">));</span>","      <span class=\"k\">var</span> localDateWithShift <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">(</span>time<span class=\"k\">);</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dateFormatters<span class=\"k\">[</span><span class=\"s\">'without-timezone'</span><span class=\"k\">].</span>format<span class=\"k\">(</span>localDateWithShift<span class=\"k\">)</span> <span class=\"k\">+</span> offsetText<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['util/formatting.js'][1]++;
pen.define(["common-ui/prompting/pentaho-prompting", "common-ui/util/timeutil"], (function (p, ReportTimeUtil) {
  _$jscoverage['util/formatting.js'][2]++;
  return ({createDataTransportFormatter: (function (paramDefn, parameter, pattern) {
  _$jscoverage['util/formatting.js'][9]++;
  var formatterType = this._formatTypeMap[parameter.type];
  _$jscoverage['util/formatting.js'][10]++;
  if ((formatterType == "number")) {
    _$jscoverage['util/formatting.js'][11]++;
    return ({format: (function (number) {
  _$jscoverage['util/formatting.js'][13]++;
  return ("" + number);
}), parse: (function (s) {
  _$jscoverage['util/formatting.js'][16]++;
  return s;
})});
  }
  else {
    _$jscoverage['util/formatting.js'][19]++;
    if ((formatterType == "date")) {
      _$jscoverage['util/formatting.js'][20]++;
      return this._createDateTransportFormatter(parameter);
    }
  }
}), createFormatter: (function (paramDefn, parameter, pattern) {
  _$jscoverage['util/formatting.js'][29]++;
  if ((! jsTextFormatter)) {
    _$jscoverage['util/formatting.js'][30]++;
    console.log("Unable to find formatter module. No text formatting will be possible.");
    _$jscoverage['util/formatting.js'][31]++;
    return;
  }
  _$jscoverage['util/formatting.js'][35]++;
  var dataFormat = (pattern || parameter.attributes["data-format"]);
  _$jscoverage['util/formatting.js'][36]++;
  if (((! parameter.list) && dataFormat)) {
    _$jscoverage['util/formatting.js'][37]++;
    return jsTextFormatter.createFormatter(parameter.type, dataFormat);
  }
}), _formatTypeMap: {"number": "number", "java.lang.Number": "number", "java.lang.Byte": "number", "java.lang.Short": "number", "java.lang.Integer": "number", "java.lang.Long": "number", "java.lang.Float": "number", "java.lang.Double": "number", "java.math.BigDecimal": "number", "java.math.BigInteger": "number", "date": "date", "java.util.Date": "date", "java.sql.Date": "date", "java.sql.Time": "date", "java.sql.Timestamp": "date"}, _initDateFormatters: (function () {
  _$jscoverage['util/formatting.js'][62]++;
  if ((! this.dateFormatters)) {
    _$jscoverage['util/formatting.js'][63]++;
    this.dateFormatters = {"with-timezone": jsTextFormatter.createFormatter("date", "yyyy-MM-dd'T'HH:mm:ss.SSSZ"), "without-timezone": jsTextFormatter.createFormatter("date", "yyyy-MM-dd'T'HH:mm:ss.SSS"), "utc": jsTextFormatter.createFormatter("date", "yyyy-MM-dd'T'HH:mm:ss.SSS'+0000'"), "simple": jsTextFormatter.createFormatter("date", "yyyy-MM-dd")};
  }
}), _createDataTransportFormatter: (function (parameter, formatter) {
  _$jscoverage['util/formatting.js'][77]++;
  var formatterType = this._formatTypeMap[parameter.type];
  _$jscoverage['util/formatting.js'][78]++;
  if ((formatterType == "number")) {
    _$jscoverage['util/formatting.js'][79]++;
    return ({format: (function (object) {
  _$jscoverage['util/formatting.js'][81]++;
  return formatter.format(object);
}), parse: (function (s) {
  _$jscoverage['util/formatting.js'][84]++;
  return ("" + formatter.parse(s));
})});
  }
  else {
    _$jscoverage['util/formatting.js'][87]++;
    if ((formatterType == "date")) {
      _$jscoverage['util/formatting.js'][88]++;
      var transportFormatter = this._createDateTransportFormatter(parameter);
      _$jscoverage['util/formatting.js'][89]++;
      return ({format: (function (dateString) {
  _$jscoverage['util/formatting.js'][91]++;
  return formatter.format(transportFormatter.parse(dateString));
}), parse: (function (s) {
  _$jscoverage['util/formatting.js'][94]++;
  return transportFormatter.format(formatter.parse(s));
})});
    }
  }
}), _createDateTransportFormatter: (function (parameter, s) {
  _$jscoverage['util/formatting.js'][105]++;
  var timezone = parameter.attributes.timezone;
  _$jscoverage['util/formatting.js'][106]++;
  this._initDateFormatters();
  _$jscoverage['util/formatting.js'][107]++;
  return ({format: (function (date) {
  _$jscoverage['util/formatting.js'][109]++;
  if (("client" === timezone)) {
    _$jscoverage['util/formatting.js'][110]++;
    return this.dateFormatters["with-timezone"].format(date);
  }
  _$jscoverage['util/formatting.js'][114]++;
  if ((("server" === timezone) || (! timezone))) {
    _$jscoverage['util/formatting.js'][115]++;
    return this.dateFormatters["without-timezone"].format(date);
  }
  else {
    _$jscoverage['util/formatting.js'][116]++;
    if (("utc" === timezone)) {
      _$jscoverage['util/formatting.js'][117]++;
      return this.dateFormatters.utc.format(date);
    }
    else {
      _$jscoverage['util/formatting.js'][119]++;
      var offset = ReportTimeUtil.getOffsetAsString(timezone);
      _$jscoverage['util/formatting.js'][120]++;
      if ((! this.dateFormatters[offset])) {
        _$jscoverage['util/formatting.js'][121]++;
        this.dateFormatters[offset] = jsTextFormatter.createFormatter("date", ("yyyy-MM-dd'T'HH:mm:ss.SSS'" + offset + "'"));
      }
      _$jscoverage['util/formatting.js'][123]++;
      return this.dateFormatters[offset].format(date);
    }
  }
}).bind(this), parse: (function (s) {
  _$jscoverage['util/formatting.js'][127]++;
  if (("client" === timezone)) {
    _$jscoverage['util/formatting.js'][128]++;
    try {
      _$jscoverage['util/formatting.js'][130]++;
      return this.dateFormatters["with-timezone"].parse(s);
    }
    catch (e) {
    }
  }
  _$jscoverage['util/formatting.js'][135]++;
  try {
    _$jscoverage['util/formatting.js'][136]++;
    return this.parseDateWithoutTimezoneInfo(s);
  }
  catch (e) {
  }
  _$jscoverage['util/formatting.js'][140]++;
  try {
    _$jscoverage['util/formatting.js'][141]++;
    if ((s.length == 10)) {
      _$jscoverage['util/formatting.js'][142]++;
      return this.dateFormatters.simple.parse(s);
    }
  }
  catch (e) {
  }
  _$jscoverage['util/formatting.js'][147]++;
  try {
    _$jscoverage['util/formatting.js'][148]++;
    return new Date(parseFloat(s));
  }
  catch (e) {
  }
  _$jscoverage['util/formatting.js'][152]++;
  return "";
}).bind(this)});
}), parseDateWithoutTimezoneInfo: (function (dateString) {
  _$jscoverage['util/formatting.js'][159]++;
  if ((dateString.length === 28)) {
    _$jscoverage['util/formatting.js'][161]++;
    dateString = dateString.substring(0, 23);
  }
  _$jscoverage['util/formatting.js'][163]++;
  return this.dateFormatters["without-timezone"].parse(dateString);
}), normalizeParameterValue: (function (parameter, type, value) {
  _$jscoverage['util/formatting.js'][170]++;
  if (((value == null) || (type == null))) {
    _$jscoverage['util/formatting.js'][171]++;
    return null;
  }
  _$jscoverage['util/formatting.js'][175]++;
  var m = type.match("^\\[L([^;]+);$");
  _$jscoverage['util/formatting.js'][176]++;
  if (((m != null) && (m.length === 2))) {
    _$jscoverage['util/formatting.js'][177]++;
    type = m[1];
  }
  _$jscoverage['util/formatting.js'][180]++;
  switch (type) {
  case "java.util.Date":
  case "java.sql.Date":
  case "java.sql.Time":
  case "java.sql.Timestamp":
    _$jscoverage['util/formatting.js'][185]++;
    var timezone = parameter.attributes.timezone;
    _$jscoverage['util/formatting.js'][186]++;
    if (((! timezone) || (timezone == "server"))) {
      _$jscoverage['util/formatting.js'][187]++;
      if ((parameter.timezoneHint == undefined)) {
        _$jscoverage['util/formatting.js'][189]++;
        if ((value.length == 28)) {
          _$jscoverage['util/formatting.js'][191]++;
          parameter.timezoneHint = value.substring(23, 28);
        }
      }
      _$jscoverage['util/formatting.js'][194]++;
      return value;
    }
    _$jscoverage['util/formatting.js'][197]++;
    if ((timezone == "client")) {
      _$jscoverage['util/formatting.js'][198]++;
      return value;
    }
    _$jscoverage['util/formatting.js'][202]++;
    if (((parameter.timezoneHint != undefined) && ($.trim(parameter.timezoneHint).length != 0) && value.match((parameter.timezoneHint + "$")))) {
      _$jscoverage['util/formatting.js'][205]++;
      return value;
    }
    _$jscoverage['util/formatting.js'][210]++;
    return this.convertTimeStampToTimeZone(value, timezone);
  }
  _$jscoverage['util/formatting.js'][212]++;
  return value;
}), convertTimeStampToTimeZone: (function (value, timezone) {
  _$jscoverage['util/formatting.js'][224]++;
  this._initDateFormatters();
  _$jscoverage['util/formatting.js'][226]++;
  var offset = ReportTimeUtil.getOffset(timezone);
  _$jscoverage['util/formatting.js'][228]++;
  var localDate = this.parseDateWithoutTimezoneInfo(value);
  _$jscoverage['util/formatting.js'][229]++;
  var utcDate = this.dateFormatters["with-timezone"].parse(value);
  _$jscoverage['util/formatting.js'][230]++;
  var offsetText = ReportTimeUtil.formatOffset(offset);
  _$jscoverage['util/formatting.js'][232]++;
  var nativeOffset = (- new Date(localDate).getTimezoneOffset());
  _$jscoverage['util/formatting.js'][234]++;
  var time = (localDate.getTime() + (offset * 60000) + (utcDate.getTime() - localDate.getTime() - (nativeOffset * 60000)));
  _$jscoverage['util/formatting.js'][235]++;
  var localDateWithShift = new Date(time);
  _$jscoverage['util/formatting.js'][237]++;
  return (this.dateFormatters["without-timezone"].format(localDateWithShift) + offsetText);
})});
}));
