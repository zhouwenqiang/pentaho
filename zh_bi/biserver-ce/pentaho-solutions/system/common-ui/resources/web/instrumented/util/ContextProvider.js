/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['util/ContextProvider.js']) {
  _$jscoverage['util/ContextProvider.js'] = [];
  _$jscoverage['util/ContextProvider.js'][17] = 0;
  _$jscoverage['util/ContextProvider.js'][18] = 0;
  _$jscoverage['util/ContextProvider.js'][19] = 0;
  _$jscoverage['util/ContextProvider.js'][25] = 0;
  _$jscoverage['util/ContextProvider.js'][26] = 0;
  _$jscoverage['util/ContextProvider.js'][28] = 0;
  _$jscoverage['util/ContextProvider.js'][30] = 0;
  _$jscoverage['util/ContextProvider.js'][33] = 0;
  _$jscoverage['util/ContextProvider.js'][34] = 0;
  _$jscoverage['util/ContextProvider.js'][38] = 0;
  _$jscoverage['util/ContextProvider.js'][39] = 0;
  _$jscoverage['util/ContextProvider.js'][42] = 0;
  _$jscoverage['util/ContextProvider.js'][43] = 0;
  _$jscoverage['util/ContextProvider.js'][52] = 0;
  _$jscoverage['util/ContextProvider.js'][53] = 0;
  _$jscoverage['util/ContextProvider.js'][54] = 0;
  _$jscoverage['util/ContextProvider.js'][56] = 0;
  _$jscoverage['util/ContextProvider.js'][57] = 0;
  _$jscoverage['util/ContextProvider.js'][60] = 0;
  _$jscoverage['util/ContextProvider.js'][66] = 0;
  _$jscoverage['util/ContextProvider.js'][69] = 0;
  _$jscoverage['util/ContextProvider.js'][70] = 0;
  _$jscoverage['util/ContextProvider.js'][71] = 0;
  _$jscoverage['util/ContextProvider.js'][75] = 0;
  _$jscoverage['util/ContextProvider.js'][76] = 0;
  _$jscoverage['util/ContextProvider.js'][77] = 0;
  _$jscoverage['util/ContextProvider.js'][82] = 0;
  _$jscoverage['util/ContextProvider.js'][83] = 0;
  _$jscoverage['util/ContextProvider.js'][89] = 0;
  _$jscoverage['util/ContextProvider.js'][90] = 0;
  _$jscoverage['util/ContextProvider.js'][91] = 0;
  _$jscoverage['util/ContextProvider.js'][92] = 0;
  _$jscoverage['util/ContextProvider.js'][94] = 0;
  _$jscoverage['util/ContextProvider.js'][101] = 0;
  _$jscoverage['util/ContextProvider.js'][102] = 0;
  _$jscoverage['util/ContextProvider.js'][103] = 0;
  _$jscoverage['util/ContextProvider.js'][105] = 0;
  _$jscoverage['util/ContextProvider.js'][112] = 0;
  _$jscoverage['util/ContextProvider.js'][113] = 0;
  _$jscoverage['util/ContextProvider.js'][116] = 0;
}
_$jscoverage['util/ContextProvider.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\"> * ******************************************************************************</span>","<span class=\"c\"> * Pentaho</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright (C) 2002-2013 by Pentaho : http://www.pentaho.com</span>","<span class=\"c\"> * ******************************************************************************</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/*</span>","<span class=\"c\">\tConfig params</span>","<span class=\"c\">\tvar configParam1 = \"some_path/file_name1\";</span>","<span class=\"c\">\tvar configParam2 = { path:\"some_path/file_name2\", post: function(context, loadedMap) { } };</span>","","<span class=\"c\">\tvar demoConfig = [\"some_path/file_name1\", { path:\"some_path/file_name2\", post: function(context, loadedMap) { }}, \"some_other_path/file_name\"];</span>","<span class=\"c\">*/</span>","","pen<span class=\"k\">.</span>define<span class=\"k\">([</span><span class=\"s\">\"common-ui/jquery-i18n\"</span><span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> context <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t<span class=\"k\">var</span> loaded <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * A recursive function, iterating over each configuration file and executing specific functions per configuration.</span>","<span class=\"c\">\t * This function iterates until the end of the configurations has been met</span>","<span class=\"c\">\t */</span>","\t<span class=\"k\">function</span> recursiveInit<span class=\"k\">(</span>config<span class=\"k\">,</span> index<span class=\"k\">,</span> postContextLoad<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> configParam <span class=\"k\">=</span> config<span class=\"k\">[</span>index<span class=\"k\">];</span>\t\t","","\t\t<span class=\"k\">var</span> path <span class=\"k\">=</span> configParam<span class=\"k\">.</span>path <span class=\"k\">?</span> configParam<span class=\"k\">.</span>path <span class=\"k\">:</span> configParam<span class=\"k\">;</span>","","\t\tloadFile<span class=\"k\">(</span>path<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> loadedMap<span class=\"k\">)</span> <span class=\"k\">{</span>","","\t\t\t<span class=\"c\">// Execute configuration specific method</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>configParam<span class=\"k\">.</span>post<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tconfigParam<span class=\"k\">.</span>post<span class=\"k\">(</span>context<span class=\"k\">,</span> loadedMap<span class=\"k\">);</span>\t","\t\t\t<span class=\"k\">}</span>","\t\t\t","\t\t\t<span class=\"c\">// Determine whether to recur or exit</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>index <span class=\"k\">&lt;</span> config<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\trecursiveInit<span class=\"k\">(</span>config<span class=\"k\">,</span> index <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span> postContextLoad<span class=\"k\">)</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\tloaded <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t\t\tpostContextLoad<span class=\"k\">(</span>context<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">!</span>configParam<span class=\"k\">.</span>post<span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Loads a single file and provides a post function for after the context has been loaded. </span>","<span class=\"c\">\t */</span>","\t<span class=\"k\">function</span> loadFile<span class=\"k\">(</span>path<span class=\"k\">,</span> postFileLoad<span class=\"k\">,</span> addToContext<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t\t<span class=\"k\">var</span> locale <span class=\"k\">=</span> getUrlVars<span class=\"k\">()[</span><span class=\"s\">\"locale\"</span><span class=\"k\">];</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>locale <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// look to see if locale is set on the page in a meta tag</span>","      <span class=\"k\">if</span><span class=\"k\">(</span>$<span class=\"k\">(</span><span class=\"s\">\"meta[name='locale']\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","        locale <span class=\"k\">=</span> $<span class=\"k\">(</span><span class=\"s\">\"meta[name='locale']\"</span><span class=\"k\">).</span>attr<span class=\"k\">(</span><span class=\"s\">\"content\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","\t\tjQuery<span class=\"k\">.</span>i18n<span class=\"k\">.</span>properties<span class=\"k\">(</span><span class=\"k\">{</span>","\t  \t\tname<span class=\"k\">:</span> path<span class=\"k\">,</span>","\t  \t\tmode<span class=\"k\">:</span> <span class=\"s\">'map'</span><span class=\"k\">,</span>","\t  \t\tlanguage<span class=\"k\">:</span> locale<span class=\"k\">,</span>","\t  \t\tcallback<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","\t  \t\t\t<span class=\"k\">var</span> copiedMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","\t  \t\t\t<span class=\"c\">// Copy elements and remove elements for next file load</span>","\t  \t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span>configProp <span class=\"k\">in</span> jQuery<span class=\"k\">.</span>i18n<span class=\"k\">.</span>map<span class=\"k\">)</span> <span class=\"k\">{</span>","\t  \t\t\t\tcopiedMap<span class=\"k\">[</span>configProp<span class=\"k\">]</span> <span class=\"k\">=</span> jQuery<span class=\"k\">.</span>i18n<span class=\"k\">.</span>map<span class=\"k\">[</span>configProp<span class=\"k\">];</span>","\t  \t\t\t\t<span class=\"k\">delete</span> jQuery<span class=\"k\">.</span>i18n<span class=\"k\">.</span>map<span class=\"k\">[</span>configProp<span class=\"k\">];</span>","\t  \t\t\t<span class=\"k\">}</span>","","\t\t\t\t<span class=\"c\">// Simply copy values into context</span>","\t  \t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>addToContext<span class=\"k\">)</span> <span class=\"k\">{</span>","\t  \t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span>configProp <span class=\"k\">in</span> copiedMap<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t  \t\t\t\tcontext<span class=\"k\">[</span>configProp<span class=\"k\">]</span> <span class=\"k\">=</span> copiedMap<span class=\"k\">[</span>configProp<span class=\"k\">];</span>","\t\t  \t\t\t<span class=\"k\">}</span>","\t  \t\t\t<span class=\"k\">}</span>","","\t  \t\t\t<span class=\"c\">// Execute generic post load of context</span>","\t  \t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>postFileLoad<span class=\"k\">)</span> <span class=\"k\">{</span>","\t  \t\t\t\tpostFileLoad<span class=\"k\">(</span>context<span class=\"k\">,</span> copiedMap<span class=\"k\">);</span>","\t  \t\t\t<span class=\"k\">}</span>","\t  \t\t<span class=\"k\">}</span>","\t  \t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">function</span> getUrlVars<span class=\"k\">()</span> <span class=\"k\">{</span>","\t    <span class=\"k\">var</span> vars <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t    <span class=\"k\">var</span> parts <span class=\"k\">=</span> window<span class=\"k\">.</span>top<span class=\"k\">.</span>location<span class=\"k\">.</span>href<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>m<span class=\"k\">,</span>key<span class=\"k\">,</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","\t        vars<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","\t    <span class=\"k\">}</span><span class=\"k\">);</span>","\t    <span class=\"k\">return</span> vars<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Retrieve the context, accepting a post load method for the context and a configuration array.</span>","<span class=\"c\">\t */</span>","\t<span class=\"k\">function</span> get<span class=\"k\">(</span>postContextLoad<span class=\"k\">,</span> config<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(!</span>loaded<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trecursiveInit<span class=\"k\">(</span>config<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> postContextLoad<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span> ","\t\t\tpostContextLoad<span class=\"k\">(</span>context<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> \t\t","\t<span class=\"k\">}</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Appends a property to the context</span>","<span class=\"c\">\t */</span>","\t<span class=\"k\">function</span> addProperty<span class=\"k\">(</span>property<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tcontext<span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\tget<span class=\"k\">:</span>get<span class=\"k\">,</span>","\t\taddProperty<span class=\"k\">:</span>addProperty","\t<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['util/ContextProvider.js'][17]++;
pen.define(["common-ui/jquery-i18n"], (function () {
  _$jscoverage['util/ContextProvider.js'][18]++;
  var context = {};
  _$jscoverage['util/ContextProvider.js'][19]++;
  var loaded = false;
  _$jscoverage['util/ContextProvider.js'][25]++;
  function recursiveInit(config, index, postContextLoad) {
    _$jscoverage['util/ContextProvider.js'][26]++;
    var configParam = config[index];
    _$jscoverage['util/ContextProvider.js'][28]++;
    var path = (configParam.path? configParam.path: configParam);
    _$jscoverage['util/ContextProvider.js'][30]++;
    loadFile(path, (function (context, loadedMap) {
  _$jscoverage['util/ContextProvider.js'][33]++;
  if (configParam.post) {
    _$jscoverage['util/ContextProvider.js'][34]++;
    configParam.post(context, loadedMap);
  }
  _$jscoverage['util/ContextProvider.js'][38]++;
  if ((index < (config.length - 1))) {
    _$jscoverage['util/ContextProvider.js'][39]++;
    recursiveInit(config, (index + 1), postContextLoad);
  }
  else {
    _$jscoverage['util/ContextProvider.js'][42]++;
    loaded = true;
    _$jscoverage['util/ContextProvider.js'][43]++;
    postContextLoad(context);
  }
}), (! configParam.post));
}
  _$jscoverage['util/ContextProvider.js'][52]++;
  function loadFile(path, postFileLoad, addToContext) {
    _$jscoverage['util/ContextProvider.js'][53]++;
    var locale = getUrlVars().locale;
    _$jscoverage['util/ContextProvider.js'][54]++;
    if ((! locale)) {
      _$jscoverage['util/ContextProvider.js'][56]++;
      if ($("meta[name='locale']")) {
        _$jscoverage['util/ContextProvider.js'][57]++;
        locale = $("meta[name='locale']").attr("content");
      }
    }
    _$jscoverage['util/ContextProvider.js'][60]++;
    jQuery.i18n.properties({name: path, mode: "map", language: locale, callback: (function () {
  _$jscoverage['util/ContextProvider.js'][66]++;
  var copiedMap = {};
  _$jscoverage['util/ContextProvider.js'][69]++;
  for (configProp in jQuery.i18n.map) {
    _$jscoverage['util/ContextProvider.js'][70]++;
    copiedMap[configProp] = jQuery.i18n.map[configProp];
    _$jscoverage['util/ContextProvider.js'][71]++;
    (delete jQuery.i18n.map[configProp]);
}
  _$jscoverage['util/ContextProvider.js'][75]++;
  if (addToContext) {
    _$jscoverage['util/ContextProvider.js'][76]++;
    for (configProp in copiedMap) {
      _$jscoverage['util/ContextProvider.js'][77]++;
      context[configProp] = copiedMap[configProp];
}
  }
  _$jscoverage['util/ContextProvider.js'][82]++;
  if (postFileLoad) {
    _$jscoverage['util/ContextProvider.js'][83]++;
    postFileLoad(context, copiedMap);
  }
})});
}
  _$jscoverage['util/ContextProvider.js'][89]++;
  function getUrlVars() {
    _$jscoverage['util/ContextProvider.js'][90]++;
    var vars = {};
    _$jscoverage['util/ContextProvider.js'][91]++;
    var parts = window.top.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, (function (m, key, value) {
  _$jscoverage['util/ContextProvider.js'][92]++;
  vars[key] = value;
}));
    _$jscoverage['util/ContextProvider.js'][94]++;
    return vars;
}
  _$jscoverage['util/ContextProvider.js'][101]++;
  function get(postContextLoad, config) {
    _$jscoverage['util/ContextProvider.js'][102]++;
    if ((! loaded)) {
      _$jscoverage['util/ContextProvider.js'][103]++;
      recursiveInit(config, 0, postContextLoad);
    }
    else {
      _$jscoverage['util/ContextProvider.js'][105]++;
      postContextLoad(context);
    }
}
  _$jscoverage['util/ContextProvider.js'][112]++;
  function addProperty(property, value) {
    _$jscoverage['util/ContextProvider.js'][113]++;
    context[property] = value;
}
  _$jscoverage['util/ContextProvider.js'][116]++;
  return ({get: get, addProperty: addProperty});
}));
