/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['prompting/pentaho-prompting.js']) {
  _$jscoverage['prompting/pentaho-prompting.js'] = [];
  _$jscoverage['prompting/pentaho-prompting.js'][1] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][2] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][3] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][5] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][6] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][10] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][11] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][12] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][13] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][14] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][15] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][17] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][18] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][23] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][24] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][28] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][30] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][43] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][44] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][45] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][46] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][47] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][50] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][54] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][55] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][57] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][61] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][62] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][63] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][64] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][65] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][69] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][73] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][74] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][75] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][76] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][77] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][80] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][84] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][85] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][86] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][87] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][88] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][89] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][90] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][93] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][96] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][102] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][110] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][127] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][128] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][129] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][130] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][131] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][132] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][136] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][143] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][144] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][145] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][146] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][147] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][150] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][157] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][158] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][159] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][160] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][163] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][170] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][171] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][172] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][173] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][176] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][182] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][201] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][202] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][203] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][204] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][209] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][213] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][215] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][217] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][218] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][219] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][220] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][222] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][226] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][227] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][232] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][233] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][234] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][236] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][239] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][249] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][253] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][254] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][257] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][259] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][263] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][264] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][265] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][267] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][268] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][269] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][272] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][274] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][275] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][278] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][285] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][286] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][288] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][289] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][292] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][293] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][295] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][296] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][297] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][298] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][300] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][301] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][302] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][304] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][305] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][307] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][308] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][309] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][310] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][311] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][313] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][316] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][318] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][319] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][321] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][324] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][325] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][326] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][327] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][328] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][329] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][330] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][332] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][333] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][334] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][335] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][336] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][337] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][339] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][343] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][344] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][346] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][347] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][348] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][349] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][350] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][351] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][352] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][353] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][356] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][357] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][358] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][361] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][362] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][365] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][366] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][367] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][368] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][370] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][372] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][373] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][375] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][377] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][378] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][379] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][380] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][382] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][384] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][385] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][386] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][388] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][390] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][391] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][393] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][400] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][401] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][404] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][405] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][406] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][407] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][408] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][410] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][411] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][414] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][415] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][416] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][417] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][418] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][421] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][422] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][423] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][424] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][430] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][432] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][434] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][435] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][438] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][440] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][445] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][446] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][452] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][453] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][459] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][460] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][467] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][468] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][469] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][470] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][475] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][476] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][478] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][479] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][481] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][483] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][495] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][517] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][521] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][525] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][526] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][532] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][533] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][534] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][535] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][536] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][537] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][539] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][545] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][546] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][552] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][553] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][554] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][557] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][560] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][561] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][564] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][565] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][568] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][569] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][575] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][580] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][581] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][587] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][597] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][598] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][615] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][616] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][623] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][624] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][625] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][627] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][639] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][640] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][641] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][644] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][647] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][648] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][652] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][653] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][654] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][657] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][658] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][659] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][660] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][661] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][662] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][663] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][667] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][668] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][669] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][670] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][676] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][679] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][689] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][690] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][691] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][692] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][693] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][695] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][697] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][699] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][700] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][702] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][703] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][705] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][706] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][710] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][711] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][714] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][715] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][716] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][717] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][718] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][721] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][722] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][723] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][724] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][730] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][734] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][739] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][741] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][744] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][746] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][748] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][750] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][755] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][758] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][761] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][762] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][765] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][766] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][771] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][772] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][775] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][776] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][781] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][784] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][794] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][795] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][798] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][799] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][801] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][802] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][804] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][806] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][808] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][809] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][812] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][813] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][815] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][818] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][823] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][824] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][825] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][826] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][827] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][832] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][833] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][838] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][839] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][840] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][841] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][847] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][848] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][851] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][854] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][855] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][860] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][864] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][865] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][866] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][867] = 0;
  _$jscoverage['prompting/pentaho-prompting.js'][871] = 0;
}
_$jscoverage['prompting/pentaho-prompting.js'].source = ["pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"k\">{}</span> <span class=\"k\">:</span> pentaho<span class=\"k\">;</span>","pentaho<span class=\"k\">.</span>common <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","pen<span class=\"k\">.</span>define<span class=\"k\">([</span> <span class=\"s\">'cdf/cdf-module'</span><span class=\"k\">,</span> <span class=\"s\">'common-ui/prompting/pentaho-prompting-bind'</span><span class=\"k\">,</span> <span class=\"s\">'common-ui/prompting/pentaho-prompting-components'</span><span class=\"k\">,</span> <span class=\"s\">'common-ui/util/base64'</span> <span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> GUIDHelper <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Simple array of used Prompt GUIDs so they and their components can be uniquely identified.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_assignedGUIDs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_gen <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> Math<span class=\"k\">.</span>round<span class=\"k\">(</span>Math<span class=\"k\">.</span>random<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"s\">100000</span><span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>generateGUID <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> guid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_gen<span class=\"k\">();</span>","      <span class=\"k\">while</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_assignedGUIDs<span class=\"k\">[</span>guid<span class=\"k\">])</span> <span class=\"k\">{</span>","        guid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_gen<span class=\"k\">();</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_assignedGUIDs<span class=\"k\">[</span>guid<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> <span class=\"s\">''</span> <span class=\"k\">+</span> guid<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Reset the collection of assigned GUIDs</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>reset <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_assignedGUIDs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  $<span class=\"k\">.</span>extend<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">,</span> <span class=\"k\">{</span>","    ParameterDefinition<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">{</span>","        <span class=\"s\">'autoSubmit'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'autoSubmitUI'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'ignoreBiServer5538'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'layout'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string, [vertical, horizontal]</span>","        <span class=\"s\">'page'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// integer</span>","        <span class=\"s\">'paginate'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'parameterGroups'</span><span class=\"k\">:</span> <span class=\"k\">[],</span>","        <span class=\"s\">'promptNeeded'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'totalPages'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// integer</span>","        <span class=\"s\">'errors'</span><span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"c\">// hash of {paramName, [error1..n]}. \"Global\" errors are stored as {'null', [error1..n]}.</span>","","        getParameterGroup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> group<span class=\"k\">;</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>parameterGroups<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> g<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>g<span class=\"k\">.</span>name <span class=\"k\">===</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","              group <span class=\"k\">=</span> g<span class=\"k\">;</span>","              <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// break</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","          <span class=\"k\">return</span> group<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        allowAutoSubmit<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>autoSubmit <span class=\"k\">!=</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>autoSubmit<span class=\"k\">;</span>","          <span class=\"k\">}</span>","          <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>autoSubmitUI<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        showParameterUI<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> showParameters<span class=\"k\">;</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>mapParameters<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>p<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>p<span class=\"k\">.</span>name <span class=\"k\">==</span> <span class=\"s\">'showParameters'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                showParameters <span class=\"k\">=</span> p<span class=\"k\">;</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// break</span>","              <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","","          <span class=\"k\">return</span> <span class=\"k\">!</span>showParameters <span class=\"k\">||</span> <span class=\"k\">!</span>showParameters<span class=\"k\">.</span>isSelectedValue<span class=\"k\">(</span><span class=\"s\">'false'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getParameter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> param<span class=\"k\">;</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>mapParameters<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>p<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>p<span class=\"k\">.</span>name <span class=\"k\">===</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","              param <span class=\"k\">=</span> p<span class=\"k\">;</span>","              <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// break</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","          <span class=\"k\">return</span> param<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        mapParameters<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>f<span class=\"k\">,</span> x<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> d <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","          <span class=\"k\">var</span> breaking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>parameterGroups<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> g<span class=\"k\">)</span> <span class=\"k\">{</span>","            $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>parameters<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>j<span class=\"k\">,</span> p<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span>f<span class=\"k\">.</span>call<span class=\"k\">(</span>x<span class=\"k\">,</span> p<span class=\"k\">,</span> g<span class=\"k\">,</span> d<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                breaking <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// break</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>breaking<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","","          <span class=\"k\">return</span> <span class=\"k\">!</span>breaking<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    ParameterGroup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">{</span>","        <span class=\"s\">'name'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string</span>","        <span class=\"s\">'label'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string</span>","        <span class=\"s\">'parameters'</span><span class=\"k\">:</span> <span class=\"k\">[]</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    Parameter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">{</span>","        <span class=\"s\">'name'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string</span>","        <span class=\"s\">'type'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string, java class name</span>","        <span class=\"s\">'list'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'mandatory'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'multiSelect'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'strict'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        <span class=\"s\">'timezoneHint'</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string</span>","        <span class=\"s\">'attributes'</span><span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"c\">// hash of strings</span>","        <span class=\"s\">'values'</span><span class=\"k\">:</span> <span class=\"k\">[],</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Checks if the value provided is selected in this parameter</span>","<span class=\"c\">         * @param value Value to search for</span>","<span class=\"c\">         * @return true if this parameter contains a selection whose value = {value}</span>","<span class=\"c\">         */</span>","        isSelectedValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> selected <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>values<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> v<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>v<span class=\"k\">.</span>selected<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">===</span> v<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","                selected <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// break</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","          <span class=\"k\">return</span> selected<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Determine if any of our values are selected (selected = true)</span>","<span class=\"c\">         */</span>","        hasSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> s <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>values<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> v<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>v<span class=\"k\">.</span>selected<span class=\"k\">)</span> <span class=\"k\">{</span>","              s <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","              <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// break</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","          <span class=\"k\">return</span> s<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Obtains an array with the selected ParameterValue objects.</span>","<span class=\"c\">         */</span>","        getSelectedValues<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> selected <span class=\"k\">=</span> <span class=\"k\">[];</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>values<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>val<span class=\"k\">.</span>selected<span class=\"k\">)</span> <span class=\"k\">{</span>","              selected<span class=\"k\">.</span>push<span class=\"k\">(</span>val<span class=\"k\">);</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","          <span class=\"k\">return</span> selected<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Obtains an array with the values of the selected ParameterValue objects.</span>","<span class=\"c\">         */</span>","        getSelectedValuesValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> selected <span class=\"k\">=</span> <span class=\"k\">[];</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>values<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>val<span class=\"k\">.</span>selected<span class=\"k\">)</span> <span class=\"k\">{</span>","              selected<span class=\"k\">.</span>push<span class=\"k\">(</span>val<span class=\"k\">.</span>value<span class=\"k\">);</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","          <span class=\"k\">return</span> selected<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    ParameterValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">{</span>","        type<span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string</span>","        label<span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// string</span>","        selected<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"c\">// boolean</span>","        value<span class=\"k\">:</span> undefined <span class=\"c\">// type defined by parameter this value belongs to</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    promptGUIDHelper<span class=\"k\">:</span> <span class=\"k\">new</span> GUIDHelper<span class=\"k\">(),</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Remove components from Dashboards.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param components Components to remove from Dashboards.components.</span>","<span class=\"c\">     * @param postponeClear If true we'll postpone calling component.clear() on all removed components.</span>","<span class=\"c\">     */</span>","    removeDashboardComponents<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>components<span class=\"k\">,</span> postponeClear<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Traverse all embedded components to remove them</span>","","      <span class=\"k\">var</span> removed <span class=\"k\">=</span> <span class=\"k\">[];</span>","      window<span class=\"k\">.</span>CompositeComponent<span class=\"k\">.</span>mapComponentsList<span class=\"k\">(</span>components<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>c<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> rc <span class=\"k\">=</span> Dashboards<span class=\"k\">.</span>removeComponent<span class=\"k\">(</span>c<span class=\"k\">.</span>name<span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>rc<span class=\"k\">)</span> <span class=\"k\">{</span> removed<span class=\"k\">.</span>push<span class=\"k\">(</span>rc<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"c\">// Remove references to each removed components parameter but leave the parameter so it may be reselected if it's reused by</span>","      <span class=\"c\">// another component</span>","      $<span class=\"k\">.</span>each<span class=\"k\">(</span>removed<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> component<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// It would be wise to always call component.clear() here except that since Dashboards.init() schedules the components</span>","        <span class=\"c\">// to update() in a setTimeout(). To prevent that, we'll clear the removed components with the GarbageCollectorComponent</span>","        <span class=\"c\">// when we initialize the next set of components.</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>postponeClear<span class=\"k\">)</span> <span class=\"k\">{</span> component<span class=\"k\">.</span>clear<span class=\"k\">();</span> <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>component<span class=\"k\">.</span>parameter<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// Remove our parameter from any other listening components</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span>Dashboards<span class=\"k\">.</span>components<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> c<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>$<span class=\"k\">.</span>isArray<span class=\"k\">(</span>c<span class=\"k\">.</span>listeners<span class=\"k\">))</span> <span class=\"k\">{</span>","                c<span class=\"k\">.</span>listeners <span class=\"k\">=</span> $<span class=\"k\">.</span>grep<span class=\"k\">(</span>c<span class=\"k\">.</span>listeners<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>l<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> l <span class=\"k\">!==</span> component<span class=\"k\">.</span>parameter<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","","          <span class=\"c\">// Remove our parameter from any other component's dynamic parameters list</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span>Dashboards<span class=\"k\">.</span>components<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> c<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>$<span class=\"k\">.</span>isArray<span class=\"k\">(</span>c<span class=\"k\">.</span>parameters<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"c\">// TODO: I'm afraid that the following code does nothing...</span>","                <span class=\"c\">// The return value of the $.each callback function is only taken account when === false,</span>","                <span class=\"c\">// meaning to break the loop. Otherwise, it is ignored.</span>","                <span class=\"c\">// The return value of $.each is the first argument: c.parameters .</span>","                c<span class=\"k\">.</span>parameters <span class=\"k\">=</span> $<span class=\"k\">.</span>each<span class=\"k\">(</span>c<span class=\"k\">.</span>parameters<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>j<span class=\"k\">,</span> p<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>p<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">===</span> component<span class=\"k\">.</span>parameter<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">[</span>p<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> <span class=\"s\">''</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">];</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> p<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Append the array b to the array a.</span>","<span class=\"c\">     */</span>","    appendInline<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","      a<span class=\"k\">.</span>splice<span class=\"k\">.</span>apply<span class=\"k\">(</span>a<span class=\"k\">,</span> <span class=\"k\">[</span>a<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">].</span>concat<span class=\"k\">(</span>b<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    prepareCDF<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>prepared<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      Dashboards<span class=\"k\">.</span>setGlobalContext<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","","      <span class=\"c\">// Don't escape parameter values - we want the exactly as they are declared. We'll handle escaping the values if necessary.</span>","      Dashboards<span class=\"k\">.</span>escapeParameterValues <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>prepared <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    parseXML<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> data <span class=\"k\">,</span> xml <span class=\"k\">,</span> tmp <span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>DOMParser <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// Standard</span>","        tmp <span class=\"k\">=</span> <span class=\"k\">new</span> DOMParser<span class=\"k\">();</span>","        xml <span class=\"k\">=</span> tmp<span class=\"k\">.</span>parseFromString<span class=\"k\">(</span> data <span class=\"k\">,</span> <span class=\"s\">\"text/xml\"</span> <span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"c\">// IE</span>","        xml <span class=\"k\">=</span> <span class=\"k\">new</span> ActiveXObject<span class=\"k\">(</span> <span class=\"s\">\"Microsoft.XMLDOM\"</span> <span class=\"k\">);</span>","        xml<span class=\"k\">.</span>async <span class=\"k\">=</span> <span class=\"s\">\"false\"</span><span class=\"k\">;</span>","        xml<span class=\"k\">.</span>loadXML<span class=\"k\">(</span> data <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      tmp <span class=\"k\">=</span> xml<span class=\"k\">.</span>documentElement<span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span> tmp <span class=\"k\">||</span> <span class=\"k\">!</span> tmp<span class=\"k\">.</span>nodeName <span class=\"k\">||</span> tmp<span class=\"k\">.</span>nodeName <span class=\"k\">===</span> <span class=\"s\">\"parsererror\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        jQuery<span class=\"k\">.</span>error<span class=\"k\">(</span> <span class=\"s\">\"Invalid XML: \"</span> <span class=\"k\">+</span> data <span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> xml<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Parses a Parameter XML into a proper JSON object.</span>","<span class=\"c\">     */</span>","    ParameterXmlParser<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>parseParameterXml <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>xmlString<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> xml <span class=\"k\">=</span> $<span class=\"k\">(</span>pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>parseXML<span class=\"k\">(</span>xmlString<span class=\"k\">));</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>xml<span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"s\">'parsererror'</span><span class=\"k\">).</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">throw</span> xmlString<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> paramDefn <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>ParameterDefinition<span class=\"k\">();</span>","        <span class=\"k\">var</span> parameters <span class=\"k\">=</span> $<span class=\"k\">(</span>xml<span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"s\">'parameters'</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","","        paramDefn<span class=\"k\">.</span>promptNeeded <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'is-prompt-needed'</span><span class=\"k\">);</span>","        paramDefn<span class=\"k\">.</span>ignoreBiServer5538 <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'ignore-biserver-5538'</span><span class=\"k\">);</span>","        paramDefn<span class=\"k\">.</span>paginate <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'paginate'</span><span class=\"k\">);</span>","        paramDefn<span class=\"k\">.</span>layout <span class=\"k\">=</span> parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'layout'</span><span class=\"k\">);</span>","","        <span class=\"k\">var</span> parseInteger <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>s<span class=\"k\">,</span> def<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> n <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>s<span class=\"k\">);</span>","          <span class=\"k\">return</span> <span class=\"s\">'NaN'</span> <span class=\"k\">==</span> n <span class=\"k\">?</span> def <span class=\"k\">:</span> n<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        paramDefn<span class=\"k\">.</span>page <span class=\"k\">=</span> parseInteger<span class=\"k\">(</span>parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'accepted-page'</span><span class=\"k\">),</span> <span class=\"s\">0</span><span class=\"k\">);</span>","        paramDefn<span class=\"k\">.</span>totalPages <span class=\"k\">=</span> parseInteger<span class=\"k\">(</span>parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'page-count'</span><span class=\"k\">),</span> <span class=\"s\">0</span><span class=\"k\">);</span>","","        paramDefn<span class=\"k\">.</span>autoSubmit <span class=\"k\">=</span> parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'autoSubmit'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>paramDefn<span class=\"k\">.</span>autoSubmit <span class=\"k\">==</span> <span class=\"s\">'true'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          paramDefn<span class=\"k\">.</span>autoSubmit <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>paramDefn<span class=\"k\">.</span>autoSubmit <span class=\"k\">==</span> <span class=\"s\">'false'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          paramDefn<span class=\"k\">.</span>autoSubmit <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          paramDefn<span class=\"k\">.</span>autoSubmit <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        paramDefn<span class=\"k\">.</span>autoSubmitUI <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> parameters<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'autoSubmitUI'</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>parseParameters<span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> parameters<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>parseErrors<span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> xml<span class=\"k\">);</span>","","        <span class=\"k\">return</span> paramDefn<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>parseParameters <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> parametersNode<span class=\"k\">)</span> <span class=\"k\">{</span>","        parametersNode<span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"s\">'parameter'</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> node<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> param <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parseParameter<span class=\"k\">(</span>node<span class=\"k\">);</span>","          node <span class=\"k\">=</span> $<span class=\"k\">(</span>node<span class=\"k\">);</span>","          <span class=\"k\">var</span> groupName <span class=\"k\">=</span> param<span class=\"k\">.</span>attributes<span class=\"k\">[</span><span class=\"s\">'parameter-group'</span><span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>groupName <span class=\"k\">==</span> undefined <span class=\"k\">||</span> <span class=\"k\">!</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span>groupName<span class=\"k\">).</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            groupName <span class=\"k\">=</span> <span class=\"s\">'parameters'</span><span class=\"k\">;</span> <span class=\"c\">// default group</span>","          <span class=\"k\">}</span>","          <span class=\"k\">var</span> group <span class=\"k\">=</span> paramDefn<span class=\"k\">.</span>getParameterGroup<span class=\"k\">(</span>groupName<span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>group<span class=\"k\">)</span> <span class=\"k\">{</span>","            group <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>ParameterGroup<span class=\"k\">();</span>","            group<span class=\"k\">.</span>name <span class=\"k\">=</span> groupName<span class=\"k\">;</span>","            group<span class=\"k\">.</span>label <span class=\"k\">=</span> param<span class=\"k\">.</span>attributes<span class=\"k\">[</span><span class=\"s\">'parameter-group-label'</span><span class=\"k\">];</span>","            paramDefn<span class=\"k\">.</span>parameterGroups<span class=\"k\">.</span>push<span class=\"k\">(</span>group<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          group<span class=\"k\">.</span>parameters<span class=\"k\">.</span>push<span class=\"k\">(</span>param<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>parseParameter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> param <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>Parameter<span class=\"k\">();</span>","","        node <span class=\"k\">=</span> $<span class=\"k\">(</span>node<span class=\"k\">);</span>","        param<span class=\"k\">.</span>name <span class=\"k\">=</span> node<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'name'</span><span class=\"k\">);</span>","        param<span class=\"k\">.</span>mandatory <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> node<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'is-mandatory'</span><span class=\"k\">);</span>","        param<span class=\"k\">.</span>strict <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> node<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'is-strict'</span><span class=\"k\">);</span>","        param<span class=\"k\">.</span>list <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> node<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'is-list'</span><span class=\"k\">);</span>","        param<span class=\"k\">.</span>multiSelect <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> node<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'is-multi-select'</span><span class=\"k\">);</span>","        param<span class=\"k\">.</span>type <span class=\"k\">=</span> node<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'type'</span><span class=\"k\">);</span>","        param<span class=\"k\">.</span>timezoneHint <span class=\"k\">=</span> node<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'timezone-hint'</span><span class=\"k\">);</span>","","        <span class=\"c\">// TODO: Support namespaces</span>","        $<span class=\"k\">(</span>node<span class=\"k\">).</span>find<span class=\"k\">(</span><span class=\"s\">'attribute'</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> attr<span class=\"k\">)</span> <span class=\"k\">{</span>","          attr <span class=\"k\">=</span> $<span class=\"k\">(</span>attr<span class=\"k\">);</span>","          param<span class=\"k\">.</span>attributes<span class=\"k\">[</span>attr<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'name'</span><span class=\"k\">)]</span> <span class=\"k\">=</span> attr<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'value'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        param<span class=\"k\">.</span>values <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parseParameterValues<span class=\"k\">(</span>node<span class=\"k\">,</span> param<span class=\"k\">);</span>","        <span class=\"k\">return</span> param<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>parseParameterValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramNode<span class=\"k\">,</span> parameter<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","        $<span class=\"k\">(</span>paramNode<span class=\"k\">).</span>find<span class=\"k\">(</span><span class=\"s\">'values value'</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> pVal <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>ParameterValue<span class=\"k\">()</span>  <span class=\"k\">;</span>","","          value <span class=\"k\">=</span> $<span class=\"k\">(</span>value<span class=\"k\">);</span>","","          <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'true'</span> <span class=\"k\">==</span> value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'encoded'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","            pVal<span class=\"k\">.</span>label <span class=\"k\">=</span> base64Decode<span class=\"k\">(</span>value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'label'</span><span class=\"k\">));</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            pVal<span class=\"k\">.</span>label <span class=\"k\">=</span> value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'label'</span><span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'true'</span> <span class=\"k\">==</span> value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'null'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","            pVal<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span> <span class=\"c\">// Dashboards doesn't play nicely with null values for parameters</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'true'</span> <span class=\"k\">==</span> value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'encoded'</span><span class=\"k\">))</span> <span class=\"k\">{</span>","            pVal<span class=\"k\">.</span>value <span class=\"k\">=</span> base64Decode<span class=\"k\">(</span>value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'value'</span><span class=\"k\">));</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            pVal<span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'value'</span><span class=\"k\">);</span>","          <span class=\"k\">}</span>","          pVal<span class=\"k\">.</span>type <span class=\"k\">=</span> value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'type'</span><span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>pVal<span class=\"k\">.</span>type <span class=\"k\">==</span> undefined <span class=\"k\">||</span> <span class=\"k\">!</span>$<span class=\"k\">.</span>trim<span class=\"k\">(</span>pVal<span class=\"k\">.</span>type<span class=\"k\">).</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            pVal<span class=\"k\">.</span>type <span class=\"k\">=</span> parameter<span class=\"k\">.</span>type<span class=\"k\">;</span>","          <span class=\"k\">}</span>","          pVal<span class=\"k\">.</span>selected <span class=\"k\">=</span> <span class=\"s\">'true'</span> <span class=\"k\">==</span> value<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'selected'</span><span class=\"k\">);</span>","","          pVal<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>normalizeParameterValue<span class=\"k\">(</span>parameter<span class=\"k\">,</span> pVal<span class=\"k\">.</span>type<span class=\"k\">,</span> pVal<span class=\"k\">.</span>value<span class=\"k\">);</span>","          values<span class=\"k\">.</span>push<span class=\"k\">(</span>pVal<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","        <span class=\"k\">return</span> values<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Called for every parameter value that is parsed. Override this to update the parameter</span>","<span class=\"c\">       * value at parse time.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>normalizeParameterValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>parameter<span class=\"k\">,</span> type<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> value<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>parseErrors <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> xmlRoot<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> addToParameter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> paramName<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> errorList <span class=\"k\">=</span> paramDefn<span class=\"k\">.</span>errors<span class=\"k\">[</span>paramName<span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>errorList<span class=\"k\">)</span> <span class=\"k\">{</span>","            errorList <span class=\"k\">=</span> <span class=\"k\">[];</span>","          <span class=\"k\">}</span>","          errorList<span class=\"k\">.</span>push<span class=\"k\">(</span>message<span class=\"k\">);</span>","          paramDefn<span class=\"k\">.</span>errors<span class=\"k\">[</span>paramName<span class=\"k\">]</span> <span class=\"k\">=</span> errorList<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        xmlRoot<span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"s\">'error'</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> e<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> error <span class=\"k\">=</span> $<span class=\"k\">(</span>e<span class=\"k\">);</span>","          <span class=\"k\">var</span> paramName <span class=\"k\">=</span> error<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'parameter'</span><span class=\"k\">);</span>","          <span class=\"k\">var</span> message <span class=\"k\">=</span> error<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'message'</span><span class=\"k\">);</span>","          addToParameter<span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> paramName<span class=\"k\">,</span> message<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","","        xmlRoot<span class=\"k\">.</span>find<span class=\"k\">(</span><span class=\"s\">'global-error'</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> e<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> error <span class=\"k\">=</span> $<span class=\"k\">(</span>e<span class=\"k\">);</span>","          <span class=\"k\">var</span> message <span class=\"k\">=</span> error<span class=\"k\">.</span>attr<span class=\"k\">(</span><span class=\"s\">'message'</span><span class=\"k\">);</span>","          addToParameter<span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> message<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    PromptPanel<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>destinationId<span class=\"k\">,</span> paramDefn<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>destinationId<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">throw</span> <span class=\"s\">'destinationId is required'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>destinationId <span class=\"k\">=</span> destinationId<span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>paramDefn<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">throw</span> <span class=\"s\">'paramDefn is required'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>paramDefn <span class=\"k\">=</span> paramDefn<span class=\"k\">;</span>","","      <span class=\"c\">// Initialize the auto submit setting for this panel from the parameter definition</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>autoSubmit <span class=\"k\">=</span> paramDefn<span class=\"k\">.</span>allowAutoSubmit<span class=\"k\">();</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>guid <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>promptGUIDHelper<span class=\"k\">.</span>generateGUID<span class=\"k\">();</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Get a localized string for this prompt panel.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>getString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">,</span> defaultString<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> defaultString <span class=\"k\">||</span> <span class=\"s\">'!'</span> <span class=\"k\">+</span> key <span class=\"k\">+</span> <span class=\"s\">'!'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Get the current auto submit setting for this panel.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>getAutoSubmitSetting <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>autoSubmit<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Returns a parameter name unique to this parameter panel.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>getParameterName <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>parameter<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>guid <span class=\"k\">+</span> parameter<span class=\"k\">.</span>name<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Returns a map of parameter name -&gt; value. This will extract the current parameter value from Dashboards</span>","<span class=\"c\">       * as necessary.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>getParameterValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">.</span>mapParameters<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> value <span class=\"k\">=</span> Dashboards<span class=\"k\">.</span>getParameterValue<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>getParameterName<span class=\"k\">(</span>param<span class=\"k\">));</span>","            <span class=\"c\">// if ((value == '' || value == undefined) &amp;&amp; 'true' == param.attributes['hidden']) {</span>","            <span class=\"c\">//   value = param.values</span>","            <span class=\"c\">// }</span>","            <span class=\"c\">// Empty string is Dashboards' \"null\"</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">===</span> <span class=\"s\">''</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"c\">// continue</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>param<span class=\"k\">.</span>multiSelect <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>$<span class=\"k\">.</span>isArray<span class=\"k\">(</span>value<span class=\"k\">))</span> <span class=\"k\">{</span>","              value <span class=\"k\">=</span> <span class=\"k\">[</span>value<span class=\"k\">];</span>","            <span class=\"k\">}</span>","            params<span class=\"k\">[</span>param<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">return</span> params<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * This should return an object capable of formatting an object to the format used to send over the wire</span>","<span class=\"c\">       * (the format it is transported in). See PromptPanel.createFormatter() for how a format object should look.</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * @param paramDefn Parameter definition</span>","<span class=\"c\">       * @param parameter Parameter to create text formatter for</span>","<span class=\"c\">       * @param pattern Optional pattern to use instead of any the parameter declares</span>","<span class=\"c\">       * @param formatter Formatter used to format this parameter to display</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>createDataTransportFormatter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> parameter<span class=\"k\">,</span> pattern<span class=\"k\">,</span> formatter<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">//return undefined;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * This should return an object capable of formatting the 'type' to and from text. If no formatter</span>","<span class=\"c\">       * is required the return value should be undefined.</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * A formatter should have two methods:</span>","<span class=\"c\">       * formatter = {</span>","<span class=\"c\">       *   format: function(object) {</span>","<span class=\"c\">       *     return ...; // string</span>","<span class=\"c\">       *   },</span>","<span class=\"c\">       *   parse: function(string) {</span>","<span class=\"c\">       *     return ...; // object</span>","<span class=\"c\">       *   }</span>","<span class=\"c\">       * }</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * @param paramDefn Parameter definition</span>","<span class=\"c\">       * @param parameter Parameter to create text formatter for</span>","<span class=\"c\">       * @param pattern Optional pattern to use instead of any the parameter declares</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>createFormatter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> parameter<span class=\"k\">,</span> pattern<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">//return undefined;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>_widgetGUIDHelper <span class=\"k\">=</span> <span class=\"k\">new</span> GUIDHelper<span class=\"k\">();</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Generate a unique GUID for a widget of this panel.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>generateWidgetGUID <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>guid <span class=\"k\">+</span> <span class=\"s\">'-'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>_widgetGUIDHelper<span class=\"k\">.</span>generateGUID<span class=\"k\">();</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Sets the parameter value in Dashboards' parameter map to a properly initialized value.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>initializeParameterValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> param<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> param<span class=\"k\">.</span>getSelectedValuesValue<span class=\"k\">();</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          value <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span> <span class=\"c\">// Dashboards' null value is an empty string</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>value<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          value <span class=\"k\">=</span> value<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>setParameterValue<span class=\"k\">(</span>param<span class=\"k\">,</span> value<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Sets the parameter value in Dashboards' parameter map.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>setParameterValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        Dashboards<span class=\"k\">.</span>setParameter<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>getParameterName<span class=\"k\">(</span>param<span class=\"k\">),</span> value<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Gets the parameter value from Dashboards' parameter map.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>getParameterValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> param <span class=\"k\">!==</span> <span class=\"s\">'string'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          param <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getParameterName<span class=\"k\">(</span>param<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> Dashboards<span class=\"k\">.</span>getParameterValue<span class=\"k\">(</span>param<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>_ready <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>ready<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>_submit <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>submit<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>_submitStart <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>submitStart<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Called by the prompt-panel component when the CDE components have been updated.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>ready <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>promptPanel<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Called when the prompt-panel component's submit button is clicked or auto-submit is enabled and a parameter value changes.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>submit <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>promptPanel<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>forceAutoSubmit <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Called when the prompt-panel component's submit button is pressed (mouse-down only).</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>submitStart <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>promptPanel<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Called when a parameter value changes.</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * The current implementation of  WidgetBuilder#build hooks</span>","<span class=\"c\">       * a method to the \"postChange\" CDF method of just built widgets</span>","<span class=\"c\">       * that have a \"parameter\".</span>","<span class=\"c\">       * This method calls its PromptPanel's \"parameterChanged\" method.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>parameterChanged <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>refreshPrompt<span class=\"k\">();</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","","      <span class=\"c\">/**</span>","<span class=\"c\">       * This is called to refresh the prompt panel.</span>","<span class=\"c\">       * It should return a new parameter definition.</span>","<span class=\"c\">       * If it returns undefined no update will happen.</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * This method should be overriden.</span>","<span class=\"c\">       * The default implementation simply calls the provided callback with no parameter definition.</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * @param promptPanel the panel that needs a new parameter definition</span>","<span class=\"c\">       * @param callback function to call when the parameter definition has been fetched.</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * The callback signature is: &lt;pre&gt;void function([newParamDef=undefined])&lt;/pre&gt; and is called in the global context.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>getParameterDefinition <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>promptPanel<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","        callback<span class=\"k\">();</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Called to refresh the prompt panel. This will invoke getParameterDefinition() to get a new parameter definition.</span>","<span class=\"c\">       * If the new parameter definition is undefined (default impl) no re-initialization will be done.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>refreshPrompt <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>getParameterDefinition<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>refresh<span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","          alert<span class=\"k\">(</span><span class=\"s\">'Error in refreshCallback'</span><span class=\"k\">);</span> <span class=\"c\">// TODO Add better error message</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Refreshes the prompt panel with a given parameter definition.</span>","<span class=\"c\">       *</span>","<span class=\"c\">       * @param {ParameterDefinition} [paramDefn] the parameter definition used to refresh the prompt panel.</span>","<span class=\"c\">       * When unspecified, nothing is done.</span>","<span class=\"c\">       * @param {boolean} [noAutoAutoSubmit=false] prevents auto-submiting, even when auto-submit is false,</span>","<span class=\"c\">       * in the case the the parameter UI is not shown.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>refresh <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> noAutoAutoSubmit<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>paramDefn<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>paramDefn <span class=\"k\">=</span> paramDefn<span class=\"k\">;</span>","","          <span class=\"c\">// Remove this `PromptPanel`'s components from `Dashboards`.</span>","          <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>components<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// Postpone the clearing of removed components if we'll be showing some components.</span>","            <span class=\"c\">// We'll clear the old components with a special component in front of all other components during init().</span>","            <span class=\"k\">var</span> postponeClear <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">.</span>showParameterUI<span class=\"k\">();</span>","            pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>removeDashboardComponents<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>components<span class=\"k\">,</span> postponeClear<span class=\"k\">);</span>","","            <span class=\"c\">// Create dictionary by parameter name, of topValue of multi-select listboxes, for restoring later, when possible.</span>","            <span class=\"c\">// But not for mobile, cause the UIs vary. Would need more time to check each.</span>","            <span class=\"k\">var</span> topValuesByParam<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(!(</span><span class=\"s\">/android|ipad|iphone/i</span><span class=\"k\">).</span>test<span class=\"k\">(</span>navigator<span class=\"k\">.</span>userAgent<span class=\"k\">))</span> <span class=\"k\">{</span>","              topValuesByParam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_multiListBoxTopValuesByParam <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> focusedParam<span class=\"k\">;</span>","            window<span class=\"k\">.</span>CompositeComponent<span class=\"k\">.</span>mapComponentsList<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>components<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>c<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">if</span><span class=\"k\">(!</span>c<span class=\"k\">.</span>components <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>param <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>promptType <span class=\"k\">===</span> <span class=\"s\">'prompt'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>focusedParam<span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"k\">var</span> ph <span class=\"k\">=</span> c<span class=\"k\">.</span>placeholder<span class=\"k\">();</span>","                  <span class=\"k\">if</span><span class=\"k\">(</span>$<span class=\"k\">(</span><span class=\"s\">\":focus\"</span><span class=\"k\">,</span> ph<span class=\"k\">).</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    focusedParam <span class=\"k\">=</span> c<span class=\"k\">.</span>param<span class=\"k\">.</span>name<span class=\"k\">;</span>","                  <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>topValuesByParam <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>type <span class=\"k\">===</span> <span class=\"s\">'SelectMultiComponent'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"k\">var</span> topValue <span class=\"k\">=</span> c<span class=\"k\">.</span>topValue<span class=\"k\">();</span>","                  <span class=\"k\">if</span><span class=\"k\">(</span>topValue <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    topValuesByParam<span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> c<span class=\"k\">.</span>param<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> topValue<span class=\"k\">;</span>","                  <span class=\"k\">}</span>","                <span class=\"k\">}</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_focusedParam <span class=\"k\">=</span> focusedParam<span class=\"k\">;</span>","          <span class=\"k\">}</span>","","          <span class=\"k\">this</span><span class=\"k\">.</span>init<span class=\"k\">(</span>noAutoAutoSubmit<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Initialize this prompt panel.</span>","<span class=\"c\">       * This will create the components and pass them to CDF to be loaded.</span>","<span class=\"c\">       * @param {boolean} [noAutoAutoSubmit=false] prevents auto-submiting, even when auto-submit is false,</span>","<span class=\"c\">       * in the case the the parameter UI is not shown.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>init <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>noAutoAutoSubmit<span class=\"k\">)</span> <span class=\"k\">{</span>","        pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>prepareCDF<span class=\"k\">();</span>","        <span class=\"k\">var</span> fireSubmit <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">.</span>showParameterUI<span class=\"k\">())</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>_widgetGUIDHelper<span class=\"k\">.</span>reset<span class=\"k\">();</span> <span class=\"c\">// Clear the widget helper for this prompt</span>","          ","          <span class=\"k\">var</span> components <span class=\"k\">=</span> <span class=\"k\">[];</span>","          ","          <span class=\"k\">var</span> layout <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'prompt-panel'</span><span class=\"k\">);</span>","          ","          <span class=\"k\">var</span> topValuesByParam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_multiListBoxTopValuesByParam<span class=\"k\">;</span>","          <span class=\"k\">if</span><span class=\"k\">(</span>topValuesByParam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>_multiListBoxTopValuesByParam<span class=\"k\">;</span> <span class=\"k\">}</span>","","          <span class=\"k\">var</span> focusedParam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_focusedParam<span class=\"k\">;</span>","          <span class=\"k\">if</span><span class=\"k\">(</span>focusedParam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>_focusedParam<span class=\"k\">;</span> <span class=\"k\">}</span>","","          window<span class=\"k\">.</span>CompositeComponent<span class=\"k\">.</span>mapComponents<span class=\"k\">(</span>layout<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>c<span class=\"k\">)</span> <span class=\"k\">{</span> ","            components<span class=\"k\">.</span>push<span class=\"k\">(</span>c<span class=\"k\">);</span>","           ","            <span class=\"c\">// Don't fire the submit on load if we have a submit button. </span>","            <span class=\"c\">// It will take care of firing this itself (based on auto-submit)</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>fireSubmit <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>promptType <span class=\"k\">==</span> <span class=\"s\">'submit'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              fireSubmit <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span>c<span class=\"k\">.</span>components <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>param <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>promptType <span class=\"k\">===</span> <span class=\"s\">'prompt'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"k\">var</span> name <span class=\"k\">=</span> c<span class=\"k\">.</span>param<span class=\"k\">.</span>name<span class=\"k\">;</span>","              <span class=\"k\">if</span><span class=\"k\">(</span>focusedParam <span class=\"k\">&amp;&amp;</span> focusedParam <span class=\"k\">===</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","                focusedParam <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                c<span class=\"k\">.</span>autoFocus <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","              <span class=\"k\">}</span>","","              <span class=\"k\">if</span><span class=\"k\">(</span>topValuesByParam <span class=\"k\">&amp;&amp;</span> c<span class=\"k\">.</span>type <span class=\"k\">===</span> <span class=\"s\">'SelectMultiComponent'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> topValue <span class=\"k\">=</span> topValuesByParam<span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> name<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>topValue <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                  c<span class=\"k\">.</span>autoTopValue <span class=\"k\">=</span> topValue<span class=\"k\">;</span>","                <span class=\"k\">}</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span><span class=\"k\">);</span>","          ","          <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>components <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>components<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// We have old components we MUST call .clear() on to prevent memory leaks. In order to</span>","            <span class=\"c\">// prevent flickering we must do this during the same execution block as when Dashboards</span>","            <span class=\"c\">// updates the new components. We'll use our aptly named GarbageCollectorBuilder to handle this.</span>","            <span class=\"k\">var</span> gc <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">{</span>","              promptPanel<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">,</span>","              components<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>components","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">'gc'</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span> <span class=\"k\">(!</span>gc<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">throw</span> <span class=\"s\">'Cannot create garbage collector'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","            ","            components <span class=\"k\">=</span> <span class=\"k\">[</span>gc<span class=\"k\">].</span>concat<span class=\"k\">(</span>components<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          ","          <span class=\"k\">this</span><span class=\"k\">.</span>components <span class=\"k\">=</span> components<span class=\"k\">;</span>","","          Dashboards<span class=\"k\">.</span>init<span class=\"k\">(</span>components<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">.</span>mapParameters<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>param<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// initialize parameter values regardless of whether we're showing the parameter or not</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>initializeParameterValue<span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> param<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","          <span class=\"c\">// Must submit, independently of auto-submit value.</span>","          <span class=\"c\">// All parameters are initialized, fire the submit</span>","          fireSubmit <span class=\"k\">=</span> <span class=\"k\">!</span>noAutoAutoSubmit<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>fireSubmit<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>submit<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">{</span>isInit<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>hide <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        $<span class=\"k\">(</span><span class=\"s\">'#'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>destinationId<span class=\"k\">).</span>css<span class=\"k\">(</span><span class=\"s\">'display'</span><span class=\"k\">,</span> <span class=\"s\">'none'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>createSubmitPanel <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">{</span>","          promptPanel<span class=\"k\">:</span> <span class=\"k\">this</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">'submit-panel'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>getParameterPanelType <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">'parameter-panel'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>createWidgetForParameter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramDefn<span class=\"k\">,</span> param<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>param<span class=\"k\">.</span>strict <span class=\"k\">&amp;&amp;</span> param<span class=\"k\">.</span>values<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// if the parameter is strict but we have no valid choices for it, it is impossible</span>","          <span class=\"c\">// for the user to give it a value, so we will hide this parameter</span>","          <span class=\"c\">// it is highly likely that the parameter is driven by another parameter which</span>","          <span class=\"c\">// doesn't have a value yet, so eventually, we'll show this parameter.. we hope</span>","          <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">{</span>","          promptPanel<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">,</span>","          param<span class=\"k\">:</span> param","        <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Determines if the submit panel should be built for this panel. Default implementation checks for number of parameters.</span>","<span class=\"c\">       * @param panelComponents Components being built for this panel.</span>","<span class=\"c\">       */</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>shouldBuildSubmitPanel <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>panelComponents<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> panelComponents<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>buildPanelComponents <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> panelComponents <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"c\">// Create a composite panel of the correct layout type for each group</span>","        $<span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">.</span>parameterGroups<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> group<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> components <span class=\"k\">=</span> <span class=\"k\">[];</span>","          <span class=\"c\">// Create a label and a CDF widget for each parameter</span>","          $<span class=\"k\">.</span>each<span class=\"k\">(</span>group<span class=\"k\">.</span>parameters<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> param<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// initialize parameter values regardless of whether we're showing the parameter or not</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>initializeParameterValue<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">,</span> param<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">'true'</span> <span class=\"k\">==</span> param<span class=\"k\">.</span>attributes<span class=\"k\">[</span><span class=\"s\">'hidden'</span><span class=\"k\">])</span> <span class=\"k\">{</span>","              <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"c\">// continue</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> widget <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createWidgetForParameter<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">,</span> param<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>widget<span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"c\">// No widget created. Do not create a label or parameter panel</span>","              <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"c\">// continue</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> label <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">{</span>","                promptPanel<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                param<span class=\"k\">:</span> param","              <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">);</span>","","            <span class=\"k\">var</span> errors <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">.</span>errors<span class=\"k\">[</span>param<span class=\"k\">.</span>name<span class=\"k\">];</span>","            <span class=\"k\">var</span> errorLabels <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>errors <span class=\"k\">&amp;&amp;</span> errors<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              $<span class=\"k\">.</span>each<span class=\"k\">(</span>errors<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> l <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">{</span>","                  promptPanel<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                  param<span class=\"k\">:</span> param<span class=\"k\">,</span>","                  errorMessage<span class=\"k\">:</span> e","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">'error-label'</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>l<span class=\"k\">)</span> <span class=\"k\">{</span>","                  errorLabels<span class=\"k\">.</span>push<span class=\"k\">(</span>l<span class=\"k\">);</span>","                <span class=\"k\">}</span>","              <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> c <span class=\"k\">=</span> <span class=\"k\">[</span>label<span class=\"k\">];</span>","            c <span class=\"k\">=</span> c<span class=\"k\">.</span>concat<span class=\"k\">(</span>errorLabels<span class=\"k\">);</span>","            c<span class=\"k\">.</span>push<span class=\"k\">(</span>widget<span class=\"k\">);</span>","            <span class=\"k\">var</span> panel <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">{</span>","                promptPanel<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                param<span class=\"k\">:</span> param<span class=\"k\">,</span>","                components<span class=\"k\">:</span> c","              <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>getParameterPanelType<span class=\"k\">());</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>errorLabels<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              panel<span class=\"k\">.</span>cssClass <span class=\"k\">=</span> <span class=\"k\">(</span>panel<span class=\"k\">.</span>cssClass <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">' error'</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            components<span class=\"k\">.</span>push<span class=\"k\">(</span>panel<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","          ","          <span class=\"k\">if</span> <span class=\"k\">(</span>components<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> groupPanel <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>common<span class=\"k\">.</span>prompting<span class=\"k\">.</span>builders<span class=\"k\">.</span>WidgetBuilder<span class=\"k\">.</span>build<span class=\"k\">(</span><span class=\"k\">{</span>","              promptPanel<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">,</span>","              paramGroup<span class=\"k\">:</span> group<span class=\"k\">,</span>","              components<span class=\"k\">:</span> components","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">'group-panel'</span><span class=\"k\">);</span>","            panelComponents<span class=\"k\">.</span>push<span class=\"k\">(</span>groupPanel<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">));</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shouldBuildSubmitPanel<span class=\"k\">(</span>panelComponents<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> submitPanel <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>createSubmitPanel<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>paramDefn<span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>submitPanel<span class=\"k\">)</span> <span class=\"k\">{</span>","            panelComponents<span class=\"k\">.</span>push<span class=\"k\">(</span>submitPanel<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> panelComponents<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['prompting/pentaho-prompting.js'][1]++;
pentaho = (((typeof pentaho) == "undefined")? {}: pentaho);
_$jscoverage['prompting/pentaho-prompting.js'][2]++;
pentaho.common = (pentaho.common || {});
_$jscoverage['prompting/pentaho-prompting.js'][3]++;
pentaho.common.prompting = (pentaho.common.prompting || {});
_$jscoverage['prompting/pentaho-prompting.js'][5]++;
pen.define(["cdf/cdf-module", "common-ui/prompting/pentaho-prompting-bind", "common-ui/prompting/pentaho-prompting-components", "common-ui/util/base64"], (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][6]++;
  var GUIDHelper = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][10]++;
  ((this._assignedGUIDs = {}), (this._gen = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][11]++;
  return Math.round((Math.random() * 100000));
})));
  _$jscoverage['prompting/pentaho-prompting.js'][12]++;
  this.generateGUID = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][13]++;
  var guid = this._gen();
  _$jscoverage['prompting/pentaho-prompting.js'][14]++;
  while (this._assignedGUIDs[guid]) {
    _$jscoverage['prompting/pentaho-prompting.js'][15]++;
    guid = this._gen();
}
  _$jscoverage['prompting/pentaho-prompting.js'][17]++;
  this._assignedGUIDs[guid] = true;
  _$jscoverage['prompting/pentaho-prompting.js'][18]++;
  return ("" + guid);
});
  _$jscoverage['prompting/pentaho-prompting.js'][23]++;
  this.reset = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][24]++;
  this._assignedGUIDs = {};
});
});
  _$jscoverage['prompting/pentaho-prompting.js'][28]++;
  $.extend(pentaho.common.prompting, {ParameterDefinition: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][30]++;
  return ({"autoSubmit": undefined, "autoSubmitUI": undefined, "ignoreBiServer5538": undefined, "layout": undefined, "page": undefined, "paginate": undefined, "parameterGroups": [], "promptNeeded": undefined, "totalPages": undefined, "errors": {}, getParameterGroup: (function (name) {
  _$jscoverage['prompting/pentaho-prompting.js'][43]++;
  var group;
  _$jscoverage['prompting/pentaho-prompting.js'][44]++;
  $.each(this.parameterGroups, (function (i, g) {
  _$jscoverage['prompting/pentaho-prompting.js'][45]++;
  if ((g.name === name)) {
    _$jscoverage['prompting/pentaho-prompting.js'][46]++;
    group = g;
    _$jscoverage['prompting/pentaho-prompting.js'][47]++;
    return false;
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][50]++;
  return group;
}), allowAutoSubmit: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][54]++;
  if ((this.autoSubmit != undefined)) {
    _$jscoverage['prompting/pentaho-prompting.js'][55]++;
    return this.autoSubmit;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][57]++;
  return this.autoSubmitUI;
}), showParameterUI: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][61]++;
  var showParameters;
  _$jscoverage['prompting/pentaho-prompting.js'][62]++;
  this.mapParameters((function (p) {
  _$jscoverage['prompting/pentaho-prompting.js'][63]++;
  if ((p.name == "showParameters")) {
    _$jscoverage['prompting/pentaho-prompting.js'][64]++;
    showParameters = p;
    _$jscoverage['prompting/pentaho-prompting.js'][65]++;
    return false;
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][69]++;
  return ((! showParameters) || (! showParameters.isSelectedValue("false")));
}), getParameter: (function (name) {
  _$jscoverage['prompting/pentaho-prompting.js'][73]++;
  var param;
  _$jscoverage['prompting/pentaho-prompting.js'][74]++;
  this.mapParameters((function (p) {
  _$jscoverage['prompting/pentaho-prompting.js'][75]++;
  if ((p.name === name)) {
    _$jscoverage['prompting/pentaho-prompting.js'][76]++;
    param = p;
    _$jscoverage['prompting/pentaho-prompting.js'][77]++;
    return false;
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][80]++;
  return param;
}), mapParameters: (function (f, x) {
  _$jscoverage['prompting/pentaho-prompting.js'][84]++;
  var d = this;
  _$jscoverage['prompting/pentaho-prompting.js'][85]++;
  var breaking = false;
  _$jscoverage['prompting/pentaho-prompting.js'][86]++;
  $.each(this.parameterGroups, (function (i, g) {
  _$jscoverage['prompting/pentaho-prompting.js'][87]++;
  $.each(this.parameters, (function (j, p) {
  _$jscoverage['prompting/pentaho-prompting.js'][88]++;
  if ((f.call(x, p, g, d) === false)) {
    _$jscoverage['prompting/pentaho-prompting.js'][89]++;
    breaking = true;
    _$jscoverage['prompting/pentaho-prompting.js'][90]++;
    return false;
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][93]++;
  if (breaking) {
    _$jscoverage['prompting/pentaho-prompting.js'][93]++;
    return false;
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][96]++;
  return (! breaking);
})});
}), ParameterGroup: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][102]++;
  return ({"name": undefined, "label": undefined, "parameters": []});
}), Parameter: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][110]++;
  return ({"name": undefined, "type": undefined, "list": undefined, "mandatory": undefined, "multiSelect": undefined, "strict": undefined, "timezoneHint": undefined, "attributes": {}, "values": [], isSelectedValue: (function (value) {
  _$jscoverage['prompting/pentaho-prompting.js'][127]++;
  var selected = false;
  _$jscoverage['prompting/pentaho-prompting.js'][128]++;
  $.each(this.values, (function (i, v) {
  _$jscoverage['prompting/pentaho-prompting.js'][129]++;
  if (v.selected) {
    _$jscoverage['prompting/pentaho-prompting.js'][130]++;
    if ((value === v.value)) {
      _$jscoverage['prompting/pentaho-prompting.js'][131]++;
      selected = true;
      _$jscoverage['prompting/pentaho-prompting.js'][132]++;
      return false;
    }
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][136]++;
  return selected;
}), hasSelection: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][143]++;
  var s = false;
  _$jscoverage['prompting/pentaho-prompting.js'][144]++;
  $.each(this.values, (function (i, v) {
  _$jscoverage['prompting/pentaho-prompting.js'][145]++;
  if (v.selected) {
    _$jscoverage['prompting/pentaho-prompting.js'][146]++;
    s = true;
    _$jscoverage['prompting/pentaho-prompting.js'][147]++;
    return false;
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][150]++;
  return s;
}), getSelectedValues: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][157]++;
  var selected = [];
  _$jscoverage['prompting/pentaho-prompting.js'][158]++;
  $.each(this.values, (function (i, val) {
  _$jscoverage['prompting/pentaho-prompting.js'][159]++;
  if (val.selected) {
    _$jscoverage['prompting/pentaho-prompting.js'][160]++;
    selected.push(val);
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][163]++;
  return selected;
}), getSelectedValuesValue: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][170]++;
  var selected = [];
  _$jscoverage['prompting/pentaho-prompting.js'][171]++;
  $.each(this.values, (function (i, val) {
  _$jscoverage['prompting/pentaho-prompting.js'][172]++;
  if (val.selected) {
    _$jscoverage['prompting/pentaho-prompting.js'][173]++;
    selected.push(val.value);
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][176]++;
  return selected;
})});
}), ParameterValue: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][182]++;
  return ({type: undefined, label: undefined, selected: false, value: undefined});
}), promptGUIDHelper: new GUIDHelper(), removeDashboardComponents: (function (components, postponeClear) {
  _$jscoverage['prompting/pentaho-prompting.js'][201]++;
  var removed = [];
  _$jscoverage['prompting/pentaho-prompting.js'][202]++;
  window.CompositeComponent.mapComponentsList(components, (function (c) {
  _$jscoverage['prompting/pentaho-prompting.js'][203]++;
  var rc = Dashboards.removeComponent(c.name);
  _$jscoverage['prompting/pentaho-prompting.js'][204]++;
  if (rc) {
    _$jscoverage['prompting/pentaho-prompting.js'][204]++;
    removed.push(rc);
  }
}));
  _$jscoverage['prompting/pentaho-prompting.js'][209]++;
  $.each(removed, (function (i, component) {
  _$jscoverage['prompting/pentaho-prompting.js'][213]++;
  if ((! postponeClear)) {
    _$jscoverage['prompting/pentaho-prompting.js'][213]++;
    component.clear();
  }
  _$jscoverage['prompting/pentaho-prompting.js'][215]++;
  if (component.parameter) {
    _$jscoverage['prompting/pentaho-prompting.js'][217]++;
    $.each(Dashboards.components, (function (i, c) {
  _$jscoverage['prompting/pentaho-prompting.js'][218]++;
  if ($.isArray(c.listeners)) {
    _$jscoverage['prompting/pentaho-prompting.js'][219]++;
    c.listeners = $.grep(c.listeners, (function (l) {
  _$jscoverage['prompting/pentaho-prompting.js'][220]++;
  return (l !== component.parameter);
}));
  }
  _$jscoverage['prompting/pentaho-prompting.js'][222]++;
  ;
}));
    _$jscoverage['prompting/pentaho-prompting.js'][226]++;
    $.each(Dashboards.components, (function (i, c) {
  _$jscoverage['prompting/pentaho-prompting.js'][227]++;
  if ($.isArray(c.parameters)) {
    _$jscoverage['prompting/pentaho-prompting.js'][232]++;
    c.parameters = $.each(c.parameters, (function (j, p) {
  _$jscoverage['prompting/pentaho-prompting.js'][233]++;
  if ((p[1] === component.parameter)) {
    _$jscoverage['prompting/pentaho-prompting.js'][234]++;
    return [p[0], "", ""];
  }
  else {
    _$jscoverage['prompting/pentaho-prompting.js'][236]++;
    return p;
  }
}));
  }
  _$jscoverage['prompting/pentaho-prompting.js'][239]++;
  ;
}));
  }
}));
}), appendInline: (function (a, b) {
  _$jscoverage['prompting/pentaho-prompting.js'][249]++;
  a.splice.apply(a, [a.length, 0].concat(b));
}), prepareCDF: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][253]++;
  if (this.prepared) {
    _$jscoverage['prompting/pentaho-prompting.js'][253]++;
    return;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][254]++;
  Dashboards.setGlobalContext(false);
  _$jscoverage['prompting/pentaho-prompting.js'][257]++;
  Dashboards.escapeParameterValues = false;
  _$jscoverage['prompting/pentaho-prompting.js'][259]++;
  this.prepared = true;
}), parseXML: (function (data, xml, tmp) {
  _$jscoverage['prompting/pentaho-prompting.js'][263]++;
  if (window.DOMParser) {
    _$jscoverage['prompting/pentaho-prompting.js'][264]++;
    tmp = new DOMParser();
    _$jscoverage['prompting/pentaho-prompting.js'][265]++;
    xml = tmp.parseFromString(data, "text/xml");
  }
  else {
    _$jscoverage['prompting/pentaho-prompting.js'][267]++;
    xml = new ActiveXObject("Microsoft.XMLDOM");
    _$jscoverage['prompting/pentaho-prompting.js'][268]++;
    xml.async = "false";
    _$jscoverage['prompting/pentaho-prompting.js'][269]++;
    xml.loadXML(data);
  }
  _$jscoverage['prompting/pentaho-prompting.js'][272]++;
  tmp = xml.documentElement;
  _$jscoverage['prompting/pentaho-prompting.js'][274]++;
  if (((! tmp) || (! tmp.nodeName) || (tmp.nodeName === "parsererror"))) {
    _$jscoverage['prompting/pentaho-prompting.js'][275]++;
    jQuery.error(("Invalid XML: " + data));
  }
  _$jscoverage['prompting/pentaho-prompting.js'][278]++;
  return xml;
}), ParameterXmlParser: (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][285]++;
  this.parseParameterXml = (function (xmlString) {
  _$jscoverage['prompting/pentaho-prompting.js'][286]++;
  var xml = $(pentaho.common.prompting.parseXML(xmlString));
  _$jscoverage['prompting/pentaho-prompting.js'][288]++;
  if ((xml.find("parsererror").length > 0)) {
    _$jscoverage['prompting/pentaho-prompting.js'][289]++;
    throw xmlString;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][292]++;
  var paramDefn = new (pentaho.common.prompting.ParameterDefinition)();
  _$jscoverage['prompting/pentaho-prompting.js'][293]++;
  var parameters = $(xml.find("parameters")[0]);
  _$jscoverage['prompting/pentaho-prompting.js'][295]++;
  paramDefn.promptNeeded = ("true" == parameters.attr("is-prompt-needed"));
  _$jscoverage['prompting/pentaho-prompting.js'][296]++;
  paramDefn.ignoreBiServer5538 = ("true" == parameters.attr("ignore-biserver-5538"));
  _$jscoverage['prompting/pentaho-prompting.js'][297]++;
  paramDefn.paginate = ("true" == parameters.attr("paginate"));
  _$jscoverage['prompting/pentaho-prompting.js'][298]++;
  paramDefn.layout = parameters.attr("layout");
  _$jscoverage['prompting/pentaho-prompting.js'][300]++;
  var parseInteger = (function (s, def) {
  _$jscoverage['prompting/pentaho-prompting.js'][301]++;
  var n = parseInt(s);
  _$jscoverage['prompting/pentaho-prompting.js'][302]++;
  return (("NaN" == n)? def: n);
});
  _$jscoverage['prompting/pentaho-prompting.js'][304]++;
  paramDefn.page = parseInteger(parameters.attr("accepted-page"), 0);
  _$jscoverage['prompting/pentaho-prompting.js'][305]++;
  paramDefn.totalPages = parseInteger(parameters.attr("page-count"), 0);
  _$jscoverage['prompting/pentaho-prompting.js'][307]++;
  paramDefn.autoSubmit = parameters.attr("autoSubmit");
  _$jscoverage['prompting/pentaho-prompting.js'][308]++;
  if ((paramDefn.autoSubmit == "true")) {
    _$jscoverage['prompting/pentaho-prompting.js'][309]++;
    paramDefn.autoSubmit = true;
  }
  else {
    _$jscoverage['prompting/pentaho-prompting.js'][310]++;
    if ((paramDefn.autoSubmit == "false")) {
      _$jscoverage['prompting/pentaho-prompting.js'][311]++;
      paramDefn.autoSubmit = false;
    }
    else {
      _$jscoverage['prompting/pentaho-prompting.js'][313]++;
      paramDefn.autoSubmit = undefined;
    }
  }
  _$jscoverage['prompting/pentaho-prompting.js'][316]++;
  paramDefn.autoSubmitUI = ("true" == parameters.attr("autoSubmitUI"));
  _$jscoverage['prompting/pentaho-prompting.js'][318]++;
  this.parseParameters(paramDefn, parameters);
  _$jscoverage['prompting/pentaho-prompting.js'][319]++;
  this.parseErrors(paramDefn, xml);
  _$jscoverage['prompting/pentaho-prompting.js'][321]++;
  return paramDefn;
});
  _$jscoverage['prompting/pentaho-prompting.js'][324]++;
  this.parseParameters = (function (paramDefn, parametersNode) {
  _$jscoverage['prompting/pentaho-prompting.js'][325]++;
  parametersNode.find("parameter").each((function (i, node) {
  _$jscoverage['prompting/pentaho-prompting.js'][326]++;
  var param = this.parseParameter(node);
  _$jscoverage['prompting/pentaho-prompting.js'][327]++;
  node = $(node);
  _$jscoverage['prompting/pentaho-prompting.js'][328]++;
  var groupName = param.attributes["parameter-group"];
  _$jscoverage['prompting/pentaho-prompting.js'][329]++;
  if (((groupName == undefined) || (! $.trim(groupName).length))) {
    _$jscoverage['prompting/pentaho-prompting.js'][330]++;
    groupName = "parameters";
  }
  _$jscoverage['prompting/pentaho-prompting.js'][332]++;
  var group = paramDefn.getParameterGroup(groupName);
  _$jscoverage['prompting/pentaho-prompting.js'][333]++;
  if ((! group)) {
    _$jscoverage['prompting/pentaho-prompting.js'][334]++;
    group = new (pentaho.common.prompting.ParameterGroup)();
    _$jscoverage['prompting/pentaho-prompting.js'][335]++;
    group.name = groupName;
    _$jscoverage['prompting/pentaho-prompting.js'][336]++;
    group.label = param.attributes["parameter-group-label"];
    _$jscoverage['prompting/pentaho-prompting.js'][337]++;
    paramDefn.parameterGroups.push(group);
  }
  _$jscoverage['prompting/pentaho-prompting.js'][339]++;
  group.parameters.push(param);
}).bind(this));
});
  _$jscoverage['prompting/pentaho-prompting.js'][343]++;
  this.parseParameter = (function (node) {
  _$jscoverage['prompting/pentaho-prompting.js'][344]++;
  var param = new (pentaho.common.prompting.Parameter)();
  _$jscoverage['prompting/pentaho-prompting.js'][346]++;
  node = $(node);
  _$jscoverage['prompting/pentaho-prompting.js'][347]++;
  param.name = node.attr("name");
  _$jscoverage['prompting/pentaho-prompting.js'][348]++;
  param.mandatory = ("true" == node.attr("is-mandatory"));
  _$jscoverage['prompting/pentaho-prompting.js'][349]++;
  param.strict = ("true" == node.attr("is-strict"));
  _$jscoverage['prompting/pentaho-prompting.js'][350]++;
  param.list = ("true" == node.attr("is-list"));
  _$jscoverage['prompting/pentaho-prompting.js'][351]++;
  param.multiSelect = ("true" == node.attr("is-multi-select"));
  _$jscoverage['prompting/pentaho-prompting.js'][352]++;
  param.type = node.attr("type");
  _$jscoverage['prompting/pentaho-prompting.js'][353]++;
  param.timezoneHint = node.attr("timezone-hint");
  _$jscoverage['prompting/pentaho-prompting.js'][356]++;
  $(node).find("attribute").each((function (i, attr) {
  _$jscoverage['prompting/pentaho-prompting.js'][357]++;
  attr = $(attr);
  _$jscoverage['prompting/pentaho-prompting.js'][358]++;
  param.attributes[attr.attr("name")] = attr.attr("value");
}));
  _$jscoverage['prompting/pentaho-prompting.js'][361]++;
  param.values = this.parseParameterValues(node, param);
  _$jscoverage['prompting/pentaho-prompting.js'][362]++;
  return param;
});
  _$jscoverage['prompting/pentaho-prompting.js'][365]++;
  this.parseParameterValues = (function (paramNode, parameter) {
  _$jscoverage['prompting/pentaho-prompting.js'][366]++;
  var values = [];
  _$jscoverage['prompting/pentaho-prompting.js'][367]++;
  $(paramNode).find("values value").each((function (i, value) {
  _$jscoverage['prompting/pentaho-prompting.js'][368]++;
  var pVal = new (pentaho.common.prompting.ParameterValue)();
  _$jscoverage['prompting/pentaho-prompting.js'][370]++;
  value = $(value);
  _$jscoverage['prompting/pentaho-prompting.js'][372]++;
  if (("true" == value.attr("encoded"))) {
    _$jscoverage['prompting/pentaho-prompting.js'][373]++;
    pVal.label = base64Decode(value.attr("label"));
  }
  else {
    _$jscoverage['prompting/pentaho-prompting.js'][375]++;
    pVal.label = value.attr("label");
  }
  _$jscoverage['prompting/pentaho-prompting.js'][377]++;
  if (("true" == value.attr("null"))) {
    _$jscoverage['prompting/pentaho-prompting.js'][378]++;
    pVal.value = "";
  }
  else {
    _$jscoverage['prompting/pentaho-prompting.js'][379]++;
    if (("true" == value.attr("encoded"))) {
      _$jscoverage['prompting/pentaho-prompting.js'][380]++;
      pVal.value = base64Decode(value.attr("value"));
    }
    else {
      _$jscoverage['prompting/pentaho-prompting.js'][382]++;
      pVal.value = value.attr("value");
    }
  }
  _$jscoverage['prompting/pentaho-prompting.js'][384]++;
  pVal.type = value.attr("type");
  _$jscoverage['prompting/pentaho-prompting.js'][385]++;
  if (((pVal.type == undefined) || (! $.trim(pVal.type).length))) {
    _$jscoverage['prompting/pentaho-prompting.js'][386]++;
    pVal.type = parameter.type;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][388]++;
  pVal.selected = ("true" == value.attr("selected"));
  _$jscoverage['prompting/pentaho-prompting.js'][390]++;
  pVal.value = this.normalizeParameterValue(parameter, pVal.type, pVal.value);
  _$jscoverage['prompting/pentaho-prompting.js'][391]++;
  values.push(pVal);
}).bind(this));
  _$jscoverage['prompting/pentaho-prompting.js'][393]++;
  return values;
});
  _$jscoverage['prompting/pentaho-prompting.js'][400]++;
  this.normalizeParameterValue = (function (parameter, type, value) {
  _$jscoverage['prompting/pentaho-prompting.js'][401]++;
  return value;
});
  _$jscoverage['prompting/pentaho-prompting.js'][404]++;
  this.parseErrors = (function (paramDefn, xmlRoot) {
  _$jscoverage['prompting/pentaho-prompting.js'][405]++;
  var addToParameter = (function (paramDefn, paramName, message) {
  _$jscoverage['prompting/pentaho-prompting.js'][406]++;
  var errorList = paramDefn.errors[paramName];
  _$jscoverage['prompting/pentaho-prompting.js'][407]++;
  if ((! errorList)) {
    _$jscoverage['prompting/pentaho-prompting.js'][408]++;
    errorList = [];
  }
  _$jscoverage['prompting/pentaho-prompting.js'][410]++;
  errorList.push(message);
  _$jscoverage['prompting/pentaho-prompting.js'][411]++;
  paramDefn.errors[paramName] = errorList;
});
  _$jscoverage['prompting/pentaho-prompting.js'][414]++;
  xmlRoot.find("error").each((function (i, e) {
  _$jscoverage['prompting/pentaho-prompting.js'][415]++;
  var error = $(e);
  _$jscoverage['prompting/pentaho-prompting.js'][416]++;
  var paramName = error.attr("parameter");
  _$jscoverage['prompting/pentaho-prompting.js'][417]++;
  var message = error.attr("message");
  _$jscoverage['prompting/pentaho-prompting.js'][418]++;
  addToParameter(paramDefn, paramName, message);
}).bind(this));
  _$jscoverage['prompting/pentaho-prompting.js'][421]++;
  xmlRoot.find("global-error").each((function (i, e) {
  _$jscoverage['prompting/pentaho-prompting.js'][422]++;
  var error = $(e);
  _$jscoverage['prompting/pentaho-prompting.js'][423]++;
  var message = error.attr("message");
  _$jscoverage['prompting/pentaho-prompting.js'][424]++;
  addToParameter(paramDefn, null, message);
}).bind(this));
});
}), PromptPanel: (function (destinationId, paramDefn) {
  _$jscoverage['prompting/pentaho-prompting.js'][430]++;
  if ((! destinationId)) {
    _$jscoverage['prompting/pentaho-prompting.js'][430]++;
    throw "destinationId is required";
  }
  _$jscoverage['prompting/pentaho-prompting.js'][432]++;
  this.destinationId = destinationId;
  _$jscoverage['prompting/pentaho-prompting.js'][434]++;
  if ((! paramDefn)) {
    _$jscoverage['prompting/pentaho-prompting.js'][434]++;
    throw "paramDefn is required";
  }
  _$jscoverage['prompting/pentaho-prompting.js'][435]++;
  this.paramDefn = paramDefn;
  _$jscoverage['prompting/pentaho-prompting.js'][438]++;
  this.autoSubmit = paramDefn.allowAutoSubmit();
  _$jscoverage['prompting/pentaho-prompting.js'][440]++;
  this.guid = pentaho.common.prompting.promptGUIDHelper.generateGUID();
  _$jscoverage['prompting/pentaho-prompting.js'][445]++;
  this.getString = (function (key, defaultString) {
  _$jscoverage['prompting/pentaho-prompting.js'][446]++;
  return (defaultString || ("!" + key + "!"));
});
  _$jscoverage['prompting/pentaho-prompting.js'][452]++;
  this.getAutoSubmitSetting = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][453]++;
  return this.autoSubmit;
});
  _$jscoverage['prompting/pentaho-prompting.js'][459]++;
  this.getParameterName = (function (parameter) {
  _$jscoverage['prompting/pentaho-prompting.js'][460]++;
  return (this.guid + parameter.name);
});
  _$jscoverage['prompting/pentaho-prompting.js'][467]++;
  this.getParameterValues = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][468]++;
  var params = {};
  _$jscoverage['prompting/pentaho-prompting.js'][469]++;
  this.paramDefn.mapParameters((function (param) {
  _$jscoverage['prompting/pentaho-prompting.js'][470]++;
  var value = Dashboards.getParameterValue(this.getParameterName(param));
  _$jscoverage['prompting/pentaho-prompting.js'][475]++;
  if (((value === "") || ((typeof value) == "undefined"))) {
    _$jscoverage['prompting/pentaho-prompting.js'][476]++;
    return;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][478]++;
  if ((param.multiSelect && (! $.isArray(value)))) {
    _$jscoverage['prompting/pentaho-prompting.js'][479]++;
    value = [value];
  }
  _$jscoverage['prompting/pentaho-prompting.js'][481]++;
  params[param.name] = value;
}), this);
  _$jscoverage['prompting/pentaho-prompting.js'][483]++;
  return params;
});
  _$jscoverage['prompting/pentaho-prompting.js'][495]++;
  this.createDataTransportFormatter = (function (paramDefn, parameter, pattern, formatter) {
});
  _$jscoverage['prompting/pentaho-prompting.js'][517]++;
  this.createFormatter = (function (paramDefn, parameter, pattern) {
});
  _$jscoverage['prompting/pentaho-prompting.js'][521]++;
  this._widgetGUIDHelper = new GUIDHelper();
  _$jscoverage['prompting/pentaho-prompting.js'][525]++;
  this.generateWidgetGUID = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][526]++;
  return (this.guid + "-" + this._widgetGUIDHelper.generateGUID());
});
  _$jscoverage['prompting/pentaho-prompting.js'][532]++;
  this.initializeParameterValue = (function (paramDefn, param) {
  _$jscoverage['prompting/pentaho-prompting.js'][533]++;
  var value = param.getSelectedValuesValue();
  _$jscoverage['prompting/pentaho-prompting.js'][534]++;
  if ((value.length === 0)) {
    _$jscoverage['prompting/pentaho-prompting.js'][535]++;
    value = "";
  }
  else {
    _$jscoverage['prompting/pentaho-prompting.js'][536]++;
    if ((value.length === 1)) {
      _$jscoverage['prompting/pentaho-prompting.js'][537]++;
      value = value[0];
    }
  }
  _$jscoverage['prompting/pentaho-prompting.js'][539]++;
  this.setParameterValue(param, value);
});
  _$jscoverage['prompting/pentaho-prompting.js'][545]++;
  this.setParameterValue = (function (param, value) {
  _$jscoverage['prompting/pentaho-prompting.js'][546]++;
  Dashboards.setParameter(this.getParameterName(param), value);
});
  _$jscoverage['prompting/pentaho-prompting.js'][552]++;
  this.getParameterValue = (function (param) {
  _$jscoverage['prompting/pentaho-prompting.js'][553]++;
  if (((typeof param) !== "string")) {
    _$jscoverage['prompting/pentaho-prompting.js'][554]++;
    param = this.getParameterName(param);
  }
  _$jscoverage['prompting/pentaho-prompting.js'][557]++;
  return Dashboards.getParameterValue(param);
});
  _$jscoverage['prompting/pentaho-prompting.js'][560]++;
  this._ready = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][561]++;
  this.ready(this);
});
  _$jscoverage['prompting/pentaho-prompting.js'][564]++;
  this._submit = (function (options) {
  _$jscoverage['prompting/pentaho-prompting.js'][565]++;
  this.submit(this, options);
});
  _$jscoverage['prompting/pentaho-prompting.js'][568]++;
  this._submitStart = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][569]++;
  this.submitStart(this);
});
  _$jscoverage['prompting/pentaho-prompting.js'][575]++;
  this.ready = (function (promptPanel) {
});
  _$jscoverage['prompting/pentaho-prompting.js'][580]++;
  this.submit = (function (promptPanel, options) {
  _$jscoverage['prompting/pentaho-prompting.js'][581]++;
  this.forceAutoSubmit = false;
});
  _$jscoverage['prompting/pentaho-prompting.js'][587]++;
  this.submitStart = (function (promptPanel) {
});
  _$jscoverage['prompting/pentaho-prompting.js'][597]++;
  this.parameterChanged = (function (param, name, value) {
  _$jscoverage['prompting/pentaho-prompting.js'][598]++;
  this.refreshPrompt();
});
  _$jscoverage['prompting/pentaho-prompting.js'][615]++;
  this.getParameterDefinition = (function (promptPanel, callback) {
  _$jscoverage['prompting/pentaho-prompting.js'][616]++;
  callback();
});
  _$jscoverage['prompting/pentaho-prompting.js'][623]++;
  this.refreshPrompt = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][624]++;
  try {
    _$jscoverage['prompting/pentaho-prompting.js'][625]++;
    this.getParameterDefinition(this, this.refresh.bind(this));
  }
  catch (e) {
    _$jscoverage['prompting/pentaho-prompting.js'][627]++;
    alert("Error in refreshCallback");
  }
});
  _$jscoverage['prompting/pentaho-prompting.js'][639]++;
  this.refresh = (function (paramDefn, noAutoAutoSubmit) {
  _$jscoverage['prompting/pentaho-prompting.js'][640]++;
  if (paramDefn) {
    _$jscoverage['prompting/pentaho-prompting.js'][641]++;
    this.paramDefn = paramDefn;
    _$jscoverage['prompting/pentaho-prompting.js'][644]++;
    if (this.components) {
      _$jscoverage['prompting/pentaho-prompting.js'][647]++;
      var postponeClear = this.paramDefn.showParameterUI();
      _$jscoverage['prompting/pentaho-prompting.js'][648]++;
      pentaho.common.prompting.removeDashboardComponents(this.components, postponeClear);
      _$jscoverage['prompting/pentaho-prompting.js'][652]++;
      var topValuesByParam;
      _$jscoverage['prompting/pentaho-prompting.js'][653]++;
      if ((! /android|ipad|iphone/i.test(navigator.userAgent))) {
        _$jscoverage['prompting/pentaho-prompting.js'][654]++;
        topValuesByParam = (this._multiListBoxTopValuesByParam = {});
      }
      _$jscoverage['prompting/pentaho-prompting.js'][657]++;
      var focusedParam;
      _$jscoverage['prompting/pentaho-prompting.js'][658]++;
      window.CompositeComponent.mapComponentsList(this.components, (function (c) {
  _$jscoverage['prompting/pentaho-prompting.js'][659]++;
  if (((! c.components) && c.param && (c.promptType === "prompt"))) {
    _$jscoverage['prompting/pentaho-prompting.js'][660]++;
    if ((! focusedParam)) {
      _$jscoverage['prompting/pentaho-prompting.js'][661]++;
      var ph = c.placeholder();
      _$jscoverage['prompting/pentaho-prompting.js'][662]++;
      if ($(":focus", ph).length) {
        _$jscoverage['prompting/pentaho-prompting.js'][663]++;
        focusedParam = c.param.name;
      }
    }
    _$jscoverage['prompting/pentaho-prompting.js'][667]++;
    if ((topValuesByParam && (c.type === "SelectMultiComponent"))) {
      _$jscoverage['prompting/pentaho-prompting.js'][668]++;
      var topValue = c.topValue();
      _$jscoverage['prompting/pentaho-prompting.js'][669]++;
      if ((topValue != null)) {
        _$jscoverage['prompting/pentaho-prompting.js'][670]++;
        topValuesByParam[("_" + c.param.name)] = topValue;
      }
    }
  }
}));
      _$jscoverage['prompting/pentaho-prompting.js'][676]++;
      this._focusedParam = focusedParam;
    }
    _$jscoverage['prompting/pentaho-prompting.js'][679]++;
    this.init(noAutoAutoSubmit);
  }
});
  _$jscoverage['prompting/pentaho-prompting.js'][689]++;
  this.init = (function (noAutoAutoSubmit) {
  _$jscoverage['prompting/pentaho-prompting.js'][690]++;
  pentaho.common.prompting.prepareCDF();
  _$jscoverage['prompting/pentaho-prompting.js'][691]++;
  var fireSubmit = true;
  _$jscoverage['prompting/pentaho-prompting.js'][692]++;
  if (this.paramDefn.showParameterUI()) {
    _$jscoverage['prompting/pentaho-prompting.js'][693]++;
    this._widgetGUIDHelper.reset();
    _$jscoverage['prompting/pentaho-prompting.js'][695]++;
    var components = [];
    _$jscoverage['prompting/pentaho-prompting.js'][697]++;
    var layout = pentaho.common.prompting.builders.WidgetBuilder.build(this, "prompt-panel");
    _$jscoverage['prompting/pentaho-prompting.js'][699]++;
    var topValuesByParam = this._multiListBoxTopValuesByParam;
    _$jscoverage['prompting/pentaho-prompting.js'][700]++;
    if (topValuesByParam) {
      _$jscoverage['prompting/pentaho-prompting.js'][700]++;
      (delete this._multiListBoxTopValuesByParam);
    }
    _$jscoverage['prompting/pentaho-prompting.js'][702]++;
    var focusedParam = this._focusedParam;
    _$jscoverage['prompting/pentaho-prompting.js'][703]++;
    if (focusedParam) {
      _$jscoverage['prompting/pentaho-prompting.js'][703]++;
      (delete this._focusedParam);
    }
    _$jscoverage['prompting/pentaho-prompting.js'][705]++;
    window.CompositeComponent.mapComponents(layout, (function (c) {
  _$jscoverage['prompting/pentaho-prompting.js'][706]++;
  components.push(c);
  _$jscoverage['prompting/pentaho-prompting.js'][710]++;
  if ((fireSubmit && (c.promptType == "submit"))) {
    _$jscoverage['prompting/pentaho-prompting.js'][711]++;
    fireSubmit = false;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][714]++;
  if (((! c.components) && c.param && (c.promptType === "prompt"))) {
    _$jscoverage['prompting/pentaho-prompting.js'][715]++;
    var name = c.param.name;
    _$jscoverage['prompting/pentaho-prompting.js'][716]++;
    if ((focusedParam && (focusedParam === name))) {
      _$jscoverage['prompting/pentaho-prompting.js'][717]++;
      focusedParam = null;
      _$jscoverage['prompting/pentaho-prompting.js'][718]++;
      c.autoFocus = true;
    }
    _$jscoverage['prompting/pentaho-prompting.js'][721]++;
    if ((topValuesByParam && (c.type === "SelectMultiComponent"))) {
      _$jscoverage['prompting/pentaho-prompting.js'][722]++;
      var topValue = topValuesByParam[("_" + name)];
      _$jscoverage['prompting/pentaho-prompting.js'][723]++;
      if ((topValue != null)) {
        _$jscoverage['prompting/pentaho-prompting.js'][724]++;
        c.autoTopValue = topValue;
      }
    }
  }
}));
    _$jscoverage['prompting/pentaho-prompting.js'][730]++;
    if ((this.components && (this.components.length > 0))) {
      _$jscoverage['prompting/pentaho-prompting.js'][734]++;
      var gc = pentaho.common.prompting.builders.WidgetBuilder.build({promptPanel: this, components: this.components}, "gc");
      _$jscoverage['prompting/pentaho-prompting.js'][739]++;
      if ((! gc)) {
        _$jscoverage['prompting/pentaho-prompting.js'][739]++;
        throw "Cannot create garbage collector";
      }
      _$jscoverage['prompting/pentaho-prompting.js'][741]++;
      components = [gc].concat(components);
    }
    _$jscoverage['prompting/pentaho-prompting.js'][744]++;
    this.components = components;
    _$jscoverage['prompting/pentaho-prompting.js'][746]++;
    Dashboards.init(components);
  }
  else {
    _$jscoverage['prompting/pentaho-prompting.js'][748]++;
    this.paramDefn.mapParameters((function (param) {
  _$jscoverage['prompting/pentaho-prompting.js'][750]++;
  this.initializeParameterValue(paramDefn, param);
}), this);
    _$jscoverage['prompting/pentaho-prompting.js'][755]++;
    fireSubmit = (! noAutoAutoSubmit);
  }
  _$jscoverage['prompting/pentaho-prompting.js'][758]++;
  if (fireSubmit) {
    _$jscoverage['prompting/pentaho-prompting.js'][758]++;
    this.submit(this, {isInit: true});
  }
});
  _$jscoverage['prompting/pentaho-prompting.js'][761]++;
  this.hide = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][762]++;
  $(("#" + this.destinationId)).css("display", "none");
});
  _$jscoverage['prompting/pentaho-prompting.js'][765]++;
  this.createSubmitPanel = (function (paramDefn) {
  _$jscoverage['prompting/pentaho-prompting.js'][766]++;
  return pentaho.common.prompting.builders.WidgetBuilder.build({promptPanel: this}, "submit-panel");
});
  _$jscoverage['prompting/pentaho-prompting.js'][771]++;
  this.getParameterPanelType = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][772]++;
  return "parameter-panel";
});
  _$jscoverage['prompting/pentaho-prompting.js'][775]++;
  this.createWidgetForParameter = (function (paramDefn, param) {
  _$jscoverage['prompting/pentaho-prompting.js'][776]++;
  if ((param.strict && (param.values.length === 0))) {
    _$jscoverage['prompting/pentaho-prompting.js'][781]++;
    return;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][784]++;
  return pentaho.common.prompting.builders.WidgetBuilder.build({promptPanel: this, param: param});
});
  _$jscoverage['prompting/pentaho-prompting.js'][794]++;
  this.shouldBuildSubmitPanel = (function (panelComponents) {
  _$jscoverage['prompting/pentaho-prompting.js'][795]++;
  return (panelComponents.length > 0);
});
  _$jscoverage['prompting/pentaho-prompting.js'][798]++;
  this.buildPanelComponents = (function () {
  _$jscoverage['prompting/pentaho-prompting.js'][799]++;
  var panelComponents = [];
  _$jscoverage['prompting/pentaho-prompting.js'][801]++;
  $.each(this.paramDefn.parameterGroups, (function (i, group) {
  _$jscoverage['prompting/pentaho-prompting.js'][802]++;
  var components = [];
  _$jscoverage['prompting/pentaho-prompting.js'][804]++;
  $.each(group.parameters, (function (i, param) {
  _$jscoverage['prompting/pentaho-prompting.js'][806]++;
  this.initializeParameterValue(this.paramDefn, param);
  _$jscoverage['prompting/pentaho-prompting.js'][808]++;
  if (("true" == param.attributes.hidden)) {
    _$jscoverage['prompting/pentaho-prompting.js'][809]++;
    return;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][812]++;
  var widget = this.createWidgetForParameter(this.paramDefn, param);
  _$jscoverage['prompting/pentaho-prompting.js'][813]++;
  if ((! widget)) {
    _$jscoverage['prompting/pentaho-prompting.js'][815]++;
    return;
  }
  _$jscoverage['prompting/pentaho-prompting.js'][818]++;
  var label = pentaho.common.prompting.builders.WidgetBuilder.build({promptPanel: this, param: param}, "label");
  _$jscoverage['prompting/pentaho-prompting.js'][823]++;
  var errors = this.paramDefn.errors[param.name];
  _$jscoverage['prompting/pentaho-prompting.js'][824]++;
  var errorLabels = [];
  _$jscoverage['prompting/pentaho-prompting.js'][825]++;
  if ((errors && (errors.length > 0))) {
    _$jscoverage['prompting/pentaho-prompting.js'][826]++;
    $.each(errors, (function (i, e) {
  _$jscoverage['prompting/pentaho-prompting.js'][827]++;
  var l = pentaho.common.prompting.builders.WidgetBuilder.build({promptPanel: this, param: param, errorMessage: e}, "error-label");
  _$jscoverage['prompting/pentaho-prompting.js'][832]++;
  if (l) {
    _$jscoverage['prompting/pentaho-prompting.js'][833]++;
    errorLabels.push(l);
  }
}).bind(this));
  }
  _$jscoverage['prompting/pentaho-prompting.js'][838]++;
  var c = [label];
  _$jscoverage['prompting/pentaho-prompting.js'][839]++;
  c = c.concat(errorLabels);
  _$jscoverage['prompting/pentaho-prompting.js'][840]++;
  c.push(widget);
  _$jscoverage['prompting/pentaho-prompting.js'][841]++;
  var panel = pentaho.common.prompting.builders.WidgetBuilder.build({promptPanel: this, param: param, components: c}, this.getParameterPanelType());
  _$jscoverage['prompting/pentaho-prompting.js'][847]++;
  if ((errorLabels.length > 0)) {
    _$jscoverage['prompting/pentaho-prompting.js'][848]++;
    panel.cssClass = ((panel.cssClass || "") + " error");
  }
  _$jscoverage['prompting/pentaho-prompting.js'][851]++;
  components.push(panel);
}).bind(this));
  _$jscoverage['prompting/pentaho-prompting.js'][854]++;
  if ((components.length > 0)) {
    _$jscoverage['prompting/pentaho-prompting.js'][855]++;
    var groupPanel = pentaho.common.prompting.builders.WidgetBuilder.build({promptPanel: this, paramGroup: group, components: components}, "group-panel");
    _$jscoverage['prompting/pentaho-prompting.js'][860]++;
    panelComponents.push(groupPanel);
  }
}).bind(this));
  _$jscoverage['prompting/pentaho-prompting.js'][864]++;
  if (this.shouldBuildSubmitPanel(panelComponents)) {
    _$jscoverage['prompting/pentaho-prompting.js'][865]++;
    var submitPanel = this.createSubmitPanel(this.paramDefn);
    _$jscoverage['prompting/pentaho-prompting.js'][866]++;
    if (submitPanel) {
      _$jscoverage['prompting/pentaho-prompting.js'][867]++;
      panelComponents.push(submitPanel);
    }
  }
  _$jscoverage['prompting/pentaho-prompting.js'][871]++;
  return panelComponents;
});
})});
}));
