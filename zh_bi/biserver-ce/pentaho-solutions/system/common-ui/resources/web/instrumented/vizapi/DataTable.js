/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['vizapi/DataTable.js']) {
  _$jscoverage['vizapi/DataTable.js'] = [];
  _$jscoverage['vizapi/DataTable.js'][11] = 0;
  _$jscoverage['vizapi/DataTable.js'][22] = 0;
  _$jscoverage['vizapi/DataTable.js'][23] = 0;
  _$jscoverage['vizapi/DataTable.js'][24] = 0;
  _$jscoverage['vizapi/DataTable.js'][25] = 0;
  _$jscoverage['vizapi/DataTable.js'][27] = 0;
  _$jscoverage['vizapi/DataTable.js'][62] = 0;
  _$jscoverage['vizapi/DataTable.js'][64] = 0;
  _$jscoverage['vizapi/DataTable.js'][65] = 0;
  _$jscoverage['vizapi/DataTable.js'][68] = 0;
  _$jscoverage['vizapi/DataTable.js'][70] = 0;
  _$jscoverage['vizapi/DataTable.js'][75] = 0;
  _$jscoverage['vizapi/DataTable.js'][76] = 0;
  _$jscoverage['vizapi/DataTable.js'][78] = 0;
  _$jscoverage['vizapi/DataTable.js'][80] = 0;
  _$jscoverage['vizapi/DataTable.js'][83] = 0;
  _$jscoverage['vizapi/DataTable.js'][87] = 0;
  _$jscoverage['vizapi/DataTable.js'][88] = 0;
  _$jscoverage['vizapi/DataTable.js'][90] = 0;
  _$jscoverage['vizapi/DataTable.js'][91] = 0;
  _$jscoverage['vizapi/DataTable.js'][92] = 0;
  _$jscoverage['vizapi/DataTable.js'][94] = 0;
  _$jscoverage['vizapi/DataTable.js'][98] = 0;
  _$jscoverage['vizapi/DataTable.js'][102] = 0;
  _$jscoverage['vizapi/DataTable.js'][106] = 0;
  _$jscoverage['vizapi/DataTable.js'][117] = 0;
  _$jscoverage['vizapi/DataTable.js'][118] = 0;
  _$jscoverage['vizapi/DataTable.js'][119] = 0;
  _$jscoverage['vizapi/DataTable.js'][120] = 0;
  _$jscoverage['vizapi/DataTable.js'][122] = 0;
  _$jscoverage['vizapi/DataTable.js'][123] = 0;
  _$jscoverage['vizapi/DataTable.js'][124] = 0;
  _$jscoverage['vizapi/DataTable.js'][125] = 0;
  _$jscoverage['vizapi/DataTable.js'][126] = 0;
  _$jscoverage['vizapi/DataTable.js'][127] = 0;
  _$jscoverage['vizapi/DataTable.js'][137] = 0;
  _$jscoverage['vizapi/DataTable.js'][138] = 0;
  _$jscoverage['vizapi/DataTable.js'][145] = 0;
  _$jscoverage['vizapi/DataTable.js'][146] = 0;
  _$jscoverage['vizapi/DataTable.js'][153] = 0;
  _$jscoverage['vizapi/DataTable.js'][154] = 0;
  _$jscoverage['vizapi/DataTable.js'][162] = 0;
  _$jscoverage['vizapi/DataTable.js'][163] = 0;
  _$jscoverage['vizapi/DataTable.js'][171] = 0;
  _$jscoverage['vizapi/DataTable.js'][172] = 0;
  _$jscoverage['vizapi/DataTable.js'][180] = 0;
  _$jscoverage['vizapi/DataTable.js'][181] = 0;
  _$jscoverage['vizapi/DataTable.js'][190] = 0;
  _$jscoverage['vizapi/DataTable.js'][191] = 0;
  _$jscoverage['vizapi/DataTable.js'][192] = 0;
  _$jscoverage['vizapi/DataTable.js'][194] = 0;
  _$jscoverage['vizapi/DataTable.js'][196] = 0;
  _$jscoverage['vizapi/DataTable.js'][198] = 0;
  _$jscoverage['vizapi/DataTable.js'][205] = 0;
  _$jscoverage['vizapi/DataTable.js'][206] = 0;
  _$jscoverage['vizapi/DataTable.js'][207] = 0;
  _$jscoverage['vizapi/DataTable.js'][209] = 0;
  _$jscoverage['vizapi/DataTable.js'][219] = 0;
  _$jscoverage['vizapi/DataTable.js'][220] = 0;
  _$jscoverage['vizapi/DataTable.js'][221] = 0;
  _$jscoverage['vizapi/DataTable.js'][223] = 0;
  _$jscoverage['vizapi/DataTable.js'][225] = 0;
  _$jscoverage['vizapi/DataTable.js'][227] = 0;
  _$jscoverage['vizapi/DataTable.js'][229] = 0;
  _$jscoverage['vizapi/DataTable.js'][231] = 0;
  _$jscoverage['vizapi/DataTable.js'][233] = 0;
  _$jscoverage['vizapi/DataTable.js'][236] = 0;
  _$jscoverage['vizapi/DataTable.js'][251] = 0;
  _$jscoverage['vizapi/DataTable.js'][253] = 0;
  _$jscoverage['vizapi/DataTable.js'][254] = 0;
  _$jscoverage['vizapi/DataTable.js'][255] = 0;
  _$jscoverage['vizapi/DataTable.js'][256] = 0;
  _$jscoverage['vizapi/DataTable.js'][258] = 0;
  _$jscoverage['vizapi/DataTable.js'][260] = 0;
  _$jscoverage['vizapi/DataTable.js'][261] = 0;
  _$jscoverage['vizapi/DataTable.js'][262] = 0;
  _$jscoverage['vizapi/DataTable.js'][263] = 0;
  _$jscoverage['vizapi/DataTable.js'][266] = 0;
  _$jscoverage['vizapi/DataTable.js'][267] = 0;
  _$jscoverage['vizapi/DataTable.js'][268] = 0;
  _$jscoverage['vizapi/DataTable.js'][269] = 0;
  _$jscoverage['vizapi/DataTable.js'][271] = 0;
  _$jscoverage['vizapi/DataTable.js'][272] = 0;
  _$jscoverage['vizapi/DataTable.js'][274] = 0;
  _$jscoverage['vizapi/DataTable.js'][275] = 0;
  _$jscoverage['vizapi/DataTable.js'][282] = 0;
  _$jscoverage['vizapi/DataTable.js'][286] = 0;
  _$jscoverage['vizapi/DataTable.js'][296] = 0;
  _$jscoverage['vizapi/DataTable.js'][297] = 0;
  _$jscoverage['vizapi/DataTable.js'][298] = 0;
  _$jscoverage['vizapi/DataTable.js'][299] = 0;
  _$jscoverage['vizapi/DataTable.js'][300] = 0;
  _$jscoverage['vizapi/DataTable.js'][301] = 0;
  _$jscoverage['vizapi/DataTable.js'][302] = 0;
  _$jscoverage['vizapi/DataTable.js'][303] = 0;
  _$jscoverage['vizapi/DataTable.js'][304] = 0;
  _$jscoverage['vizapi/DataTable.js'][307] = 0;
  _$jscoverage['vizapi/DataTable.js'][316] = 0;
  _$jscoverage['vizapi/DataTable.js'][317] = 0;
  _$jscoverage['vizapi/DataTable.js'][318] = 0;
  _$jscoverage['vizapi/DataTable.js'][319] = 0;
  _$jscoverage['vizapi/DataTable.js'][320] = 0;
  _$jscoverage['vizapi/DataTable.js'][321] = 0;
  _$jscoverage['vizapi/DataTable.js'][322] = 0;
  _$jscoverage['vizapi/DataTable.js'][323] = 0;
  _$jscoverage['vizapi/DataTable.js'][326] = 0;
  _$jscoverage['vizapi/DataTable.js'][346] = 0;
  _$jscoverage['vizapi/DataTable.js'][347] = 0;
  _$jscoverage['vizapi/DataTable.js'][348] = 0;
  _$jscoverage['vizapi/DataTable.js'][349] = 0;
  _$jscoverage['vizapi/DataTable.js'][350] = 0;
  _$jscoverage['vizapi/DataTable.js'][351] = 0;
  _$jscoverage['vizapi/DataTable.js'][353] = 0;
  _$jscoverage['vizapi/DataTable.js'][355] = 0;
  _$jscoverage['vizapi/DataTable.js'][358] = 0;
  _$jscoverage['vizapi/DataTable.js'][360] = 0;
  _$jscoverage['vizapi/DataTable.js'][361] = 0;
  _$jscoverage['vizapi/DataTable.js'][362] = 0;
  _$jscoverage['vizapi/DataTable.js'][363] = 0;
  _$jscoverage['vizapi/DataTable.js'][365] = 0;
  _$jscoverage['vizapi/DataTable.js'][366] = 0;
  _$jscoverage['vizapi/DataTable.js'][368] = 0;
  _$jscoverage['vizapi/DataTable.js'][369] = 0;
  _$jscoverage['vizapi/DataTable.js'][372] = 0;
  _$jscoverage['vizapi/DataTable.js'][373] = 0;
  _$jscoverage['vizapi/DataTable.js'][374] = 0;
  _$jscoverage['vizapi/DataTable.js'][375] = 0;
  _$jscoverage['vizapi/DataTable.js'][377] = 0;
  _$jscoverage['vizapi/DataTable.js'][381] = 0;
  _$jscoverage['vizapi/DataTable.js'][382] = 0;
  _$jscoverage['vizapi/DataTable.js'][387] = 0;
  _$jscoverage['vizapi/DataTable.js'][398] = 0;
  _$jscoverage['vizapi/DataTable.js'][399] = 0;
  _$jscoverage['vizapi/DataTable.js'][400] = 0;
  _$jscoverage['vizapi/DataTable.js'][413] = 0;
  _$jscoverage['vizapi/DataTable.js'][414] = 0;
  _$jscoverage['vizapi/DataTable.js'][415] = 0;
  _$jscoverage['vizapi/DataTable.js'][417] = 0;
  _$jscoverage['vizapi/DataTable.js'][432] = 0;
  _$jscoverage['vizapi/DataTable.js'][433] = 0;
  _$jscoverage['vizapi/DataTable.js'][434] = 0;
  _$jscoverage['vizapi/DataTable.js'][435] = 0;
  _$jscoverage['vizapi/DataTable.js'][436] = 0;
  _$jscoverage['vizapi/DataTable.js'][451] = 0;
  _$jscoverage['vizapi/DataTable.js'][452] = 0;
  _$jscoverage['vizapi/DataTable.js'][467] = 0;
  _$jscoverage['vizapi/DataTable.js'][468] = 0;
  _$jscoverage['vizapi/DataTable.js'][482] = 0;
  _$jscoverage['vizapi/DataTable.js'][484] = 0;
  _$jscoverage['vizapi/DataTable.js'][485] = 0;
  _$jscoverage['vizapi/DataTable.js'][486] = 0;
  _$jscoverage['vizapi/DataTable.js'][487] = 0;
  _$jscoverage['vizapi/DataTable.js'][489] = 0;
  _$jscoverage['vizapi/DataTable.js'][490] = 0;
  _$jscoverage['vizapi/DataTable.js'][491] = 0;
  _$jscoverage['vizapi/DataTable.js'][492] = 0;
  _$jscoverage['vizapi/DataTable.js'][493] = 0;
  _$jscoverage['vizapi/DataTable.js'][496] = 0;
  _$jscoverage['vizapi/DataTable.js'][497] = 0;
  _$jscoverage['vizapi/DataTable.js'][498] = 0;
  _$jscoverage['vizapi/DataTable.js'][499] = 0;
  _$jscoverage['vizapi/DataTable.js'][501] = 0;
  _$jscoverage['vizapi/DataTable.js'][502] = 0;
  _$jscoverage['vizapi/DataTable.js'][504] = 0;
  _$jscoverage['vizapi/DataTable.js'][505] = 0;
  _$jscoverage['vizapi/DataTable.js'][510] = 0;
  _$jscoverage['vizapi/DataTable.js'][514] = 0;
  _$jscoverage['vizapi/DataTable.js'][524] = 0;
  _$jscoverage['vizapi/DataTable.js'][525] = 0;
  _$jscoverage['vizapi/DataTable.js'][526] = 0;
  _$jscoverage['vizapi/DataTable.js'][527] = 0;
  _$jscoverage['vizapi/DataTable.js'][528] = 0;
  _$jscoverage['vizapi/DataTable.js'][529] = 0;
  _$jscoverage['vizapi/DataTable.js'][530] = 0;
  _$jscoverage['vizapi/DataTable.js'][531] = 0;
  _$jscoverage['vizapi/DataTable.js'][534] = 0;
  _$jscoverage['vizapi/DataTable.js'][543] = 0;
  _$jscoverage['vizapi/DataTable.js'][544] = 0;
  _$jscoverage['vizapi/DataTable.js'][545] = 0;
  _$jscoverage['vizapi/DataTable.js'][546] = 0;
  _$jscoverage['vizapi/DataTable.js'][547] = 0;
  _$jscoverage['vizapi/DataTable.js'][548] = 0;
  _$jscoverage['vizapi/DataTable.js'][549] = 0;
  _$jscoverage['vizapi/DataTable.js'][550] = 0;
  _$jscoverage['vizapi/DataTable.js'][553] = 0;
  _$jscoverage['vizapi/DataTable.js'][563] = 0;
  _$jscoverage['vizapi/DataTable.js'][564] = 0;
  _$jscoverage['vizapi/DataTable.js'][565] = 0;
  _$jscoverage['vizapi/DataTable.js'][566] = 0;
  _$jscoverage['vizapi/DataTable.js'][568] = 0;
  _$jscoverage['vizapi/DataTable.js'][569] = 0;
  _$jscoverage['vizapi/DataTable.js'][571] = 0;
  _$jscoverage['vizapi/DataTable.js'][578] = 0;
  _$jscoverage['vizapi/DataTable.js'][579] = 0;
  _$jscoverage['vizapi/DataTable.js'][586] = 0;
  _$jscoverage['vizapi/DataTable.js'][587] = 0;
  _$jscoverage['vizapi/DataTable.js'][595] = 0;
  _$jscoverage['vizapi/DataTable.js'][596] = 0;
  _$jscoverage['vizapi/DataTable.js'][604] = 0;
  _$jscoverage['vizapi/DataTable.js'][605] = 0;
  _$jscoverage['vizapi/DataTable.js'][613] = 0;
  _$jscoverage['vizapi/DataTable.js'][614] = 0;
  _$jscoverage['vizapi/DataTable.js'][623] = 0;
  _$jscoverage['vizapi/DataTable.js'][624] = 0;
  _$jscoverage['vizapi/DataTable.js'][625] = 0;
  _$jscoverage['vizapi/DataTable.js'][626] = 0;
  _$jscoverage['vizapi/DataTable.js'][629] = 0;
  _$jscoverage['vizapi/DataTable.js'][630] = 0;
  _$jscoverage['vizapi/DataTable.js'][631] = 0;
  _$jscoverage['vizapi/DataTable.js'][632] = 0;
  _$jscoverage['vizapi/DataTable.js'][633] = 0;
  _$jscoverage['vizapi/DataTable.js'][635] = 0;
  _$jscoverage['vizapi/DataTable.js'][636] = 0;
  _$jscoverage['vizapi/DataTable.js'][638] = 0;
  _$jscoverage['vizapi/DataTable.js'][639] = 0;
  _$jscoverage['vizapi/DataTable.js'][642] = 0;
  _$jscoverage['vizapi/DataTable.js'][644] = 0;
  _$jscoverage['vizapi/DataTable.js'][647] = 0;
  _$jscoverage['vizapi/DataTable.js'][648] = 0;
  _$jscoverage['vizapi/DataTable.js'][649] = 0;
  _$jscoverage['vizapi/DataTable.js'][650] = 0;
  _$jscoverage['vizapi/DataTable.js'][659] = 0;
  _$jscoverage['vizapi/DataTable.js'][660] = 0;
  _$jscoverage['vizapi/DataTable.js'][661] = 0;
  _$jscoverage['vizapi/DataTable.js'][662] = 0;
  _$jscoverage['vizapi/DataTable.js'][665] = 0;
  _$jscoverage['vizapi/DataTable.js'][666] = 0;
  _$jscoverage['vizapi/DataTable.js'][667] = 0;
  _$jscoverage['vizapi/DataTable.js'][668] = 0;
  _$jscoverage['vizapi/DataTable.js'][669] = 0;
  _$jscoverage['vizapi/DataTable.js'][671] = 0;
  _$jscoverage['vizapi/DataTable.js'][672] = 0;
  _$jscoverage['vizapi/DataTable.js'][674] = 0;
  _$jscoverage['vizapi/DataTable.js'][675] = 0;
  _$jscoverage['vizapi/DataTable.js'][678] = 0;
  _$jscoverage['vizapi/DataTable.js'][680] = 0;
  _$jscoverage['vizapi/DataTable.js'][691] = 0;
  _$jscoverage['vizapi/DataTable.js'][693] = 0;
  _$jscoverage['vizapi/DataTable.js'][694] = 0;
  _$jscoverage['vizapi/DataTable.js'][695] = 0;
  _$jscoverage['vizapi/DataTable.js'][700] = 0;
  _$jscoverage['vizapi/DataTable.js'][703] = 0;
  _$jscoverage['vizapi/DataTable.js'][704] = 0;
  _$jscoverage['vizapi/DataTable.js'][705] = 0;
  _$jscoverage['vizapi/DataTable.js'][706] = 0;
  _$jscoverage['vizapi/DataTable.js'][707] = 0;
  _$jscoverage['vizapi/DataTable.js'][708] = 0;
  _$jscoverage['vizapi/DataTable.js'][710] = 0;
  _$jscoverage['vizapi/DataTable.js'][713] = 0;
  _$jscoverage['vizapi/DataTable.js'][716] = 0;
  _$jscoverage['vizapi/DataTable.js'][718] = 0;
  _$jscoverage['vizapi/DataTable.js'][719] = 0;
  _$jscoverage['vizapi/DataTable.js'][731] = 0;
  _$jscoverage['vizapi/DataTable.js'][732] = 0;
  _$jscoverage['vizapi/DataTable.js'][744] = 0;
  _$jscoverage['vizapi/DataTable.js'][745] = 0;
  _$jscoverage['vizapi/DataTable.js'][750] = 0;
  _$jscoverage['vizapi/DataTable.js'][752] = 0;
  _$jscoverage['vizapi/DataTable.js'][753] = 0;
  _$jscoverage['vizapi/DataTable.js'][756] = 0;
  _$jscoverage['vizapi/DataTable.js'][757] = 0;
  _$jscoverage['vizapi/DataTable.js'][772] = 0;
  _$jscoverage['vizapi/DataTable.js'][777] = 0;
  _$jscoverage['vizapi/DataTable.js'][778] = 0;
  _$jscoverage['vizapi/DataTable.js'][783] = 0;
  _$jscoverage['vizapi/DataTable.js'][784] = 0;
  _$jscoverage['vizapi/DataTable.js'][785] = 0;
  _$jscoverage['vizapi/DataTable.js'][788] = 0;
  _$jscoverage['vizapi/DataTable.js'][790] = 0;
  _$jscoverage['vizapi/DataTable.js'][794] = 0;
  _$jscoverage['vizapi/DataTable.js'][796] = 0;
  _$jscoverage['vizapi/DataTable.js'][797] = 0;
  _$jscoverage['vizapi/DataTable.js'][798] = 0;
  _$jscoverage['vizapi/DataTable.js'][801] = 0;
  _$jscoverage['vizapi/DataTable.js'][802] = 0;
  _$jscoverage['vizapi/DataTable.js'][803] = 0;
  _$jscoverage['vizapi/DataTable.js'][806] = 0;
  _$jscoverage['vizapi/DataTable.js'][807] = 0;
  _$jscoverage['vizapi/DataTable.js'][814] = 0;
  _$jscoverage['vizapi/DataTable.js'][815] = 0;
  _$jscoverage['vizapi/DataTable.js'][816] = 0;
  _$jscoverage['vizapi/DataTable.js'][819] = 0;
  _$jscoverage['vizapi/DataTable.js'][820] = 0;
  _$jscoverage['vizapi/DataTable.js'][821] = 0;
  _$jscoverage['vizapi/DataTable.js'][824] = 0;
  _$jscoverage['vizapi/DataTable.js'][825] = 0;
  _$jscoverage['vizapi/DataTable.js'][828] = 0;
  _$jscoverage['vizapi/DataTable.js'][829] = 0;
  _$jscoverage['vizapi/DataTable.js'][836] = 0;
  _$jscoverage['vizapi/DataTable.js'][839] = 0;
  _$jscoverage['vizapi/DataTable.js'][844] = 0;
  _$jscoverage['vizapi/DataTable.js'][850] = 0;
  _$jscoverage['vizapi/DataTable.js'][851] = 0;
  _$jscoverage['vizapi/DataTable.js'][852] = 0;
  _$jscoverage['vizapi/DataTable.js'][860] = 0;
  _$jscoverage['vizapi/DataTable.js'][862] = 0;
  _$jscoverage['vizapi/DataTable.js'][864] = 0;
  _$jscoverage['vizapi/DataTable.js'][866] = 0;
  _$jscoverage['vizapi/DataTable.js'][869] = 0;
  _$jscoverage['vizapi/DataTable.js'][872] = 0;
  _$jscoverage['vizapi/DataTable.js'][873] = 0;
  _$jscoverage['vizapi/DataTable.js'][876] = 0;
  _$jscoverage['vizapi/DataTable.js'][877] = 0;
  _$jscoverage['vizapi/DataTable.js'][878] = 0;
  _$jscoverage['vizapi/DataTable.js'][879] = 0;
  _$jscoverage['vizapi/DataTable.js'][881] = 0;
  _$jscoverage['vizapi/DataTable.js'][882] = 0;
  _$jscoverage['vizapi/DataTable.js'][885] = 0;
  _$jscoverage['vizapi/DataTable.js'][886] = 0;
  _$jscoverage['vizapi/DataTable.js'][889] = 0;
  _$jscoverage['vizapi/DataTable.js'][892] = 0;
  _$jscoverage['vizapi/DataTable.js'][893] = 0;
  _$jscoverage['vizapi/DataTable.js'][894] = 0;
  _$jscoverage['vizapi/DataTable.js'][898] = 0;
  _$jscoverage['vizapi/DataTable.js'][901] = 0;
  _$jscoverage['vizapi/DataTable.js'][908] = 0;
  _$jscoverage['vizapi/DataTable.js'][910] = 0;
  _$jscoverage['vizapi/DataTable.js'][911] = 0;
  _$jscoverage['vizapi/DataTable.js'][912] = 0;
  _$jscoverage['vizapi/DataTable.js'][915] = 0;
  _$jscoverage['vizapi/DataTable.js'][916] = 0;
  _$jscoverage['vizapi/DataTable.js'][917] = 0;
  _$jscoverage['vizapi/DataTable.js'][920] = 0;
  _$jscoverage['vizapi/DataTable.js'][921] = 0;
  _$jscoverage['vizapi/DataTable.js'][924] = 0;
  _$jscoverage['vizapi/DataTable.js'][928] = 0;
  _$jscoverage['vizapi/DataTable.js'][932] = 0;
  _$jscoverage['vizapi/DataTable.js'][934] = 0;
  _$jscoverage['vizapi/DataTable.js'][945] = 0;
  _$jscoverage['vizapi/DataTable.js'][946] = 0;
  _$jscoverage['vizapi/DataTable.js'][947] = 0;
  _$jscoverage['vizapi/DataTable.js'][950] = 0;
  _$jscoverage['vizapi/DataTable.js'][952] = 0;
  _$jscoverage['vizapi/DataTable.js'][953] = 0;
  _$jscoverage['vizapi/DataTable.js'][958] = 0;
  _$jscoverage['vizapi/DataTable.js'][959] = 0;
  _$jscoverage['vizapi/DataTable.js'][960] = 0;
  _$jscoverage['vizapi/DataTable.js'][963] = 0;
  _$jscoverage['vizapi/DataTable.js'][964] = 0;
  _$jscoverage['vizapi/DataTable.js'][969] = 0;
  _$jscoverage['vizapi/DataTable.js'][970] = 0;
  _$jscoverage['vizapi/DataTable.js'][971] = 0;
  _$jscoverage['vizapi/DataTable.js'][974] = 0;
  _$jscoverage['vizapi/DataTable.js'][980] = 0;
  _$jscoverage['vizapi/DataTable.js'][989] = 0;
  _$jscoverage['vizapi/DataTable.js'][990] = 0;
  _$jscoverage['vizapi/DataTable.js'][991] = 0;
  _$jscoverage['vizapi/DataTable.js'][994] = 0;
  _$jscoverage['vizapi/DataTable.js'][995] = 0;
  _$jscoverage['vizapi/DataTable.js'][996] = 0;
  _$jscoverage['vizapi/DataTable.js'][999] = 0;
  _$jscoverage['vizapi/DataTable.js'][1005] = 0;
  _$jscoverage['vizapi/DataTable.js'][1008] = 0;
  _$jscoverage['vizapi/DataTable.js'][1009] = 0;
  _$jscoverage['vizapi/DataTable.js'][1010] = 0;
  _$jscoverage['vizapi/DataTable.js'][1011] = 0;
  _$jscoverage['vizapi/DataTable.js'][1015] = 0;
  _$jscoverage['vizapi/DataTable.js'][1020] = 0;
  _$jscoverage['vizapi/DataTable.js'][1021] = 0;
  _$jscoverage['vizapi/DataTable.js'][1024] = 0;
  _$jscoverage['vizapi/DataTable.js'][1027] = 0;
  _$jscoverage['vizapi/DataTable.js'][1028] = 0;
  _$jscoverage['vizapi/DataTable.js'][1029] = 0;
  _$jscoverage['vizapi/DataTable.js'][1031] = 0;
  _$jscoverage['vizapi/DataTable.js'][1032] = 0;
  _$jscoverage['vizapi/DataTable.js'][1033] = 0;
  _$jscoverage['vizapi/DataTable.js'][1034] = 0;
  _$jscoverage['vizapi/DataTable.js'][1035] = 0;
  _$jscoverage['vizapi/DataTable.js'][1036] = 0;
  _$jscoverage['vizapi/DataTable.js'][1038] = 0;
  _$jscoverage['vizapi/DataTable.js'][1039] = 0;
  _$jscoverage['vizapi/DataTable.js'][1042] = 0;
  _$jscoverage['vizapi/DataTable.js'][1043] = 0;
  _$jscoverage['vizapi/DataTable.js'][1044] = 0;
  _$jscoverage['vizapi/DataTable.js'][1045] = 0;
  _$jscoverage['vizapi/DataTable.js'][1046] = 0;
  _$jscoverage['vizapi/DataTable.js'][1048] = 0;
  _$jscoverage['vizapi/DataTable.js'][1049] = 0;
  _$jscoverage['vizapi/DataTable.js'][1050] = 0;
  _$jscoverage['vizapi/DataTable.js'][1051] = 0;
  _$jscoverage['vizapi/DataTable.js'][1055] = 0;
  _$jscoverage['vizapi/DataTable.js'][1059] = 0;
  _$jscoverage['vizapi/DataTable.js'][1060] = 0;
  _$jscoverage['vizapi/DataTable.js'][1061] = 0;
  _$jscoverage['vizapi/DataTable.js'][1062] = 0;
  _$jscoverage['vizapi/DataTable.js'][1063] = 0;
  _$jscoverage['vizapi/DataTable.js'][1064] = 0;
  _$jscoverage['vizapi/DataTable.js'][1067] = 0;
  _$jscoverage['vizapi/DataTable.js'][1068] = 0;
  _$jscoverage['vizapi/DataTable.js'][1069] = 0;
  _$jscoverage['vizapi/DataTable.js'][1071] = 0;
  _$jscoverage['vizapi/DataTable.js'][1074] = 0;
  _$jscoverage['vizapi/DataTable.js'][1076] = 0;
  _$jscoverage['vizapi/DataTable.js'][1084] = 0;
}
_$jscoverage['vizapi/DataTable.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\">pentaho.DataTable</span>","<span class=\"c\">pentaho.DataView</span>","","<span class=\"c\">Client-side non-visual data tables.</span>","","<span class=\"c\">author: James Dixon</span>","","<span class=\"c\">*/</span>","","pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"k\">{}</span> <span class=\"k\">:</span> pentaho<span class=\"k\">;</span>","","<span class=\"c\">/****************************************************</span>","<span class=\"c\">    pentaho.DataTable</span>","<span class=\"c\">    A client-side table object. </span>","<span class=\"c\">****************************************************/</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Constructor.</span>","<span class=\"c\">    jsonTable:      A CDA JSON table object or a Google DataTable JSON object</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> jsonTable <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable <span class=\"k\">=</span> jsonTable<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"pentaho.DataTable\"</span><span class=\"k\">;</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> jsonTable<span class=\"k\">.</span>metadata <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// convert from CDA to DataTable</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>convertCdaToDataTable<span class=\"k\">(</span>jsonTable<span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    convertCdaToDataTable</span>","<span class=\"c\">    Converts a CDA JSON table object to a Google DataTable JSON table object</span>","<span class=\"c\">    </span>","<span class=\"c\">    Input format</span>","<span class=\"c\">    {</span>","<span class=\"c\">        metadata: [</span>","<span class=\"c\">            { colName: 'col1', colType: 'STRING', colLabel: 'Column 1' },</span>","<span class=\"c\">            { colName: 'col2', colType: 'NUMERIC', colLabel: 'Column 2' }</span>","<span class=\"c\">        ],</span>","<span class=\"c\">        resultset: [</span>","<span class=\"c\">            [ 'Row1', 123 ],</span>","<span class=\"c\">            [ 'Row2', 456 ]</span>","<span class=\"c\">        ]</span>","<span class=\"c\">    }</span>","<span class=\"c\">    </span>","<span class=\"c\">    Output format</span>","<span class=\"c\">    {</span>","<span class=\"c\">        cols: [</span>","<span class=\"c\">            { id: 'col1', type: 'string', label: 'Column 1' },</span>","<span class=\"c\">            { id: 'col2', type: 'number', label: 'Column 2' },</span>","<span class=\"c\">        ],</span>","<span class=\"c\">        rows: [</span>","<span class=\"c\">            { c: [ {v: 'Row 1' }, {v: 123} ] },</span>","<span class=\"c\">            { c: [ {v: 'Row 2' }, {v: 456} ] }</span>","<span class=\"c\">        ]</span>","<span class=\"c\">    }</span>","<span class=\"c\">    </span>","<span class=\"c\">    cdaTable:   a CDA JSON table</span>","<span class=\"c\">    returns:    a Google DataTable JSON table object</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>convertCdaToDataTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> cdaTable <span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> cols <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"c\">// create the columns objects</span>","    <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> columnIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> columnIdx<span class=\"k\">&lt;</span>cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">.</span>length<span class=\"k\">;</span> columnIdx<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"c\">// create a column object</span>","        col <span class=\"k\">=</span> <span class=\"k\">{</span>","            id<span class=\"k\">:</span> cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>colName<span class=\"k\">,</span>","            type<span class=\"k\">:</span> cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>colType<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","            label<span class=\"k\">:</span> cdaTable<span class=\"k\">.</span>metadata<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>colLabel","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>col<span class=\"k\">.</span>label<span class=\"k\">)</span> <span class=\"k\">{</span>","            col<span class=\"k\">.</span>label <span class=\"k\">=</span> col<span class=\"k\">.</span>id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>col<span class=\"k\">.</span>type <span class=\"k\">==</span> <span class=\"s\">'numeric'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// convert 'numeric' to 'number' to be compatible with Google Charts</span>","            col<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">'number'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"c\">// add the column to the cols array</span>","        cols<span class=\"k\">.</span>push<span class=\"k\">(</span>col<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// now add the rows</span>","    <span class=\"k\">var</span> cdaData <span class=\"k\">=</span> cdaTable<span class=\"k\">.</span>resultset<span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> rowIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowIdx<span class=\"k\">&lt;</span>cdaData<span class=\"k\">.</span>length<span class=\"k\">;</span> rowIdx<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"c\">// create a cells array</span>","        <span class=\"k\">var</span> cells <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">var</span> cdaRow <span class=\"k\">=</span> cdaData<span class=\"k\">[</span>rowIdx<span class=\"k\">];</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> columnIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> columnIdx<span class=\"k\">&lt;</span>cdaRow<span class=\"k\">.</span>length<span class=\"k\">;</span> columnIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// add a value to the cells array</span>","            cells<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                v<span class=\"k\">:</span> cdaRow<span class=\"k\">[</span>columnIdx<span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">{</span>","            c<span class=\"k\">:</span> cells","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"c\">// add the row to the rows array</span>","        rows<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// returns the finished object</span>","    <span class=\"k\">return</span> <span class=\"k\">{</span>","        cols<span class=\"k\">:</span> cols<span class=\"k\">,</span>","        rows<span class=\"k\">:</span> rows","    <span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Add Java classnames in select places so that this data table can be</span>","<span class=\"c\">    deserialized from JSON into Java objects</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>makePostable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">[</span><span class=\"s\">\"class\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"org.pentaho.dataservice.DataTable\"</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>idx<span class=\"k\">][</span><span class=\"s\">\"class\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"org.pentaho.dataservice.Column\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> cells <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>idx<span class=\"k\">].</span>c<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> cells <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span><span class=\"k\">(</span> cellNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> cellNo<span class=\"k\">&lt;</span>cells<span class=\"k\">.</span>length<span class=\"k\">;</span> cellNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> cells<span class=\"k\">[</span>cellNo<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    cells<span class=\"k\">[</span>cellNo<span class=\"k\">][</span><span class=\"s\">\"class\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"org.pentaho.dataservice.Cell\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Returns the underlying JSON table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getJsonTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">;</span>","<span class=\"k\">}</span>"," ","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfColumns</span>","<span class=\"c\">    returns     The number of columns in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfRows</span>","<span class=\"c\">    returns     The number of rows in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnType</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The type of the specified column (number, string, date, boolean</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnType <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>type<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnId</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The id of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>id<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnLabel</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The label of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnLabel <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>label<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowIdx<span class=\"k\">,</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">])</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v <span class=\"k\">!==</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a value field so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">];</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Returns the cell object</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_getCell <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowIdx<span class=\"k\">,</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">])</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">];</span>","<span class=\"k\">}</span>","","","<span class=\"c\">/*</span>","<span class=\"c\">    getFormattedValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The formatted value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFormattedValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowIdx<span class=\"k\">,</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>f <span class=\"k\">!==</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a formatted value so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>f<span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v <span class=\"k\">!==</span> undefined <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a value field so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v<span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">].</span>v <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// we have a null value field so return it</span>","        <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">}</span> ","    <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>rows<span class=\"k\">[</span>rowIdx<span class=\"k\">].</span>c<span class=\"k\">[</span>columnIdx<span class=\"k\">];</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnRange</span>","<span class=\"c\">    Returns a range object describing the minimum and maximum values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    options      A keyword arguments object.</span>","<span class=\"c\">    options.key  A function that extracts the values from the column data.</span>","<span class=\"c\">    returns      A range object - { min: 123, max: 456 }.</span>","<span class=\"c\">                 When there is no data, or all data is null or NaN, the returned</span>","<span class=\"c\">                 range object will have both its properties, 'min' and 'max', </span>","<span class=\"c\">                 with the value undefined.</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnRange <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> min<span class=\"k\">;</span>","    <span class=\"k\">var</span> max<span class=\"k\">;</span>","    <span class=\"k\">var</span> set <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> key <span class=\"k\">=</span> options <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>key<span class=\"k\">;</span>","    ","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// get the value from this row</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">)</span><span class=\"k\">{</span>","                value <span class=\"k\">=</span> key<span class=\"k\">(</span>value<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(!</span>set<span class=\"k\">)</span> <span class=\"k\">{</span>","                min <span class=\"k\">=</span> value<span class=\"k\">;</span>","                max <span class=\"k\">=</span> value<span class=\"k\">;</span>","                set <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&lt;</span> min <span class=\"k\">)</span> <span class=\"k\">{</span>","                    min <span class=\"k\">=</span> value<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&gt;</span> max <span class=\"k\">)</span> <span class=\"k\">{</span>","                    max <span class=\"k\">=</span> value<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// return the range </span>","    <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">{</span>","        min<span class=\"k\">:</span> min<span class=\"k\">,</span>","        max<span class=\"k\">:</span> max","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> range<span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctValues</span>","<span class=\"c\">    Returns an array of the distinct values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     An array of the distinct values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> isNumber <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'number'</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> isNumber <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctFormattedValues</span>","<span class=\"c\">    Returns an array of the distinct formatted values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     an array of the distinct formatted values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctFormattedValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getFilteredRows</span>","<span class=\"c\">    Filters the rows of the table using the specified filter(s). Returns an array of the row numbers</span>","<span class=\"c\">    that met the filter criteria. The result can be passed to DataView.setRows to get a filtered table</span>","<span class=\"c\">    </span>","<span class=\"c\">    To filter on column 0 == 'France'</span>","<span class=\"c\">    var rows = dataTable.getFilteredRows({ column: 0, value: 'France' })</span>","<span class=\"c\">    var view = new pentaho.DataView( dataTable );</span>","<span class=\"c\">    view.setRows(rows)</span>","<span class=\"c\">    </span>","<span class=\"c\">    To combine France and Germany</span>","<span class=\"c\">    var rows = dataTable.getFilteredRows({ column: 0, combine: [{values:['France','Germany']}] })</span>","<span class=\"c\">    var view = new pentaho.DataView( dataTable );</span>","<span class=\"c\">    view.setRows(rows)</span>","<span class=\"c\">    </span>","<span class=\"c\">    Returns     an array of row nummbers of the rows that met the filter requirements</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFilteredRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>filters<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> comboMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// check each row</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> filterNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> filterNo<span class=\"k\">&lt;</span>filters<span class=\"k\">.</span>length<span class=\"k\">;</span> filterNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// check each filter</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>value <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// this is a 'filter by value'</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>column <span class=\"k\">)</span> <span class=\"k\">==</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>value <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// this row passes the filter requirements, add the row number to the rows array</span>","                    rows<span class=\"k\">.</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>combinations <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// this is a 'local combination of rows'</span>","                <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>column <span class=\"k\">);</span>","                <span class=\"k\">var</span> combinations <span class=\"k\">=</span> filters<span class=\"k\">[</span>filterNo<span class=\"k\">].</span>combinations<span class=\"k\">;</span>","                <span class=\"k\">var</span> combined <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">for</span><span class=\"k\">(</span> combinationNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> combinationNo<span class=\"k\">&lt;</span>combinations<span class=\"k\">.</span>length<span class=\"k\">;</span> combinationNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// check the values</span>","                    <span class=\"k\">for</span><span class=\"k\">(</span> valueNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> valueNo<span class=\"k\">&lt;</span>combinations<span class=\"k\">[</span>combinationNo<span class=\"k\">].</span>values<span class=\"k\">.</span>length<span class=\"k\">;</span> valueNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">==</span> combinations<span class=\"k\">[</span>combinationNo<span class=\"k\">].</span>values<span class=\"k\">[</span>valueNo<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"c\">// found something to combine</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span> comboMap<span class=\"k\">[</span>combinationNo<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                                comboMap<span class=\"k\">[</span>combinationNo<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                <span class=\"c\">// this is a new one</span>","                                <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'combine'</span><span class=\"k\">,[]];</span>","                                row<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                                rows<span class=\"k\">.</span>push<span class=\"k\">(</span> row <span class=\"k\">);</span>","                                comboMap<span class=\"k\">[</span>combinationNo<span class=\"k\">]</span> <span class=\"k\">=</span> row<span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                            combined <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>combined <span class=\"k\">)</span> <span class=\"k\">{</span>","                    rows<span class=\"k\">.</span>push<span class=\"k\">(</span> rowNo <span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> rows<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setColumnProperty</span>","<span class=\"c\">    Sets a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","<span class=\"c\">    value       The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> columnIndex <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> columnIndex <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIndex<span class=\"k\">][</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnProperty</span>","<span class=\"c\">    Returns a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","","<span class=\"c\">    Return      The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> columnIndex <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> columnIndex <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>jsonTable<span class=\"k\">.</span>cols<span class=\"k\">[</span>columnIndex<span class=\"k\">][</span>name<span class=\"k\">];</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/****************************************************</span>","<span class=\"c\">    pentaho.DataView</span>","<span class=\"c\">    A client-side data view object.</span>","<span class=\"c\">    Provides a way to access a subset of a DataTable.</span>","<span class=\"c\">    You can reduce the rows and/or columns of the</span>","<span class=\"c\">    underlying DataTable</span>","<span class=\"c\">****************************************************/</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    Constructor</span>","<span class=\"c\">    dataTable:  A DataTable object to base this view on</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span> dataTable <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataTable <span class=\"k\">=</span> dataTable<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"pentaho.DataView\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setRows</span>","<span class=\"c\">    Sets the row numbers of the rows to have in the view.</span>","<span class=\"c\">    The row numbers do not have to match the order of the</span>","<span class=\"c\">    underlying table.</span>","<span class=\"c\">    If this function is not called this DataView will include</span>","<span class=\"c\">    all the rows of the underlying DataTable.</span>","<span class=\"c\">    All of the row numbers must be within the range of valid</span>","<span class=\"c\">    row numbers for the DataTable.</span>","<span class=\"c\">    </span>","<span class=\"c\">    rows    An array of row numbers</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rows<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">=</span> rows<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setColumns</span>","<span class=\"c\">    Sets the column numbers to have in the view.</span>","<span class=\"c\">    The column numbers do not have to match the order of the</span>","<span class=\"c\">    columns in the underlying table.</span>","<span class=\"c\">    If this function is not called this DataView will include</span>","<span class=\"c\">    all the columns of the underlying DataTable.</span>","<span class=\"c\">    All of the columns numbers must be within the range of valid</span>","<span class=\"c\">    columns numbers for the DataTable.</span>","<span class=\"c\">    </span>","<span class=\"c\">    columns    An array of columns numbers</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columns<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">=</span> columns<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnRange</span>","<span class=\"c\">    Returns a range object describing the minimum and maximum values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    options      A keyword arguments object.</span>","<span class=\"c\">    options.key  A function that extracts the values from the column data.</span>","<span class=\"c\">    returns      A range object - { min: 123, max: 456 }.</span>","<span class=\"c\">                 When there is no data, or all data is null or NaN, the returned</span>","<span class=\"c\">                 range object will have both its properties, 'min' and 'max', </span>","<span class=\"c\">                 with the value undefined.</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnRange <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> min<span class=\"k\">;</span>","    <span class=\"k\">var</span> max<span class=\"k\">;</span>","    <span class=\"k\">var</span> set <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> key <span class=\"k\">=</span> options <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>key<span class=\"k\">;</span>","    ","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>key<span class=\"k\">)</span><span class=\"k\">{</span>","                value <span class=\"k\">=</span> key<span class=\"k\">(</span>value<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(!</span>set<span class=\"k\">)</span> <span class=\"k\">{</span>","                min <span class=\"k\">=</span> value<span class=\"k\">;</span>","                max <span class=\"k\">=</span> value<span class=\"k\">;</span>","                set <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&lt;</span> min <span class=\"k\">)</span> <span class=\"k\">{</span>","                    min <span class=\"k\">=</span> value<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span><span class=\"k\">(</span> value <span class=\"k\">&gt;</span> max <span class=\"k\">)</span> <span class=\"k\">{</span>","                    max <span class=\"k\">=</span> value<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> range <span class=\"k\">=</span> <span class=\"k\">{</span>","        min<span class=\"k\">:</span> min<span class=\"k\">,</span>","        max<span class=\"k\">:</span> max","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> range<span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctValues</span>","<span class=\"c\">    Returns an array of the distinct values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     An array of the distinct values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getDistinctFormattedValues</span>","<span class=\"c\">    Returns an array of the distinct formatted values from the specified column</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    Returns     an array of the distinct formatted values from the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getDistinctFormattedValues <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">var</span> valueMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowNo<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowNo<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowNo<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span> rowNo<span class=\"k\">,</span> columnIdx <span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span> <span class=\"k\">!</span>valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            valueMap<span class=\"k\">[</span>value<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            values<span class=\"k\">.</span>push<span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> values<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    hideColumns</span>","<span class=\"c\">    Removes columns from the view.</span>","<span class=\"c\">    The list of column numbers to hide must be in ascending order so the indexes don't shift as we delete.</span>","<span class=\"c\">    </span>","<span class=\"c\">    columns     An array of column numbers to hide</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hideColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columns<span class=\"k\">)</span> <span class=\"k\">{</span>","    tmpCols <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> columnIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> columnIdx <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> columnIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        tmpCols<span class=\"k\">.</span>push<span class=\"k\">(</span> columnIdx <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span>columns<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span> idx<span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span> idx<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        tmpCols<span class=\"k\">.</span>splice<span class=\"k\">(</span>columns<span class=\"k\">[</span>idx<span class=\"k\">],</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">=</span> tmpCols<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfRows</span>","<span class=\"c\">    returns     The number of rows in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfRows <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getNumberOfColumns</span>","<span class=\"c\">    returns     The number of columns in the table</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getNumberOfColumns <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnId</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The id of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnId <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>columnIdx<span class=\"k\">]);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnLabel</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The label of the specified column</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnLabel <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>columnIdx<span class=\"k\">]);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnType</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    returns     The type of the specified column (number, string, date, boolean</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnType <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>columnIdx<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnType<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>columnIdx<span class=\"k\">]);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowNo<span class=\"k\">,</span> colNo<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rowIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> rowNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">[</span>rowNo<span class=\"k\">];</span>","    <span class=\"k\">var</span> colIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> colNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>colNo<span class=\"k\">];</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> rowIdx<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> rowIdx<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'combine'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// this is a combined row</span>","","        <span class=\"k\">var</span> type <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>colNo<span class=\"k\">);</span>","        <span class=\"k\">var</span> value ","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'string'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"s\">' + '</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'number'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getValue<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","<span class=\"k\">}</span>","","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_getCell <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowNo<span class=\"k\">,</span> colNo<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rowIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> rowNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">[</span>rowNo<span class=\"k\">];</span>","    <span class=\"k\">var</span> colIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> colNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>colNo<span class=\"k\">];</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>_getCell<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getFormattedValue</span>","<span class=\"c\">    columnIdx   The column number (zero based)</span>","<span class=\"c\">    rowIdx      The row number (zero based)</span>","<span class=\"c\">    returns     The formatted value of the specified cell</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getFormattedValue <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rowNo<span class=\"k\">,</span> colNo<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> rowIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> rowNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>rows<span class=\"k\">[</span>rowNo<span class=\"k\">];</span>","    <span class=\"k\">var</span> colIdx <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> colNo <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>columns<span class=\"k\">[</span>colNo<span class=\"k\">];</span>","    <span class=\"k\">if</span><span class=\"k\">(</span> rowIdx<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> rowIdx<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"s\">'combine'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// this is a combined row</span>","","        <span class=\"k\">var</span> type <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>colNo<span class=\"k\">);</span>","        <span class=\"k\">var</span> value ","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> idx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> idx<span class=\"k\">&lt;</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">;</span> idx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span> idx <span class=\"k\">==</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'string'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"s\">' + '</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span> type <span class=\"k\">==</span> <span class=\"s\">'number'</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">][</span>idx<span class=\"k\">],</span> colIdx<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getFormattedValue<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    toDataTable</span>","<span class=\"c\">    Converts this view into a DataTable that has its own copy of the</span>","<span class=\"c\">    underlying data.</span>","<span class=\"c\">    The column metadata and the rows are copied into the new object.</span>","<span class=\"c\">    </span>","<span class=\"c\">    Returns:    A DataTable</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toDataTable <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> cols <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> colIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> colIdx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> colIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        col <span class=\"k\">=</span> <span class=\"k\">{</span>","            type<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>colIdx<span class=\"k\">),</span>","            id<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>colIdx<span class=\"k\">),</span>","            label<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>colIdx<span class=\"k\">)</span>","        <span class=\"k\">}</span>","        cols<span class=\"k\">.</span>push<span class=\"k\">(</span>col<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> rows <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> rowIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> rowIdx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span> rowIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        cells <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> colIdx<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> colIdx<span class=\"k\">&lt;</span><span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span> colIdx<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getCell<span class=\"k\">(</span>rowIdx<span class=\"k\">,</span> colIdx<span class=\"k\">);</span>","            cells<span class=\"k\">.</span>push<span class=\"k\">(</span>cell<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        row <span class=\"k\">=</span> <span class=\"k\">{</span>","            c<span class=\"k\">:</span> cells","        <span class=\"k\">}</span><span class=\"k\">;</span>","        rows<span class=\"k\">.</span>push<span class=\"k\">(</span> row <span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> json <span class=\"k\">=</span> <span class=\"k\">{</span> cols<span class=\"k\">:</span> cols<span class=\"k\">,</span> rows<span class=\"k\">:</span> rows <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">new</span> pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">(</span>json<span class=\"k\">);</span>","    <span class=\"k\">return</span> table<span class=\"k\">;</span>","","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    setColumnProperty</span>","<span class=\"c\">    Sets a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","<span class=\"c\">    value       The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>setColumnProperty<span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/*</span>","<span class=\"c\">    getColumnProperty</span>","<span class=\"c\">    Returns a column property</span>","","<span class=\"c\">    columnIndex The index of the column to set the property on</span>","<span class=\"c\">    name        The name of the property</span>","","<span class=\"c\">    Return      The value of the property</span>","<span class=\"c\">*/</span>","pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getColumnProperty <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataTable<span class=\"k\">.</span>getColumnProperty<span class=\"k\">(</span>columnIndex<span class=\"k\">,</span> name<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/* TRENDS */</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","    <span class=\"k\">function</span> argRequired<span class=\"k\">(</span>name<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Argument '\"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\"' is required.\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> argInvalid<span class=\"k\">(</span>name<span class=\"k\">,</span> text<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Argument '\"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\"' is invalid.\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>text <span class=\"k\">?</span> <span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> text<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">));</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">/* createTrend</span>","<span class=\"c\">     * Computes a trend of a given type and adds the </span>","<span class=\"c\">     * result to a new column in the data table.</span>","<span class=\"c\">     *  </span>","<span class=\"c\">     * trendArgs Keyword arguments</span>","<span class=\"c\">     * trendArgs.type  The type of trend to create; possible values: 'linear'</span>","<span class=\"c\">     * trendArgs.x     The index of the \"x\" value column; can be a numeric or string column</span>","<span class=\"c\">     * trendArgs.y     The index of the \"y\" value column; must be of a column of type 'number'</span>","<span class=\"c\">     * trendArgs.name  The name of the new trend column; defaults to the type of trend plus the suffix \"Trend\"</span>","<span class=\"c\">     * trendArgs.label The label of the new trend column; defaults to the trend name, if specified, or the default label of the trend type.</span>","<span class=\"c\">     * </span>","<span class=\"c\">     */</span>","    pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createTrend <span class=\"k\">=</span> ","    pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createTrend <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>trendArgs<span class=\"k\">)</span><span class=\"k\">{</span>","        ","        <span class=\"c\">// Validate arguments</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(!(</span>trendArgs <span class=\"k\">instanceof</span> Object<span class=\"k\">))</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'trendArgs'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">// ----</span>","        ","        <span class=\"k\">var</span> trendType <span class=\"k\">=</span> trendArgs<span class=\"k\">.</span>type<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>trendType<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'trendArgs.type'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        trendType <span class=\"k\">=</span> <span class=\"s\">''</span> <span class=\"k\">+</span> trendType<span class=\"k\">;</span> <span class=\"c\">// toString</span>","        ","        <span class=\"k\">var</span> trendInfo <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>trends<span class=\"k\">.</span>get<span class=\"k\">(</span>trendType<span class=\"k\">,</span> <span class=\"c\">/*assert*/</span> <span class=\"k\">true</span><span class=\"k\">);</span>","        ","        <span class=\"c\">// -----</span>","        ","        <span class=\"k\">var</span> colCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span>","        ","        <span class=\"k\">var</span> xIndex <span class=\"k\">=</span> trendArgs<span class=\"k\">.</span>x<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>xIndex <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'trendArgs.x'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        xIndex <span class=\"k\">=</span> <span class=\"k\">+</span>xIndex<span class=\"k\">;</span> <span class=\"c\">// toNumber</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>isNaN<span class=\"k\">(</span>xIndex<span class=\"k\">))</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argInvalid<span class=\"k\">(</span><span class=\"s\">'trendArgs.x'</span><span class=\"k\">,</span> <span class=\"s\">\"Not a number.\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span>xIndex <span class=\"k\">&lt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> xIndex <span class=\"k\">&gt;=</span> colCount<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argInvalid<span class=\"k\">(</span><span class=\"s\">'trendArgs.x'</span><span class=\"k\">,</span> <span class=\"s\">\"Out of range.\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">// can be numeric or string</span>","        ","        <span class=\"c\">// -----</span>","        ","        <span class=\"k\">var</span> yIndex <span class=\"k\">=</span> trendArgs<span class=\"k\">.</span>y<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>yIndex <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'trendArgs.y'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        yIndex <span class=\"k\">=</span> <span class=\"k\">+</span>yIndex<span class=\"k\">;</span> <span class=\"c\">// toNumber</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>isNaN<span class=\"k\">(</span>yIndex<span class=\"k\">))</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argInvalid<span class=\"k\">(</span><span class=\"s\">'trendArgs.y'</span><span class=\"k\">,</span> <span class=\"s\">\"Not a number.\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span>yIndex <span class=\"k\">&lt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> yIndex <span class=\"k\">&gt;=</span> colCount<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argInvalid<span class=\"k\">(</span><span class=\"s\">'trendArgs.y'</span><span class=\"k\">,</span> <span class=\"s\">\"Out of range.\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>yIndex<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'number'</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argInvalid<span class=\"k\">(</span><span class=\"s\">'trendArgs.y'</span><span class=\"k\">,</span> <span class=\"s\">\"Must be a numeric column.\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">// xIndex may be equal to yIndex...</span>","        ","        <span class=\"c\">// ----</span>","        ","        <span class=\"k\">var</span> trendName  <span class=\"k\">=</span> trendArgs<span class=\"k\">.</span>name  <span class=\"k\">||</span>","                         <span class=\"k\">(</span>trendType <span class=\"k\">+</span> <span class=\"s\">\"Trend\"</span><span class=\"k\">);</span>","        ","        <span class=\"k\">var</span> trendLabel <span class=\"k\">=</span> trendArgs<span class=\"k\">.</span>label <span class=\"k\">||</span>","                         <span class=\"k\">(</span>trendArgs<span class=\"k\">.</span>name <span class=\"k\">?</span>  trendName <span class=\"k\">:</span> trendInfo<span class=\"k\">.</span>label<span class=\"k\">);</span>","        ","        <span class=\"c\">// ----</span>","        ","        <span class=\"k\">var</span> trendOptions <span class=\"k\">=</span> trendArgs<span class=\"k\">.</span>options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        ","        <span class=\"c\">// ----</span>","        ","        <span class=\"c\">// Create the trend column. </span>","        <span class=\"c\">//   Am I a DataView or a DataTable?</span>","        <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>dataTable <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">).</span>jsonTable<span class=\"k\">;</span>","        <span class=\"k\">var</span> trendIndex <span class=\"k\">=</span> table<span class=\"k\">.</span>cols<span class=\"k\">.</span>length<span class=\"k\">;</span> ","        table<span class=\"k\">.</span>cols<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","            type<span class=\"k\">:</span>  <span class=\"s\">'number'</span><span class=\"k\">,</span>","            id<span class=\"k\">:</span>    trendName<span class=\"k\">,</span>","            label<span class=\"k\">:</span> trendLabel","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"c\">// ----</span>","        ","        <span class=\"k\">var</span> isXDiscrete <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>xIndex<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'number'</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> rowIndexesEnumtor <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getRowIndexEnumerator<span class=\"k\">();</span>","        ","        <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> funX <span class=\"k\">=</span> isXDiscrete <span class=\"k\">?</span> ","            <span class=\"k\">null</span> <span class=\"k\">:</span> <span class=\"c\">// means: \"use *index* as X value\"</span>","            <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>getValue<span class=\"k\">(</span>i<span class=\"k\">,</span> xIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> funY <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>getValue<span class=\"k\">(</span>i<span class=\"k\">,</span> yIndex<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> options <span class=\"k\">=</span> Object<span class=\"k\">.</span>create<span class=\"k\">(</span>trendOptions<span class=\"k\">);</span>","        options<span class=\"k\">.</span>rows <span class=\"k\">=</span> rowIndexesEnumtor<span class=\"k\">;</span>","        options<span class=\"k\">.</span>x <span class=\"k\">=</span> funX<span class=\"k\">;</span>","        options<span class=\"k\">.</span>y <span class=\"k\">=</span> funY<span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> trendModel <span class=\"k\">=</span> trendInfo<span class=\"k\">.</span>model<span class=\"k\">(</span>options<span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>trendModel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Not enough points to interpolate...</span>","            <span class=\"c\">// Fill every row's trend column with null</span>","            dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>row<span class=\"k\">)</span><span class=\"k\">{</span>","                row<span class=\"k\">.</span>c<span class=\"k\">[</span>trendIndex<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>v<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        dojo<span class=\"k\">.</span>forEach<span class=\"k\">(</span>table<span class=\"k\">.</span>rows<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>row<span class=\"k\">,</span> i<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> trendX <span class=\"k\">=</span> funX <span class=\"k\">?</span> funX<span class=\"k\">(</span>i<span class=\"k\">)</span> <span class=\"k\">:</span> i<span class=\"k\">;</span>","            <span class=\"k\">var</span> trendY <span class=\"k\">=</span> trendX <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">?</span>","                trendModel<span class=\"k\">.</span>sample<span class=\"k\">(</span>trendX<span class=\"k\">,</span> funY<span class=\"k\">(</span>i<span class=\"k\">),</span> i<span class=\"k\">)</span> <span class=\"k\">:</span> ","                <span class=\"k\">null</span><span class=\"k\">;</span>","            ","            row<span class=\"k\">.</span>c<span class=\"k\">[</span>trendIndex<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>v<span class=\"k\">:</span> trendY<span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">/* getRowIndexEnumerator</span>","<span class=\"c\">     * </span>","<span class=\"c\">     * Obtains an enumerator for the row index of the data table. </span>","<span class=\"c\">     */</span>","    pentaho<span class=\"k\">.</span>DataView<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getRowIndexEnumerator <span class=\"k\">=</span> ","    pentaho<span class=\"k\">.</span>DataTable<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getRowIndexEnumerator <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> index <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> count <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span>","        <span class=\"k\">var</span> enumtor <span class=\"k\">=</span> <span class=\"k\">{</span>","            item<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","            next<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>index <span class=\"k\">&lt;</span> count <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    enumtor<span class=\"k\">.</span>item <span class=\"k\">=</span> <span class=\"k\">++</span>index<span class=\"k\">;</span> <span class=\"c\">// the row index</span>","                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>enumtor<span class=\"k\">.</span>item<span class=\"k\">)</span> <span class=\"k\">{</span>","                    enumtor<span class=\"k\">.</span>item <span class=\"k\">=</span> undefined<span class=\"k\">;</span> ","                <span class=\"k\">}</span>","                ","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        ","        <span class=\"k\">return</span> enumtor<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","        ","    <span class=\"c\">/* trendType -&gt; trendInfo */</span>","    <span class=\"k\">var</span> _trends <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    pentaho<span class=\"k\">.</span>trends <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">/* define</span>","<span class=\"c\">     * Defines a trend type given its specification.</span>","<span class=\"c\">     * </span>","<span class=\"c\">     * type The type of trend to define.</span>","<span class=\"c\">     * spec The trend specification object.</span>","<span class=\"c\">     * spec.label A name for the type of trend; defaults to the capitalized trend type with the suffix \"Trend\".</span>","<span class=\"c\">     * spec.model A function that given a series of points computes a trend model.</span>","<span class=\"c\">     * </span>","<span class=\"c\">     */</span>","    pentaho<span class=\"k\">.</span>trends<span class=\"k\">.</span>define <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>type<span class=\"k\">,</span> spec<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'type'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        type <span class=\"k\">=</span> <span class=\"s\">''</span> <span class=\"k\">+</span> type<span class=\"k\">;</span> <span class=\"c\">// to string</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(!</span>spec<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'spec'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">// ----</span>","        ","        <span class=\"k\">var</span> model <span class=\"k\">=</span> spec<span class=\"k\">.</span>model<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>model<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'spec.model'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> model <span class=\"k\">!==</span> <span class=\"s\">'function'</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argInvalid<span class=\"k\">(</span><span class=\"s\">'spec.model'</span><span class=\"k\">,</span> <span class=\"s\">\"Not a function\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">// ----</span>","        ","        <span class=\"k\">var</span> label <span class=\"k\">=</span> spec<span class=\"k\">.</span>label<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>label<span class=\"k\">)</span><span class=\"k\">{</span>","            label <span class=\"k\">=</span> type<span class=\"k\">.</span>chartAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>toUpperCase<span class=\"k\">()</span> <span class=\"k\">+</span> type<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" Trend\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> trendInfo <span class=\"k\">=</span> <span class=\"k\">{</span>","           type<span class=\"k\">:</span>  type<span class=\"k\">,</span>","           label<span class=\"k\">:</span> label<span class=\"k\">,</span>","           model<span class=\"k\">:</span> model","        <span class=\"k\">}</span><span class=\"k\">;</span>","        ","        _trends<span class=\"k\">[</span>type<span class=\"k\">]</span> <span class=\"k\">=</span> trendInfo<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">/* get</span>","<span class=\"c\">     * Obtains the trend info object of a given trend type.</span>","<span class=\"c\">     * </span>","<span class=\"c\">     * type The type of trend desired.</span>","<span class=\"c\">     * assert If an error should be thrown if the trend type is not defined.</span>","<span class=\"c\">     */</span>","    pentaho<span class=\"k\">.</span>trends<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>type<span class=\"k\">,</span> assert<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argRequired<span class=\"k\">(</span><span class=\"s\">'type'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> trendInfo <span class=\"k\">=</span> _trends<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>type<span class=\"k\">)</span> <span class=\"k\">?</span> _trends<span class=\"k\">[</span>type<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>trendInfo <span class=\"k\">&amp;&amp;</span> assert<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">throw</span> argInvalid<span class=\"k\">(</span><span class=\"s\">'type'</span><span class=\"k\">,</span> <span class=\"s\">\"There is no trend type named '\"</span> <span class=\"k\">+</span> type <span class=\"k\">+</span> <span class=\"s\">\"'.\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> trendInfo<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">/* types</span>","<span class=\"c\">     * Obtains an array with the names of all defined trend types.</span>","<span class=\"c\">     */</span>","    pentaho<span class=\"k\">.</span>trends<span class=\"k\">.</span>types <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"c\">// TODO: replace with dojo or JavaScript's Object.keys implementation...</span>","        ","        <span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> p <span class=\"k\">in</span> _trends<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">.</span>call<span class=\"k\">(</span>_trends<span class=\"k\">,</span> p<span class=\"k\">))</span><span class=\"k\">{</span>","                ret<span class=\"k\">.</span>push<span class=\"k\">(</span>p<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> ret<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// --------------------</span>","    ","    <span class=\"k\">function</span> parseNum<span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> value <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">(+</span>value<span class=\"k\">)</span> <span class=\"k\">:</span> NaN<span class=\"k\">;</span>  <span class=\"c\">// to Number works for dates as well</span>","    <span class=\"k\">}</span>","  ","    pentaho<span class=\"k\">.</span>trends<span class=\"k\">.</span>define<span class=\"k\">(</span><span class=\"s\">'linear'</span><span class=\"k\">,</span> <span class=\"k\">{</span>","        label<span class=\"k\">:</span> <span class=\"s\">'Linear trend'</span><span class=\"k\">,</span>","        model<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> rowsQuery <span class=\"k\">=</span> options<span class=\"k\">.</span>rows<span class=\"k\">;</span>","            <span class=\"k\">var</span> funX <span class=\"k\">=</span> options<span class=\"k\">.</span>x<span class=\"k\">;</span>","            <span class=\"k\">var</span> funY <span class=\"k\">=</span> options<span class=\"k\">.</span>y<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> N <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> sumX  <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> sumY  <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> sumXY <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> sumXX <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            ","            <span class=\"k\">while</span><span class=\"k\">(</span>rowsQuery<span class=\"k\">.</span>next<span class=\"k\">())</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> row <span class=\"k\">=</span> rowsQuery<span class=\"k\">.</span>item<span class=\"k\">;</span>","                ","                <span class=\"c\">// Ignore null &amp;&amp; NaN values</span>","                <span class=\"k\">var</span> x <span class=\"k\">=</span> funX <span class=\"k\">?</span> parseNum<span class=\"k\">(</span>funX<span class=\"k\">(</span>row<span class=\"k\">))</span> <span class=\"k\">:</span> i<span class=\"k\">;</span> <span class=\"c\">// use the index itself for discrete stuff</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>isNaN<span class=\"k\">(</span>x<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> y <span class=\"k\">=</span> parseNum<span class=\"k\">(</span>funY<span class=\"k\">(</span>row<span class=\"k\">));</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>isNaN<span class=\"k\">(</span>y<span class=\"k\">))</span><span class=\"k\">{</span>","                        N<span class=\"k\">++;</span>","                        ","                        sumX  <span class=\"k\">+=</span> x<span class=\"k\">;</span>","                        sumY  <span class=\"k\">+=</span> y<span class=\"k\">;</span>","                        sumXY <span class=\"k\">+=</span> x <span class=\"k\">*</span> y<span class=\"k\">;</span>","                        sumXX <span class=\"k\">+=</span> x <span class=\"k\">*</span> x<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                ","                i<span class=\"k\">++;</span> <span class=\"c\">// Discrete nulls must still increment the index</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// y = alpha + beta * x</span>","            <span class=\"k\">var</span> alpha<span class=\"k\">,</span> beta<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>N <span class=\"k\">&gt;=</span> <span class=\"s\">2</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> avgX  <span class=\"k\">=</span> sumX  <span class=\"k\">/</span> N<span class=\"k\">;</span>","                <span class=\"k\">var</span> avgY  <span class=\"k\">=</span> sumY  <span class=\"k\">/</span> N<span class=\"k\">;</span>","                <span class=\"k\">var</span> avgXY <span class=\"k\">=</span> sumXY <span class=\"k\">/</span> N<span class=\"k\">;</span>","                <span class=\"k\">var</span> avgXX <span class=\"k\">=</span> sumXX <span class=\"k\">/</span> N<span class=\"k\">;</span>","            ","                <span class=\"c\">// When N === 1 =&gt; den = 0</span>","                <span class=\"k\">var</span> den <span class=\"k\">=</span> <span class=\"k\">(</span>avgXX <span class=\"k\">-</span> avgX <span class=\"k\">*</span> avgX<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>den <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    beta <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    beta <span class=\"k\">=</span> <span class=\"k\">(</span>avgXY <span class=\"k\">-</span> <span class=\"k\">(</span>avgX <span class=\"k\">*</span> avgY<span class=\"k\">))</span> <span class=\"k\">/</span> den<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                alpha <span class=\"k\">=</span> avgY <span class=\"k\">-</span> beta <span class=\"k\">*</span> avgX<span class=\"k\">;</span>","                ","                <span class=\"k\">return</span> <span class=\"k\">{</span>","                    alpha<span class=\"k\">:</span> alpha<span class=\"k\">,</span>","                    beta<span class=\"k\">:</span>  beta<span class=\"k\">,</span>","                    ","                    reset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{}</span><span class=\"k\">,</span>","                    ","                    <span class=\"c\">// y = alpha + beta * x</span>","                    sample<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>x<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> alpha <span class=\"k\">+</span> beta <span class=\"k\">*</span> <span class=\"k\">(+</span>x<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","<span class=\"k\">}</span><span class=\"k\">());</span>"];
_$jscoverage['vizapi/DataTable.js'][11]++;
pentaho = (((typeof pentaho) == "undefined")? {}: pentaho);
_$jscoverage['vizapi/DataTable.js'][22]++;
pentaho.DataTable = (function (jsonTable) {
  _$jscoverage['vizapi/DataTable.js'][23]++;
  this.jsonTable = jsonTable;
  _$jscoverage['vizapi/DataTable.js'][24]++;
  this.className = "pentaho.DataTable";
  _$jscoverage['vizapi/DataTable.js'][25]++;
  if (jsonTable.metadata) {
    _$jscoverage['vizapi/DataTable.js'][27]++;
    this.jsonTable = pentaho.DataTable.convertCdaToDataTable(jsonTable);
  }
});
_$jscoverage['vizapi/DataTable.js'][62]++;
pentaho.DataTable.convertCdaToDataTable = (function (cdaTable) {
  _$jscoverage['vizapi/DataTable.js'][64]++;
  var cols = [];
  _$jscoverage['vizapi/DataTable.js'][65]++;
  var rows = [];
  _$jscoverage['vizapi/DataTable.js'][68]++;
  for (var columnIdx = 0; (columnIdx < cdaTable.metadata.length); (columnIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][70]++;
    col = {id: cdaTable.metadata[columnIdx].colName, type: cdaTable.metadata[columnIdx].colType.toLowerCase(), label: cdaTable.metadata[columnIdx].colLabel};
    _$jscoverage['vizapi/DataTable.js'][75]++;
    if ((! col.label)) {
      _$jscoverage['vizapi/DataTable.js'][76]++;
      col.label = col.id;
    }
    _$jscoverage['vizapi/DataTable.js'][78]++;
    if ((col.type == "numeric")) {
      _$jscoverage['vizapi/DataTable.js'][80]++;
      col.type = "number";
    }
    _$jscoverage['vizapi/DataTable.js'][83]++;
    cols.push(col);
}
  _$jscoverage['vizapi/DataTable.js'][87]++;
  var cdaData = cdaTable.resultset;
  _$jscoverage['vizapi/DataTable.js'][88]++;
  for (var rowIdx = 0; (rowIdx < cdaData.length); (rowIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][90]++;
    var cells = [];
    _$jscoverage['vizapi/DataTable.js'][91]++;
    var cdaRow = cdaData[rowIdx];
    _$jscoverage['vizapi/DataTable.js'][92]++;
    for (columnIdx = 0; (columnIdx < cdaRow.length); (columnIdx++)) {
      _$jscoverage['vizapi/DataTable.js'][94]++;
      cells.push({v: cdaRow[columnIdx]});
}
    _$jscoverage['vizapi/DataTable.js'][98]++;
    var row = {c: cells};
    _$jscoverage['vizapi/DataTable.js'][102]++;
    rows.push(row);
}
  _$jscoverage['vizapi/DataTable.js'][106]++;
  return ({cols: cols, rows: rows});
});
_$jscoverage['vizapi/DataTable.js'][117]++;
pentaho.DataTable.prototype.makePostable = (function () {
  _$jscoverage['vizapi/DataTable.js'][118]++;
  this.jsonTable["class"] = "org.pentaho.dataservice.DataTable";
  _$jscoverage['vizapi/DataTable.js'][119]++;
  for (var idx = 0; (idx < this.getNumberOfColumns()); (idx++)) {
    _$jscoverage['vizapi/DataTable.js'][120]++;
    this.jsonTable.cols[idx]["class"] = "org.pentaho.dataservice.Column";
}
  _$jscoverage['vizapi/DataTable.js'][122]++;
  for (var idx = 0; (idx < this.getNumberOfRows()); (idx++)) {
    _$jscoverage['vizapi/DataTable.js'][123]++;
    var cells = this.jsonTable.rows[idx].c;
    _$jscoverage['vizapi/DataTable.js'][124]++;
    if (cells) {
      _$jscoverage['vizapi/DataTable.js'][125]++;
      for (cellNo = 0; (cellNo < cells.length); (cellNo++)) {
        _$jscoverage['vizapi/DataTable.js'][126]++;
        if (cells[cellNo]) {
          _$jscoverage['vizapi/DataTable.js'][127]++;
          cells[cellNo]["class"] = "org.pentaho.dataservice.Cell";
        }
}
    }
}
});
_$jscoverage['vizapi/DataTable.js'][137]++;
pentaho.DataTable.prototype.getJsonTable = (function () {
  _$jscoverage['vizapi/DataTable.js'][138]++;
  return this.jsonTable;
});
_$jscoverage['vizapi/DataTable.js'][145]++;
pentaho.DataTable.prototype.getNumberOfColumns = (function () {
  _$jscoverage['vizapi/DataTable.js'][146]++;
  return this.jsonTable.cols.length;
});
_$jscoverage['vizapi/DataTable.js'][153]++;
pentaho.DataTable.prototype.getNumberOfRows = (function () {
  _$jscoverage['vizapi/DataTable.js'][154]++;
  return this.jsonTable.rows.length;
});
_$jscoverage['vizapi/DataTable.js'][162]++;
pentaho.DataTable.prototype.getColumnType = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][163]++;
  return this.jsonTable.cols[columnIdx].type;
});
_$jscoverage['vizapi/DataTable.js'][171]++;
pentaho.DataTable.prototype.getColumnId = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][172]++;
  return this.jsonTable.cols[columnIdx].id;
});
_$jscoverage['vizapi/DataTable.js'][180]++;
pentaho.DataTable.prototype.getColumnLabel = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][181]++;
  return this.jsonTable.cols[columnIdx].label;
});
_$jscoverage['vizapi/DataTable.js'][190]++;
pentaho.DataTable.prototype.getValue = (function (rowIdx, columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][191]++;
  if ((! this.jsonTable.rows[rowIdx].c[columnIdx])) {
    _$jscoverage['vizapi/DataTable.js'][192]++;
    return null;
  }
  _$jscoverage['vizapi/DataTable.js'][194]++;
  if ((this.jsonTable.rows[rowIdx].c[columnIdx].v !== undefined)) {
    _$jscoverage['vizapi/DataTable.js'][196]++;
    return this.jsonTable.rows[rowIdx].c[columnIdx].v;
  }
  else {
    _$jscoverage['vizapi/DataTable.js'][198]++;
    return this.jsonTable.rows[rowIdx].c[columnIdx];
  }
});
_$jscoverage['vizapi/DataTable.js'][205]++;
pentaho.DataTable.prototype._getCell = (function (rowIdx, columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][206]++;
  if ((! this.jsonTable.rows[rowIdx].c[columnIdx])) {
    _$jscoverage['vizapi/DataTable.js'][207]++;
    return null;
  }
  _$jscoverage['vizapi/DataTable.js'][209]++;
  return this.jsonTable.rows[rowIdx].c[columnIdx];
});
_$jscoverage['vizapi/DataTable.js'][219]++;
pentaho.DataTable.prototype.getFormattedValue = (function (rowIdx, columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][220]++;
  if ((! this.jsonTable.rows[rowIdx].c[columnIdx])) {
    _$jscoverage['vizapi/DataTable.js'][221]++;
    return null;
  }
  else {
    _$jscoverage['vizapi/DataTable.js'][223]++;
    if ((this.jsonTable.rows[rowIdx].c[columnIdx].f !== undefined)) {
      _$jscoverage['vizapi/DataTable.js'][225]++;
      return this.jsonTable.rows[rowIdx].c[columnIdx].f;
    }
    else {
      _$jscoverage['vizapi/DataTable.js'][227]++;
      if ((this.jsonTable.rows[rowIdx].c[columnIdx].v !== undefined)) {
        _$jscoverage['vizapi/DataTable.js'][229]++;
        return this.jsonTable.rows[rowIdx].c[columnIdx].v;
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][231]++;
        if ((this.jsonTable.rows[rowIdx].c[columnIdx].v == null)) {
          _$jscoverage['vizapi/DataTable.js'][233]++;
          return null;
        }
        else {
          _$jscoverage['vizapi/DataTable.js'][236]++;
          return this.jsonTable.rows[rowIdx].c[columnIdx];
        }
      }
    }
  }
});
_$jscoverage['vizapi/DataTable.js'][251]++;
pentaho.DataTable.prototype.getColumnRange = (function (columnIdx, options) {
  _$jscoverage['vizapi/DataTable.js'][253]++;
  var min;
  _$jscoverage['vizapi/DataTable.js'][254]++;
  var max;
  _$jscoverage['vizapi/DataTable.js'][255]++;
  var set = false;
  _$jscoverage['vizapi/DataTable.js'][256]++;
  var key = (options && options.key);
  _$jscoverage['vizapi/DataTable.js'][258]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][260]++;
    var value = this.getValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][261]++;
    if ((value != null)) {
      _$jscoverage['vizapi/DataTable.js'][262]++;
      if (key) {
        _$jscoverage['vizapi/DataTable.js'][263]++;
        value = key(value);
      }
      _$jscoverage['vizapi/DataTable.js'][266]++;
      if ((! set)) {
        _$jscoverage['vizapi/DataTable.js'][267]++;
        min = value;
        _$jscoverage['vizapi/DataTable.js'][268]++;
        max = value;
        _$jscoverage['vizapi/DataTable.js'][269]++;
        set = true;
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][271]++;
        if ((value < min)) {
          _$jscoverage['vizapi/DataTable.js'][272]++;
          min = value;
        }
        _$jscoverage['vizapi/DataTable.js'][274]++;
        if ((value > max)) {
          _$jscoverage['vizapi/DataTable.js'][275]++;
          max = value;
        }
      }
    }
}
  _$jscoverage['vizapi/DataTable.js'][282]++;
  var range = {min: min, max: max};
  _$jscoverage['vizapi/DataTable.js'][286]++;
  return range;
});
_$jscoverage['vizapi/DataTable.js'][296]++;
pentaho.DataTable.prototype.getDistinctValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][297]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][298]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][299]++;
  var isNumber = (this.getColumnType(columnIdx) == "number");
  _$jscoverage['vizapi/DataTable.js'][300]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][301]++;
    var value = (isNumber? this.getValue(rowNo, columnIdx): this.getFormattedValue(rowNo, columnIdx));
    _$jscoverage['vizapi/DataTable.js'][302]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][303]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][304]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][307]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][316]++;
pentaho.DataTable.prototype.getDistinctFormattedValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][317]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][318]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][319]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][320]++;
    var value = this.getFormattedValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][321]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][322]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][323]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][326]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][346]++;
pentaho.DataTable.prototype.getFilteredRows = (function (filters) {
  _$jscoverage['vizapi/DataTable.js'][347]++;
  var rows = [];
  _$jscoverage['vizapi/DataTable.js'][348]++;
  var comboMap = {};
  _$jscoverage['vizapi/DataTable.js'][349]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][350]++;
    for (var filterNo = 0; (filterNo < filters.length); (filterNo++)) {
      _$jscoverage['vizapi/DataTable.js'][351]++;
      if (filters[filterNo].value) {
        _$jscoverage['vizapi/DataTable.js'][353]++;
        if ((this.getValue(rowNo, filters[filterNo].column) == filters[filterNo].value)) {
          _$jscoverage['vizapi/DataTable.js'][355]++;
          rows.push(rowNo);
        }
      }
      _$jscoverage['vizapi/DataTable.js'][358]++;
      if (filters[filterNo].combinations) {
        _$jscoverage['vizapi/DataTable.js'][360]++;
        var value = this.getValue(rowNo, filters[filterNo].column);
        _$jscoverage['vizapi/DataTable.js'][361]++;
        var combinations = filters[filterNo].combinations;
        _$jscoverage['vizapi/DataTable.js'][362]++;
        var combined = false;
        _$jscoverage['vizapi/DataTable.js'][363]++;
        for (combinationNo = 0; (combinationNo < combinations.length); (combinationNo++)) {
          _$jscoverage['vizapi/DataTable.js'][365]++;
          for (valueNo = 0; (valueNo < combinations[combinationNo].values.length); (valueNo++)) {
            _$jscoverage['vizapi/DataTable.js'][366]++;
            if ((value == combinations[combinationNo].values[valueNo])) {
              _$jscoverage['vizapi/DataTable.js'][368]++;
              if (comboMap[combinationNo]) {
                _$jscoverage['vizapi/DataTable.js'][369]++;
                comboMap[combinationNo][1].push(rowNo);
              }
              else {
                _$jscoverage['vizapi/DataTable.js'][372]++;
                var row = ["combine", []];
                _$jscoverage['vizapi/DataTable.js'][373]++;
                row[1].push(rowNo);
                _$jscoverage['vizapi/DataTable.js'][374]++;
                rows.push(row);
                _$jscoverage['vizapi/DataTable.js'][375]++;
                comboMap[combinationNo] = row;
              }
              _$jscoverage['vizapi/DataTable.js'][377]++;
              combined = true;
            }
}
}
        _$jscoverage['vizapi/DataTable.js'][381]++;
        if ((! combined)) {
          _$jscoverage['vizapi/DataTable.js'][382]++;
          rows.push(rowNo);
        }
      }
}
}
  _$jscoverage['vizapi/DataTable.js'][387]++;
  return rows;
});
_$jscoverage['vizapi/DataTable.js'][398]++;
pentaho.DataTable.prototype.setColumnProperty = (function (columnIndex, name, value) {
  _$jscoverage['vizapi/DataTable.js'][399]++;
  if (((columnIndex >= 0) && (columnIndex < this.jsonTable.cols.length))) {
    _$jscoverage['vizapi/DataTable.js'][400]++;
    this.jsonTable.cols[columnIndex][name] = value;
  }
});
_$jscoverage['vizapi/DataTable.js'][413]++;
pentaho.DataTable.prototype.getColumnProperty = (function (columnIndex, name) {
  _$jscoverage['vizapi/DataTable.js'][414]++;
  if (((columnIndex >= 0) && (columnIndex < this.jsonTable.cols.length))) {
    _$jscoverage['vizapi/DataTable.js'][415]++;
    return this.jsonTable.cols[columnIndex][name];
  }
  _$jscoverage['vizapi/DataTable.js'][417]++;
  return null;
});
_$jscoverage['vizapi/DataTable.js'][432]++;
pentaho.DataView = (function (dataTable) {
  _$jscoverage['vizapi/DataTable.js'][433]++;
  this.dataTable = dataTable;
  _$jscoverage['vizapi/DataTable.js'][434]++;
  this.rows = null;
  _$jscoverage['vizapi/DataTable.js'][435]++;
  this.columns = null;
  _$jscoverage['vizapi/DataTable.js'][436]++;
  this.className = "pentaho.DataView";
});
_$jscoverage['vizapi/DataTable.js'][451]++;
pentaho.DataView.prototype.setRows = (function (rows) {
  _$jscoverage['vizapi/DataTable.js'][452]++;
  this.rows = rows;
});
_$jscoverage['vizapi/DataTable.js'][467]++;
pentaho.DataView.prototype.setColumns = (function (columns) {
  _$jscoverage['vizapi/DataTable.js'][468]++;
  this.columns = columns;
});
_$jscoverage['vizapi/DataTable.js'][482]++;
pentaho.DataView.prototype.getColumnRange = (function (columnIdx, options) {
  _$jscoverage['vizapi/DataTable.js'][484]++;
  var min;
  _$jscoverage['vizapi/DataTable.js'][485]++;
  var max;
  _$jscoverage['vizapi/DataTable.js'][486]++;
  var set = false;
  _$jscoverage['vizapi/DataTable.js'][487]++;
  var key = (options && options.key);
  _$jscoverage['vizapi/DataTable.js'][489]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][490]++;
    var value = this.getValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][491]++;
    if ((value != null)) {
      _$jscoverage['vizapi/DataTable.js'][492]++;
      if (key) {
        _$jscoverage['vizapi/DataTable.js'][493]++;
        value = key(value);
      }
      _$jscoverage['vizapi/DataTable.js'][496]++;
      if ((! set)) {
        _$jscoverage['vizapi/DataTable.js'][497]++;
        min = value;
        _$jscoverage['vizapi/DataTable.js'][498]++;
        max = value;
        _$jscoverage['vizapi/DataTable.js'][499]++;
        set = true;
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][501]++;
        if ((value < min)) {
          _$jscoverage['vizapi/DataTable.js'][502]++;
          min = value;
        }
        _$jscoverage['vizapi/DataTable.js'][504]++;
        if ((value > max)) {
          _$jscoverage['vizapi/DataTable.js'][505]++;
          max = value;
        }
      }
    }
}
  _$jscoverage['vizapi/DataTable.js'][510]++;
  var range = {min: min, max: max};
  _$jscoverage['vizapi/DataTable.js'][514]++;
  return range;
});
_$jscoverage['vizapi/DataTable.js'][524]++;
pentaho.DataView.prototype.getDistinctValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][525]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][526]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][527]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][528]++;
    var value = this.getValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][529]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][530]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][531]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][534]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][543]++;
pentaho.DataView.prototype.getDistinctFormattedValues = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][544]++;
  var values = [];
  _$jscoverage['vizapi/DataTable.js'][545]++;
  var valueMap = {};
  _$jscoverage['vizapi/DataTable.js'][546]++;
  for (var rowNo = 0; (rowNo < this.getNumberOfRows()); (rowNo++)) {
    _$jscoverage['vizapi/DataTable.js'][547]++;
    var value = this.getFormattedValue(rowNo, columnIdx);
    _$jscoverage['vizapi/DataTable.js'][548]++;
    if ((! valueMap[value])) {
      _$jscoverage['vizapi/DataTable.js'][549]++;
      valueMap[value] = true;
      _$jscoverage['vizapi/DataTable.js'][550]++;
      values.push(value);
    }
}
  _$jscoverage['vizapi/DataTable.js'][553]++;
  return values;
});
_$jscoverage['vizapi/DataTable.js'][563]++;
pentaho.DataView.prototype.hideColumns = (function (columns) {
  _$jscoverage['vizapi/DataTable.js'][564]++;
  tmpCols = [];
  _$jscoverage['vizapi/DataTable.js'][565]++;
  for (var columnIdx = 0; (columnIdx < this.getNumberOfColumns()); (columnIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][566]++;
    tmpCols.push(columnIdx);
}
  _$jscoverage['vizapi/DataTable.js'][568]++;
  for (var idx = (columns.length - 1); (idx > -1); (idx--)) {
    _$jscoverage['vizapi/DataTable.js'][569]++;
    tmpCols.splice(columns[idx], 1);
}
  _$jscoverage['vizapi/DataTable.js'][571]++;
  this.columns = tmpCols;
});
_$jscoverage['vizapi/DataTable.js'][578]++;
pentaho.DataView.prototype.getNumberOfRows = (function () {
  _$jscoverage['vizapi/DataTable.js'][579]++;
  return ((this.rows == null)? this.dataTable.getNumberOfRows(): this.rows.length);
});
_$jscoverage['vizapi/DataTable.js'][586]++;
pentaho.DataView.prototype.getNumberOfColumns = (function () {
  _$jscoverage['vizapi/DataTable.js'][587]++;
  return ((this.columns == null)? this.dataTable.getNumberOfColumns(): this.columns.length);
});
_$jscoverage['vizapi/DataTable.js'][595]++;
pentaho.DataView.prototype.getColumnId = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][596]++;
  return ((this.columns == null)? this.dataTable.getColumnId(columnIdx): this.dataTable.getColumnId(this.columns[columnIdx]));
});
_$jscoverage['vizapi/DataTable.js'][604]++;
pentaho.DataView.prototype.getColumnLabel = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][605]++;
  return ((this.columns == null)? this.dataTable.getColumnLabel(columnIdx): this.dataTable.getColumnLabel(this.columns[columnIdx]));
});
_$jscoverage['vizapi/DataTable.js'][613]++;
pentaho.DataView.prototype.getColumnType = (function (columnIdx) {
  _$jscoverage['vizapi/DataTable.js'][614]++;
  return ((this.columns == null)? this.dataTable.getColumnType(columnIdx): this.dataTable.getColumnType(this.columns[columnIdx]));
});
_$jscoverage['vizapi/DataTable.js'][623]++;
pentaho.DataView.prototype.getValue = (function (rowNo, colNo) {
  _$jscoverage['vizapi/DataTable.js'][624]++;
  var rowIdx = ((this.rows == null)? rowNo: this.rows[rowNo]);
  _$jscoverage['vizapi/DataTable.js'][625]++;
  var colIdx = ((this.columns == null)? colNo: this.columns[colNo]);
  _$jscoverage['vizapi/DataTable.js'][626]++;
  if ((rowIdx.length && (rowIdx[0] == "combine"))) {
    _$jscoverage['vizapi/DataTable.js'][629]++;
    var type = this.getColumnType(colNo);
    _$jscoverage['vizapi/DataTable.js'][630]++;
    var value;
    _$jscoverage['vizapi/DataTable.js'][631]++;
    for (var idx = 0; (idx < rowIdx[1].length); (idx++)) {
      _$jscoverage['vizapi/DataTable.js'][632]++;
      if ((idx == 0)) {
        _$jscoverage['vizapi/DataTable.js'][633]++;
        value = this.dataTable.getValue(rowIdx[1][idx], colIdx);
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][635]++;
        if ((type == "string")) {
          _$jscoverage['vizapi/DataTable.js'][636]++;
          value += (" + " + this.dataTable.getValue(rowIdx[1][idx], colIdx));
        }
        else {
          _$jscoverage['vizapi/DataTable.js'][638]++;
          if ((type == "number")) {
            _$jscoverage['vizapi/DataTable.js'][639]++;
            value += this.dataTable.getValue(rowIdx[1][idx], colIdx);
          }
        }
      }
}
    _$jscoverage['vizapi/DataTable.js'][642]++;
    return value;
  }
  _$jscoverage['vizapi/DataTable.js'][644]++;
  return this.dataTable.getValue(rowIdx, colIdx);
});
_$jscoverage['vizapi/DataTable.js'][647]++;
pentaho.DataView.prototype._getCell = (function (rowNo, colNo) {
  _$jscoverage['vizapi/DataTable.js'][648]++;
  var rowIdx = ((this.rows == null)? rowNo: this.rows[rowNo]);
  _$jscoverage['vizapi/DataTable.js'][649]++;
  var colIdx = ((this.columns == null)? colNo: this.columns[colNo]);
  _$jscoverage['vizapi/DataTable.js'][650]++;
  return this.dataTable._getCell(rowIdx, colIdx);
});
_$jscoverage['vizapi/DataTable.js'][659]++;
pentaho.DataView.prototype.getFormattedValue = (function (rowNo, colNo) {
  _$jscoverage['vizapi/DataTable.js'][660]++;
  var rowIdx = ((this.rows == null)? rowNo: this.rows[rowNo]);
  _$jscoverage['vizapi/DataTable.js'][661]++;
  var colIdx = ((this.columns == null)? colNo: this.columns[colNo]);
  _$jscoverage['vizapi/DataTable.js'][662]++;
  if ((rowIdx.length && (rowIdx[0] == "combine"))) {
    _$jscoverage['vizapi/DataTable.js'][665]++;
    var type = this.getColumnType(colNo);
    _$jscoverage['vizapi/DataTable.js'][666]++;
    var value;
    _$jscoverage['vizapi/DataTable.js'][667]++;
    for (var idx = 0; (idx < rowIdx[1].length); (idx++)) {
      _$jscoverage['vizapi/DataTable.js'][668]++;
      if ((idx == 0)) {
        _$jscoverage['vizapi/DataTable.js'][669]++;
        value = this.dataTable.getFormattedValue(rowIdx[1][idx], colIdx);
      }
      else {
        _$jscoverage['vizapi/DataTable.js'][671]++;
        if ((type == "string")) {
          _$jscoverage['vizapi/DataTable.js'][672]++;
          value += (" + " + this.dataTable.getFormattedValue(rowIdx[1][idx], colIdx));
        }
        else {
          _$jscoverage['vizapi/DataTable.js'][674]++;
          if ((type == "number")) {
            _$jscoverage['vizapi/DataTable.js'][675]++;
            value += this.dataTable.getFormattedValue(rowIdx[1][idx], colIdx);
          }
        }
      }
}
    _$jscoverage['vizapi/DataTable.js'][678]++;
    return value;
  }
  _$jscoverage['vizapi/DataTable.js'][680]++;
  return this.dataTable.getFormattedValue(rowIdx, colIdx);
});
_$jscoverage['vizapi/DataTable.js'][691]++;
pentaho.DataView.prototype.toDataTable = (function () {
  _$jscoverage['vizapi/DataTable.js'][693]++;
  var cols = [];
  _$jscoverage['vizapi/DataTable.js'][694]++;
  for (var colIdx = 0; (colIdx < this.getNumberOfColumns()); (colIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][695]++;
    col = {type: this.getColumnType(colIdx), id: this.getColumnId(colIdx), label: this.getColumnLabel(colIdx)};
    _$jscoverage['vizapi/DataTable.js'][700]++;
    cols.push(col);
}
  _$jscoverage['vizapi/DataTable.js'][703]++;
  var rows = [];
  _$jscoverage['vizapi/DataTable.js'][704]++;
  for (var rowIdx = 0; (rowIdx < this.getNumberOfRows()); (rowIdx++)) {
    _$jscoverage['vizapi/DataTable.js'][705]++;
    cells = [];
    _$jscoverage['vizapi/DataTable.js'][706]++;
    for (var colIdx = 0; (colIdx < this.getNumberOfColumns()); (colIdx++)) {
      _$jscoverage['vizapi/DataTable.js'][707]++;
      var cell = this._getCell(rowIdx, colIdx);
      _$jscoverage['vizapi/DataTable.js'][708]++;
      cells.push(cell);
}
    _$jscoverage['vizapi/DataTable.js'][710]++;
    row = {c: cells};
    _$jscoverage['vizapi/DataTable.js'][713]++;
    rows.push(row);
}
  _$jscoverage['vizapi/DataTable.js'][716]++;
  var json = {cols: cols, rows: rows};
  _$jscoverage['vizapi/DataTable.js'][718]++;
  var table = new (pentaho.DataTable)(json);
  _$jscoverage['vizapi/DataTable.js'][719]++;
  return table;
});
_$jscoverage['vizapi/DataTable.js'][731]++;
pentaho.DataView.prototype.setColumnProperty = (function (columnIndex, name, value) {
  _$jscoverage['vizapi/DataTable.js'][732]++;
  this.dataTable.setColumnProperty(columnIndex, name, value);
});
_$jscoverage['vizapi/DataTable.js'][744]++;
pentaho.DataView.prototype.getColumnProperty = (function (columnIndex, name) {
  _$jscoverage['vizapi/DataTable.js'][745]++;
  return this.dataTable.getColumnProperty(columnIndex, name);
});
_$jscoverage['vizapi/DataTable.js'][750]++;
(function () {
  _$jscoverage['vizapi/DataTable.js'][752]++;
  function argRequired(name) {
    _$jscoverage['vizapi/DataTable.js'][753]++;
    return new Error(("Argument '" + name + "' is required."));
}
  _$jscoverage['vizapi/DataTable.js'][756]++;
  function argInvalid(name, text) {
    _$jscoverage['vizapi/DataTable.js'][757]++;
    return new Error(("Argument '" + name + "' is invalid." + (text? (" " + text): "")));
}
  _$jscoverage['vizapi/DataTable.js'][772]++;
  pentaho.DataView.prototype.createTrend = (pentaho.DataTable.prototype.createTrend = (function (trendArgs) {
  _$jscoverage['vizapi/DataTable.js'][777]++;
  if ((! (trendArgs instanceof Object))) {
    _$jscoverage['vizapi/DataTable.js'][778]++;
    throw argRequired("trendArgs");
  }
  _$jscoverage['vizapi/DataTable.js'][783]++;
  var trendType = trendArgs.type;
  _$jscoverage['vizapi/DataTable.js'][784]++;
  if ((! trendType)) {
    _$jscoverage['vizapi/DataTable.js'][785]++;
    throw argRequired("trendArgs.type");
  }
  _$jscoverage['vizapi/DataTable.js'][788]++;
  trendType = ("" + trendType);
  _$jscoverage['vizapi/DataTable.js'][790]++;
  var trendInfo = pentaho.trends.get(trendType, true);
  _$jscoverage['vizapi/DataTable.js'][794]++;
  var colCount = this.getNumberOfColumns();
  _$jscoverage['vizapi/DataTable.js'][796]++;
  var xIndex = trendArgs.x;
  _$jscoverage['vizapi/DataTable.js'][797]++;
  if ((xIndex == null)) {
    _$jscoverage['vizapi/DataTable.js'][798]++;
    throw argRequired("trendArgs.x");
  }
  _$jscoverage['vizapi/DataTable.js'][801]++;
  xIndex = (+ xIndex);
  _$jscoverage['vizapi/DataTable.js'][802]++;
  if (isNaN(xIndex)) {
    _$jscoverage['vizapi/DataTable.js'][803]++;
    throw argInvalid("trendArgs.x", "Not a number.");
  }
  _$jscoverage['vizapi/DataTable.js'][806]++;
  if (((xIndex < 0) || (xIndex >= colCount))) {
    _$jscoverage['vizapi/DataTable.js'][807]++;
    throw argInvalid("trendArgs.x", "Out of range.");
  }
  _$jscoverage['vizapi/DataTable.js'][814]++;
  var yIndex = trendArgs.y;
  _$jscoverage['vizapi/DataTable.js'][815]++;
  if ((yIndex == null)) {
    _$jscoverage['vizapi/DataTable.js'][816]++;
    throw argRequired("trendArgs.y");
  }
  _$jscoverage['vizapi/DataTable.js'][819]++;
  yIndex = (+ yIndex);
  _$jscoverage['vizapi/DataTable.js'][820]++;
  if (isNaN(yIndex)) {
    _$jscoverage['vizapi/DataTable.js'][821]++;
    throw argInvalid("trendArgs.y", "Not a number.");
  }
  _$jscoverage['vizapi/DataTable.js'][824]++;
  if (((yIndex < 0) || (yIndex >= colCount))) {
    _$jscoverage['vizapi/DataTable.js'][825]++;
    throw argInvalid("trendArgs.y", "Out of range.");
  }
  _$jscoverage['vizapi/DataTable.js'][828]++;
  if ((this.getColumnType(yIndex) !== "number")) {
    _$jscoverage['vizapi/DataTable.js'][829]++;
    throw argInvalid("trendArgs.y", "Must be a numeric column.");
  }
  _$jscoverage['vizapi/DataTable.js'][836]++;
  var trendName = (trendArgs.name || (trendType + "Trend"));
  _$jscoverage['vizapi/DataTable.js'][839]++;
  var trendLabel = (trendArgs.label || (trendArgs.name? trendName: trendInfo.label));
  _$jscoverage['vizapi/DataTable.js'][844]++;
  var trendOptions = (trendArgs.options || {});
  _$jscoverage['vizapi/DataTable.js'][850]++;
  var table = (this.dataTable || this).jsonTable;
  _$jscoverage['vizapi/DataTable.js'][851]++;
  var trendIndex = table.cols.length;
  _$jscoverage['vizapi/DataTable.js'][852]++;
  table.cols.push({type: "number", id: trendName, label: trendLabel});
  _$jscoverage['vizapi/DataTable.js'][860]++;
  var isXDiscrete = (this.getColumnType(xIndex) !== "number");
  _$jscoverage['vizapi/DataTable.js'][862]++;
  var rowIndexesEnumtor = this.getRowIndexEnumerator();
  _$jscoverage['vizapi/DataTable.js'][864]++;
  var me = this;
  _$jscoverage['vizapi/DataTable.js'][866]++;
  var funX = (isXDiscrete? null: (function (i) {
  _$jscoverage['vizapi/DataTable.js'][869]++;
  return me.getValue(i, xIndex);
}));
  _$jscoverage['vizapi/DataTable.js'][872]++;
  var funY = (function (i) {
  _$jscoverage['vizapi/DataTable.js'][873]++;
  return me.getValue(i, yIndex);
});
  _$jscoverage['vizapi/DataTable.js'][876]++;
  var options = Object.create(trendOptions);
  _$jscoverage['vizapi/DataTable.js'][877]++;
  options.rows = rowIndexesEnumtor;
  _$jscoverage['vizapi/DataTable.js'][878]++;
  options.x = funX;
  _$jscoverage['vizapi/DataTable.js'][879]++;
  options.y = funY;
  _$jscoverage['vizapi/DataTable.js'][881]++;
  var trendModel = trendInfo.model(options);
  _$jscoverage['vizapi/DataTable.js'][882]++;
  if ((! trendModel)) {
    _$jscoverage['vizapi/DataTable.js'][885]++;
    dojo.forEach(table.rows, (function (row) {
  _$jscoverage['vizapi/DataTable.js'][886]++;
  row.c[trendIndex] = {v: null};
}));
    _$jscoverage['vizapi/DataTable.js'][889]++;
    return false;
  }
  _$jscoverage['vizapi/DataTable.js'][892]++;
  dojo.forEach(table.rows, (function (row, i) {
  _$jscoverage['vizapi/DataTable.js'][893]++;
  var trendX = (funX? funX(i): i);
  _$jscoverage['vizapi/DataTable.js'][894]++;
  var trendY = ((trendX != null)? trendModel.sample(trendX, funY(i), i): null);
  _$jscoverage['vizapi/DataTable.js'][898]++;
  row.c[trendIndex] = {v: trendY};
}));
  _$jscoverage['vizapi/DataTable.js'][901]++;
  return true;
}));
  _$jscoverage['vizapi/DataTable.js'][908]++;
  pentaho.DataView.prototype.getRowIndexEnumerator = (pentaho.DataTable.prototype.getRowIndexEnumerator = (function () {
  _$jscoverage['vizapi/DataTable.js'][910]++;
  var index = -1;
  _$jscoverage['vizapi/DataTable.js'][911]++;
  var count = this.getNumberOfRows();
  _$jscoverage['vizapi/DataTable.js'][912]++;
  var enumtor = {item: undefined, next: (function () {
  _$jscoverage['vizapi/DataTable.js'][915]++;
  if ((index < (count - 1))) {
    _$jscoverage['vizapi/DataTable.js'][916]++;
    enumtor.item = (++index);
    _$jscoverage['vizapi/DataTable.js'][917]++;
    return true;
  }
  _$jscoverage['vizapi/DataTable.js'][920]++;
  if (enumtor.item) {
    _$jscoverage['vizapi/DataTable.js'][921]++;
    enumtor.item = undefined;
  }
  _$jscoverage['vizapi/DataTable.js'][924]++;
  return false;
})};
  _$jscoverage['vizapi/DataTable.js'][928]++;
  return enumtor;
}));
  _$jscoverage['vizapi/DataTable.js'][932]++;
  var _trends = {};
  _$jscoverage['vizapi/DataTable.js'][934]++;
  pentaho.trends = {};
  _$jscoverage['vizapi/DataTable.js'][945]++;
  pentaho.trends.define = (function (type, spec) {
  _$jscoverage['vizapi/DataTable.js'][946]++;
  if ((! type)) {
    _$jscoverage['vizapi/DataTable.js'][947]++;
    throw argRequired("type");
  }
  _$jscoverage['vizapi/DataTable.js'][950]++;
  type = ("" + type);
  _$jscoverage['vizapi/DataTable.js'][952]++;
  if ((! spec)) {
    _$jscoverage['vizapi/DataTable.js'][953]++;
    throw argRequired("spec");
  }
  _$jscoverage['vizapi/DataTable.js'][958]++;
  var model = spec.model;
  _$jscoverage['vizapi/DataTable.js'][959]++;
  if ((! model)) {
    _$jscoverage['vizapi/DataTable.js'][960]++;
    throw argRequired("spec.model");
  }
  _$jscoverage['vizapi/DataTable.js'][963]++;
  if (((typeof model) !== "function")) {
    _$jscoverage['vizapi/DataTable.js'][964]++;
    throw argInvalid("spec.model", "Not a function");
  }
  _$jscoverage['vizapi/DataTable.js'][969]++;
  var label = spec.label;
  _$jscoverage['vizapi/DataTable.js'][970]++;
  if ((! label)) {
    _$jscoverage['vizapi/DataTable.js'][971]++;
    label = (type.chartAt(0).toUpperCase() + type.substr(1) + " Trend");
  }
  _$jscoverage['vizapi/DataTable.js'][974]++;
  var trendInfo = {type: type, label: label, model: model};
  _$jscoverage['vizapi/DataTable.js'][980]++;
  _trends[type] = trendInfo;
});
  _$jscoverage['vizapi/DataTable.js'][989]++;
  pentaho.trends.get = (function (type, assert) {
  _$jscoverage['vizapi/DataTable.js'][990]++;
  if ((! type)) {
    _$jscoverage['vizapi/DataTable.js'][991]++;
    throw argRequired("type");
  }
  _$jscoverage['vizapi/DataTable.js'][994]++;
  var trendInfo = (_trends.hasOwnProperty(type)? _trends[type]: null);
  _$jscoverage['vizapi/DataTable.js'][995]++;
  if (((! trendInfo) && assert)) {
    _$jscoverage['vizapi/DataTable.js'][996]++;
    throw argInvalid("type", ("There is no trend type named '" + type + "'."));
  }
  _$jscoverage['vizapi/DataTable.js'][999]++;
  return trendInfo;
});
  _$jscoverage['vizapi/DataTable.js'][1005]++;
  pentaho.trends.types = (function () {
  _$jscoverage['vizapi/DataTable.js'][1008]++;
  var ret = [];
  _$jscoverage['vizapi/DataTable.js'][1009]++;
  for (var p in _trends) {
    _$jscoverage['vizapi/DataTable.js'][1010]++;
    if (Object.prototype.hasOwnProperty.call(_trends, p)) {
      _$jscoverage['vizapi/DataTable.js'][1011]++;
      ret.push(p);
    }
}
  _$jscoverage['vizapi/DataTable.js'][1015]++;
  return ret;
});
  _$jscoverage['vizapi/DataTable.js'][1020]++;
  function parseNum(value) {
    _$jscoverage['vizapi/DataTable.js'][1021]++;
    return ((value != null)? (+ value): NaN);
}
  _$jscoverage['vizapi/DataTable.js'][1024]++;
  pentaho.trends.define("linear", {label: "Linear trend", model: (function (options) {
  _$jscoverage['vizapi/DataTable.js'][1027]++;
  var rowsQuery = options.rows;
  _$jscoverage['vizapi/DataTable.js'][1028]++;
  var funX = options.x;
  _$jscoverage['vizapi/DataTable.js'][1029]++;
  var funY = options.y;
  _$jscoverage['vizapi/DataTable.js'][1031]++;
  var i = 0;
  _$jscoverage['vizapi/DataTable.js'][1032]++;
  var N = 0;
  _$jscoverage['vizapi/DataTable.js'][1033]++;
  var sumX = 0;
  _$jscoverage['vizapi/DataTable.js'][1034]++;
  var sumY = 0;
  _$jscoverage['vizapi/DataTable.js'][1035]++;
  var sumXY = 0;
  _$jscoverage['vizapi/DataTable.js'][1036]++;
  var sumXX = 0;
  _$jscoverage['vizapi/DataTable.js'][1038]++;
  while (rowsQuery.next()) {
    _$jscoverage['vizapi/DataTable.js'][1039]++;
    var row = rowsQuery.item;
    _$jscoverage['vizapi/DataTable.js'][1042]++;
    var x = (funX? parseNum(funX(row)): i);
    _$jscoverage['vizapi/DataTable.js'][1043]++;
    if ((! isNaN(x))) {
      _$jscoverage['vizapi/DataTable.js'][1044]++;
      var y = parseNum(funY(row));
      _$jscoverage['vizapi/DataTable.js'][1045]++;
      if ((! isNaN(y))) {
        _$jscoverage['vizapi/DataTable.js'][1046]++;
        (N++);
        _$jscoverage['vizapi/DataTable.js'][1048]++;
        sumX += x;
        _$jscoverage['vizapi/DataTable.js'][1049]++;
        sumY += y;
        _$jscoverage['vizapi/DataTable.js'][1050]++;
        sumXY += (x * y);
        _$jscoverage['vizapi/DataTable.js'][1051]++;
        sumXX += (x * x);
      }
    }
    _$jscoverage['vizapi/DataTable.js'][1055]++;
    (i++);
}
  _$jscoverage['vizapi/DataTable.js'][1059]++;
  var alpha, beta;
  _$jscoverage['vizapi/DataTable.js'][1060]++;
  if ((N >= 2)) {
    _$jscoverage['vizapi/DataTable.js'][1061]++;
    var avgX = (sumX / N);
    _$jscoverage['vizapi/DataTable.js'][1062]++;
    var avgY = (sumY / N);
    _$jscoverage['vizapi/DataTable.js'][1063]++;
    var avgXY = (sumXY / N);
    _$jscoverage['vizapi/DataTable.js'][1064]++;
    var avgXX = (sumXX / N);
    _$jscoverage['vizapi/DataTable.js'][1067]++;
    var den = (avgXX - (avgX * avgX));
    _$jscoverage['vizapi/DataTable.js'][1068]++;
    if ((den === 0)) {
      _$jscoverage['vizapi/DataTable.js'][1069]++;
      beta = 0;
    }
    else {
      _$jscoverage['vizapi/DataTable.js'][1071]++;
      beta = ((avgXY - (avgX * avgY)) / den);
    }
    _$jscoverage['vizapi/DataTable.js'][1074]++;
    alpha = (avgY - (beta * avgX));
    _$jscoverage['vizapi/DataTable.js'][1076]++;
    return ({alpha: alpha, beta: beta, reset: (function () {
}), sample: (function (x) {
  _$jscoverage['vizapi/DataTable.js'][1084]++;
  return (alpha + (beta * (+ x)));
})});
  }
})});
})();
