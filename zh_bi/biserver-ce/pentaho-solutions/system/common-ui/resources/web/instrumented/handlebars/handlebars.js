/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['handlebars/handlebars.js']) {
  _$jscoverage['handlebars/handlebars.js'] = [];
  _$jscoverage['handlebars/handlebars.js'][28] = 0;
  _$jscoverage['handlebars/handlebars.js'][30] = 0;
  _$jscoverage['handlebars/handlebars.js'][32] = 0;
  _$jscoverage['handlebars/handlebars.js'][33] = 0;
  _$jscoverage['handlebars/handlebars.js'][35] = 0;
  _$jscoverage['handlebars/handlebars.js'][40] = 0;
  _$jscoverage['handlebars/handlebars.js'][41] = 0;
  _$jscoverage['handlebars/handlebars.js'][43] = 0;
  _$jscoverage['handlebars/handlebars.js'][44] = 0;
  _$jscoverage['handlebars/handlebars.js'][45] = 0;
  _$jscoverage['handlebars/handlebars.js'][48] = 0;
  _$jscoverage['handlebars/handlebars.js'][49] = 0;
  _$jscoverage['handlebars/handlebars.js'][52] = 0;
  _$jscoverage['handlebars/handlebars.js'][53] = 0;
  _$jscoverage['handlebars/handlebars.js'][54] = 0;
  _$jscoverage['handlebars/handlebars.js'][56] = 0;
  _$jscoverage['handlebars/handlebars.js'][60] = 0;
  _$jscoverage['handlebars/handlebars.js'][62] = 0;
  _$jscoverage['handlebars/handlebars.js'][63] = 0;
  _$jscoverage['handlebars/handlebars.js'][66] = 0;
  _$jscoverage['handlebars/handlebars.js'][67] = 0;
  _$jscoverage['handlebars/handlebars.js'][69] = 0;
  _$jscoverage['handlebars/handlebars.js'][71] = 0;
  _$jscoverage['handlebars/handlebars.js'][72] = 0;
  _$jscoverage['handlebars/handlebars.js'][73] = 0;
  _$jscoverage['handlebars/handlebars.js'][74] = 0;
  _$jscoverage['handlebars/handlebars.js'][75] = 0;
  _$jscoverage['handlebars/handlebars.js'][76] = 0;
  _$jscoverage['handlebars/handlebars.js'][77] = 0;
  _$jscoverage['handlebars/handlebars.js'][79] = 0;
  _$jscoverage['handlebars/handlebars.js'][82] = 0;
  _$jscoverage['handlebars/handlebars.js'][86] = 0;
  _$jscoverage['handlebars/handlebars.js'][88] = 0;
  _$jscoverage['handlebars/handlebars.js'][89] = 0;
  _$jscoverage['handlebars/handlebars.js'][90] = 0;
  _$jscoverage['handlebars/handlebars.js'][91] = 0;
  _$jscoverage['handlebars/handlebars.js'][92] = 0;
  _$jscoverage['handlebars/handlebars.js'][95] = 0;
  _$jscoverage['handlebars/handlebars.js'][102] = 0;
  _$jscoverage['handlebars/handlebars.js'][103] = 0;
  _$jscoverage['handlebars/handlebars.js'][104] = 0;
  _$jscoverage['handlebars/handlebars.js'][105] = 0;
  _$jscoverage['handlebars/handlebars.js'][111] = 0;
  _$jscoverage['handlebars/handlebars.js'][113] = 0;
  _$jscoverage['handlebars/handlebars.js'][114] = 0;
  _$jscoverage['handlebars/handlebars.js'][115] = 0;
  _$jscoverage['handlebars/handlebars.js'][117] = 0;
  _$jscoverage['handlebars/handlebars.js'][118] = 0;
  _$jscoverage['handlebars/handlebars.js'][121] = 0;
  _$jscoverage['handlebars/handlebars.js'][122] = 0;
  _$jscoverage['handlebars/handlebars.js'][123] = 0;
  _$jscoverage['handlebars/handlebars.js'][124] = 0;
  _$jscoverage['handlebars/handlebars.js'][125] = 0;
  _$jscoverage['handlebars/handlebars.js'][128] = 0;
  _$jscoverage['handlebars/handlebars.js'][129] = 0;
  _$jscoverage['handlebars/handlebars.js'][130] = 0;
  _$jscoverage['handlebars/handlebars.js'][131] = 0;
  _$jscoverage['handlebars/handlebars.js'][132] = 0;
  _$jscoverage['handlebars/handlebars.js'][138] = 0;
  _$jscoverage['handlebars/handlebars.js'][139] = 0;
  _$jscoverage['handlebars/handlebars.js'][142] = 0;
  _$jscoverage['handlebars/handlebars.js'][145] = 0;
  _$jscoverage['handlebars/handlebars.js'][146] = 0;
  _$jscoverage['handlebars/handlebars.js'][147] = 0;
  _$jscoverage['handlebars/handlebars.js'][149] = 0;
  _$jscoverage['handlebars/handlebars.js'][150] = 0;
  _$jscoverage['handlebars/handlebars.js'][152] = 0;
  _$jscoverage['handlebars/handlebars.js'][156] = 0;
  _$jscoverage['handlebars/handlebars.js'][157] = 0;
  _$jscoverage['handlebars/handlebars.js'][158] = 0;
  _$jscoverage['handlebars/handlebars.js'][159] = 0;
  _$jscoverage['handlebars/handlebars.js'][161] = 0;
  _$jscoverage['handlebars/handlebars.js'][164] = 0;
  _$jscoverage['handlebars/handlebars.js'][165] = 0;
  _$jscoverage['handlebars/handlebars.js'][168] = 0;
  _$jscoverage['handlebars/handlebars.js'][169] = 0;
  _$jscoverage['handlebars/handlebars.js'][170] = 0;
  _$jscoverage['handlebars/handlebars.js'][174] = 0;
  _$jscoverage['handlebars/handlebars.js'][177] = 0;
  _$jscoverage['handlebars/handlebars.js'][178] = 0;
  _$jscoverage['handlebars/handlebars.js'][185] = 0;
  _$jscoverage['handlebars/handlebars.js'][186] = 0;
  _$jscoverage['handlebars/handlebars.js'][187] = 0;
  _$jscoverage['handlebars/handlebars.js'][188] = 0;
  _$jscoverage['handlebars/handlebars.js'][189] = 0;
  _$jscoverage['handlebars/handlebars.js'][190] = 0;
  _$jscoverage['handlebars/handlebars.js'][191] = 0;
  _$jscoverage['handlebars/handlebars.js'][192] = 0;
  _$jscoverage['handlebars/handlebars.js'][193] = 0;
  _$jscoverage['handlebars/handlebars.js'][194] = 0;
  _$jscoverage['handlebars/handlebars.js'][195] = 0;
  _$jscoverage['handlebars/handlebars.js'][196] = 0;
  _$jscoverage['handlebars/handlebars.js'][197] = 0;
  _$jscoverage['handlebars/handlebars.js'][198] = 0;
  _$jscoverage['handlebars/handlebars.js'][199] = 0;
  _$jscoverage['handlebars/handlebars.js'][200] = 0;
  _$jscoverage['handlebars/handlebars.js'][201] = 0;
  _$jscoverage['handlebars/handlebars.js'][202] = 0;
  _$jscoverage['handlebars/handlebars.js'][203] = 0;
  _$jscoverage['handlebars/handlebars.js'][204] = 0;
  _$jscoverage['handlebars/handlebars.js'][205] = 0;
  _$jscoverage['handlebars/handlebars.js'][206] = 0;
  _$jscoverage['handlebars/handlebars.js'][207] = 0;
  _$jscoverage['handlebars/handlebars.js'][208] = 0;
  _$jscoverage['handlebars/handlebars.js'][209] = 0;
  _$jscoverage['handlebars/handlebars.js'][210] = 0;
  _$jscoverage['handlebars/handlebars.js'][211] = 0;
  _$jscoverage['handlebars/handlebars.js'][212] = 0;
  _$jscoverage['handlebars/handlebars.js'][213] = 0;
  _$jscoverage['handlebars/handlebars.js'][214] = 0;
  _$jscoverage['handlebars/handlebars.js'][215] = 0;
  _$jscoverage['handlebars/handlebars.js'][216] = 0;
  _$jscoverage['handlebars/handlebars.js'][217] = 0;
  _$jscoverage['handlebars/handlebars.js'][218] = 0;
  _$jscoverage['handlebars/handlebars.js'][219] = 0;
  _$jscoverage['handlebars/handlebars.js'][220] = 0;
  _$jscoverage['handlebars/handlebars.js'][221] = 0;
  _$jscoverage['handlebars/handlebars.js'][222] = 0;
  _$jscoverage['handlebars/handlebars.js'][223] = 0;
  _$jscoverage['handlebars/handlebars.js'][224] = 0;
  _$jscoverage['handlebars/handlebars.js'][225] = 0;
  _$jscoverage['handlebars/handlebars.js'][226] = 0;
  _$jscoverage['handlebars/handlebars.js'][227] = 0;
  _$jscoverage['handlebars/handlebars.js'][228] = 0;
  _$jscoverage['handlebars/handlebars.js'][229] = 0;
  _$jscoverage['handlebars/handlebars.js'][230] = 0;
  _$jscoverage['handlebars/handlebars.js'][232] = 0;
  _$jscoverage['handlebars/handlebars.js'][233] = 0;
  _$jscoverage['handlebars/handlebars.js'][234] = 0;
  _$jscoverage['handlebars/handlebars.js'][235] = 0;
  _$jscoverage['handlebars/handlebars.js'][236] = 0;
  _$jscoverage['handlebars/handlebars.js'][237] = 0;
  _$jscoverage['handlebars/handlebars.js'][238] = 0;
  _$jscoverage['handlebars/handlebars.js'][239] = 0;
  _$jscoverage['handlebars/handlebars.js'][240] = 0;
  _$jscoverage['handlebars/handlebars.js'][241] = 0;
  _$jscoverage['handlebars/handlebars.js'][242] = 0;
  _$jscoverage['handlebars/handlebars.js'][243] = 0;
  _$jscoverage['handlebars/handlebars.js'][244] = 0;
  _$jscoverage['handlebars/handlebars.js'][245] = 0;
  _$jscoverage['handlebars/handlebars.js'][246] = 0;
  _$jscoverage['handlebars/handlebars.js'][247] = 0;
  _$jscoverage['handlebars/handlebars.js'][248] = 0;
  _$jscoverage['handlebars/handlebars.js'][249] = 0;
  _$jscoverage['handlebars/handlebars.js'][250] = 0;
  _$jscoverage['handlebars/handlebars.js'][251] = 0;
  _$jscoverage['handlebars/handlebars.js'][252] = 0;
  _$jscoverage['handlebars/handlebars.js'][253] = 0;
  _$jscoverage['handlebars/handlebars.js'][254] = 0;
  _$jscoverage['handlebars/handlebars.js'][255] = 0;
  _$jscoverage['handlebars/handlebars.js'][256] = 0;
  _$jscoverage['handlebars/handlebars.js'][257] = 0;
  _$jscoverage['handlebars/handlebars.js'][258] = 0;
  _$jscoverage['handlebars/handlebars.js'][259] = 0;
  _$jscoverage['handlebars/handlebars.js'][260] = 0;
  _$jscoverage['handlebars/handlebars.js'][261] = 0;
  _$jscoverage['handlebars/handlebars.js'][262] = 0;
  _$jscoverage['handlebars/handlebars.js'][263] = 0;
  _$jscoverage['handlebars/handlebars.js'][264] = 0;
  _$jscoverage['handlebars/handlebars.js'][265] = 0;
  _$jscoverage['handlebars/handlebars.js'][266] = 0;
  _$jscoverage['handlebars/handlebars.js'][267] = 0;
  _$jscoverage['handlebars/handlebars.js'][268] = 0;
  _$jscoverage['handlebars/handlebars.js'][269] = 0;
  _$jscoverage['handlebars/handlebars.js'][270] = 0;
  _$jscoverage['handlebars/handlebars.js'][271] = 0;
  _$jscoverage['handlebars/handlebars.js'][272] = 0;
  _$jscoverage['handlebars/handlebars.js'][273] = 0;
  _$jscoverage['handlebars/handlebars.js'][274] = 0;
  _$jscoverage['handlebars/handlebars.js'][275] = 0;
  _$jscoverage['handlebars/handlebars.js'][276] = 0;
  _$jscoverage['handlebars/handlebars.js'][277] = 0;
  _$jscoverage['handlebars/handlebars.js'][278] = 0;
  _$jscoverage['handlebars/handlebars.js'][279] = 0;
  _$jscoverage['handlebars/handlebars.js'][280] = 0;
  _$jscoverage['handlebars/handlebars.js'][286] = 0;
  _$jscoverage['handlebars/handlebars.js'][289] = 0;
  _$jscoverage['handlebars/handlebars.js'][290] = 0;
  _$jscoverage['handlebars/handlebars.js'][291] = 0;
  _$jscoverage['handlebars/handlebars.js'][292] = 0;
  _$jscoverage['handlebars/handlebars.js'][293] = 0;
  _$jscoverage['handlebars/handlebars.js'][294] = 0;
  _$jscoverage['handlebars/handlebars.js'][295] = 0;
  _$jscoverage['handlebars/handlebars.js'][296] = 0;
  _$jscoverage['handlebars/handlebars.js'][297] = 0;
  _$jscoverage['handlebars/handlebars.js'][298] = 0;
  _$jscoverage['handlebars/handlebars.js'][299] = 0;
  _$jscoverage['handlebars/handlebars.js'][300] = 0;
  _$jscoverage['handlebars/handlebars.js'][301] = 0;
  _$jscoverage['handlebars/handlebars.js'][302] = 0;
  _$jscoverage['handlebars/handlebars.js'][303] = 0;
  _$jscoverage['handlebars/handlebars.js'][304] = 0;
  _$jscoverage['handlebars/handlebars.js'][306] = 0;
  _$jscoverage['handlebars/handlebars.js'][307] = 0;
  _$jscoverage['handlebars/handlebars.js'][308] = 0;
  _$jscoverage['handlebars/handlebars.js'][309] = 0;
  _$jscoverage['handlebars/handlebars.js'][310] = 0;
  _$jscoverage['handlebars/handlebars.js'][312] = 0;
  _$jscoverage['handlebars/handlebars.js'][314] = 0;
  _$jscoverage['handlebars/handlebars.js'][315] = 0;
  _$jscoverage['handlebars/handlebars.js'][316] = 0;
  _$jscoverage['handlebars/handlebars.js'][317] = 0;
  _$jscoverage['handlebars/handlebars.js'][318] = 0;
  _$jscoverage['handlebars/handlebars.js'][320] = 0;
  _$jscoverage['handlebars/handlebars.js'][321] = 0;
  _$jscoverage['handlebars/handlebars.js'][323] = 0;
  _$jscoverage['handlebars/handlebars.js'][325] = 0;
  _$jscoverage['handlebars/handlebars.js'][326] = 0;
  _$jscoverage['handlebars/handlebars.js'][327] = 0;
  _$jscoverage['handlebars/handlebars.js'][328] = 0;
  _$jscoverage['handlebars/handlebars.js'][329] = 0;
  _$jscoverage['handlebars/handlebars.js'][330] = 0;
  _$jscoverage['handlebars/handlebars.js'][331] = 0;
  _$jscoverage['handlebars/handlebars.js'][333] = 0;
  _$jscoverage['handlebars/handlebars.js'][334] = 0;
  _$jscoverage['handlebars/handlebars.js'][336] = 0;
  _$jscoverage['handlebars/handlebars.js'][338] = 0;
  _$jscoverage['handlebars/handlebars.js'][341] = 0;
  _$jscoverage['handlebars/handlebars.js'][342] = 0;
  _$jscoverage['handlebars/handlebars.js'][344] = 0;
  _$jscoverage['handlebars/handlebars.js'][346] = 0;
  _$jscoverage['handlebars/handlebars.js'][347] = 0;
  _$jscoverage['handlebars/handlebars.js'][348] = 0;
  _$jscoverage['handlebars/handlebars.js'][349] = 0;
  _$jscoverage['handlebars/handlebars.js'][350] = 0;
  _$jscoverage['handlebars/handlebars.js'][351] = 0;
  _$jscoverage['handlebars/handlebars.js'][352] = 0;
  _$jscoverage['handlebars/handlebars.js'][353] = 0;
  _$jscoverage['handlebars/handlebars.js'][354] = 0;
  _$jscoverage['handlebars/handlebars.js'][355] = 0;
  _$jscoverage['handlebars/handlebars.js'][356] = 0;
  _$jscoverage['handlebars/handlebars.js'][357] = 0;
  _$jscoverage['handlebars/handlebars.js'][359] = 0;
  _$jscoverage['handlebars/handlebars.js'][360] = 0;
  _$jscoverage['handlebars/handlebars.js'][362] = 0;
  _$jscoverage['handlebars/handlebars.js'][364] = 0;
  _$jscoverage['handlebars/handlebars.js'][365] = 0;
  _$jscoverage['handlebars/handlebars.js'][366] = 0;
  _$jscoverage['handlebars/handlebars.js'][367] = 0;
  _$jscoverage['handlebars/handlebars.js'][368] = 0;
  _$jscoverage['handlebars/handlebars.js'][370] = 0;
  _$jscoverage['handlebars/handlebars.js'][371] = 0;
  _$jscoverage['handlebars/handlebars.js'][372] = 0;
  _$jscoverage['handlebars/handlebars.js'][374] = 0;
  _$jscoverage['handlebars/handlebars.js'][375] = 0;
  _$jscoverage['handlebars/handlebars.js'][376] = 0;
  _$jscoverage['handlebars/handlebars.js'][377] = 0;
  _$jscoverage['handlebars/handlebars.js'][379] = 0;
  _$jscoverage['handlebars/handlebars.js'][380] = 0;
  _$jscoverage['handlebars/handlebars.js'][381] = 0;
  _$jscoverage['handlebars/handlebars.js'][382] = 0;
  _$jscoverage['handlebars/handlebars.js'][383] = 0;
  _$jscoverage['handlebars/handlebars.js'][384] = 0;
  _$jscoverage['handlebars/handlebars.js'][386] = 0;
  _$jscoverage['handlebars/handlebars.js'][389] = 0;
  _$jscoverage['handlebars/handlebars.js'][393] = 0;
  _$jscoverage['handlebars/handlebars.js'][394] = 0;
  _$jscoverage['handlebars/handlebars.js'][396] = 0;
  _$jscoverage['handlebars/handlebars.js'][397] = 0;
  _$jscoverage['handlebars/handlebars.js'][399] = 0;
  _$jscoverage['handlebars/handlebars.js'][403] = 0;
  _$jscoverage['handlebars/handlebars.js'][404] = 0;
  _$jscoverage['handlebars/handlebars.js'][405] = 0;
  _$jscoverage['handlebars/handlebars.js'][406] = 0;
  _$jscoverage['handlebars/handlebars.js'][407] = 0;
  _$jscoverage['handlebars/handlebars.js'][408] = 0;
  _$jscoverage['handlebars/handlebars.js'][409] = 0;
  _$jscoverage['handlebars/handlebars.js'][410] = 0;
  _$jscoverage['handlebars/handlebars.js'][411] = 0;
  _$jscoverage['handlebars/handlebars.js'][414] = 0;
  _$jscoverage['handlebars/handlebars.js'][415] = 0;
  _$jscoverage['handlebars/handlebars.js'][416] = 0;
  _$jscoverage['handlebars/handlebars.js'][417] = 0;
  _$jscoverage['handlebars/handlebars.js'][418] = 0;
  _$jscoverage['handlebars/handlebars.js'][419] = 0;
  _$jscoverage['handlebars/handlebars.js'][420] = 0;
  _$jscoverage['handlebars/handlebars.js'][421] = 0;
  _$jscoverage['handlebars/handlebars.js'][422] = 0;
  _$jscoverage['handlebars/handlebars.js'][423] = 0;
  _$jscoverage['handlebars/handlebars.js'][425] = 0;
  _$jscoverage['handlebars/handlebars.js'][427] = 0;
  _$jscoverage['handlebars/handlebars.js'][429] = 0;
  _$jscoverage['handlebars/handlebars.js'][430] = 0;
  _$jscoverage['handlebars/handlebars.js'][433] = 0;
  _$jscoverage['handlebars/handlebars.js'][434] = 0;
  _$jscoverage['handlebars/handlebars.js'][436] = 0;
  _$jscoverage['handlebars/handlebars.js'][437] = 0;
  _$jscoverage['handlebars/handlebars.js'][439] = 0;
  _$jscoverage['handlebars/handlebars.js'][440] = 0;
  _$jscoverage['handlebars/handlebars.js'][441] = 0;
  _$jscoverage['handlebars/handlebars.js'][442] = 0;
  _$jscoverage['handlebars/handlebars.js'][444] = 0;
  _$jscoverage['handlebars/handlebars.js'][445] = 0;
  _$jscoverage['handlebars/handlebars.js'][447] = 0;
  _$jscoverage['handlebars/handlebars.js'][455] = 0;
  _$jscoverage['handlebars/handlebars.js'][456] = 0;
  _$jscoverage['handlebars/handlebars.js'][458] = 0;
  _$jscoverage['handlebars/handlebars.js'][461] = 0;
  _$jscoverage['handlebars/handlebars.js'][462] = 0;
  _$jscoverage['handlebars/handlebars.js'][465] = 0;
  _$jscoverage['handlebars/handlebars.js'][468] = 0;
  _$jscoverage['handlebars/handlebars.js'][469] = 0;
  _$jscoverage['handlebars/handlebars.js'][472] = 0;
  _$jscoverage['handlebars/handlebars.js'][473] = 0;
  _$jscoverage['handlebars/handlebars.js'][474] = 0;
  _$jscoverage['handlebars/handlebars.js'][476] = 0;
  _$jscoverage['handlebars/handlebars.js'][479] = 0;
  _$jscoverage['handlebars/handlebars.js'][480] = 0;
  _$jscoverage['handlebars/handlebars.js'][481] = 0;
  _$jscoverage['handlebars/handlebars.js'][484] = 0;
  _$jscoverage['handlebars/handlebars.js'][485] = 0;
  _$jscoverage['handlebars/handlebars.js'][487] = 0;
  _$jscoverage['handlebars/handlebars.js'][489] = 0;
  _$jscoverage['handlebars/handlebars.js'][495] = 0;
  _$jscoverage['handlebars/handlebars.js'][496] = 0;
  _$jscoverage['handlebars/handlebars.js'][497] = 0;
  _$jscoverage['handlebars/handlebars.js'][499] = 0;
  _$jscoverage['handlebars/handlebars.js'][500] = 0;
  _$jscoverage['handlebars/handlebars.js'][501] = 0;
  _$jscoverage['handlebars/handlebars.js'][502] = 0;
  _$jscoverage['handlebars/handlebars.js'][503] = 0;
  _$jscoverage['handlebars/handlebars.js'][504] = 0;
  _$jscoverage['handlebars/handlebars.js'][505] = 0;
  _$jscoverage['handlebars/handlebars.js'][508] = 0;
  _$jscoverage['handlebars/handlebars.js'][509] = 0;
  _$jscoverage['handlebars/handlebars.js'][510] = 0;
  _$jscoverage['handlebars/handlebars.js'][511] = 0;
  _$jscoverage['handlebars/handlebars.js'][515] = 0;
  _$jscoverage['handlebars/handlebars.js'][516] = 0;
  _$jscoverage['handlebars/handlebars.js'][517] = 0;
  _$jscoverage['handlebars/handlebars.js'][518] = 0;
  _$jscoverage['handlebars/handlebars.js'][519] = 0;
  _$jscoverage['handlebars/handlebars.js'][520] = 0;
  _$jscoverage['handlebars/handlebars.js'][522] = 0;
  _$jscoverage['handlebars/handlebars.js'][523] = 0;
  _$jscoverage['handlebars/handlebars.js'][524] = 0;
  _$jscoverage['handlebars/handlebars.js'][525] = 0;
  _$jscoverage['handlebars/handlebars.js'][526] = 0;
  _$jscoverage['handlebars/handlebars.js'][527] = 0;
  _$jscoverage['handlebars/handlebars.js'][528] = 0;
  _$jscoverage['handlebars/handlebars.js'][530] = 0;
  _$jscoverage['handlebars/handlebars.js'][531] = 0;
  _$jscoverage['handlebars/handlebars.js'][533] = 0;
  _$jscoverage['handlebars/handlebars.js'][538] = 0;
  _$jscoverage['handlebars/handlebars.js'][539] = 0;
  _$jscoverage['handlebars/handlebars.js'][540] = 0;
  _$jscoverage['handlebars/handlebars.js'][542] = 0;
  _$jscoverage['handlebars/handlebars.js'][546] = 0;
  _$jscoverage['handlebars/handlebars.js'][549] = 0;
  _$jscoverage['handlebars/handlebars.js'][552] = 0;
  _$jscoverage['handlebars/handlebars.js'][555] = 0;
  _$jscoverage['handlebars/handlebars.js'][558] = 0;
  _$jscoverage['handlebars/handlebars.js'][560] = 0;
  _$jscoverage['handlebars/handlebars.js'][561] = 0;
  _$jscoverage['handlebars/handlebars.js'][563] = 0;
  _$jscoverage['handlebars/handlebars.js'][564] = 0;
  _$jscoverage['handlebars/handlebars.js'][566] = 0;
  _$jscoverage['handlebars/handlebars.js'][567] = 0;
  _$jscoverage['handlebars/handlebars.js'][568] = 0;
  _$jscoverage['handlebars/handlebars.js'][570] = 0;
  _$jscoverage['handlebars/handlebars.js'][571] = 0;
  _$jscoverage['handlebars/handlebars.js'][572] = 0;
  _$jscoverage['handlebars/handlebars.js'][574] = 0;
  _$jscoverage['handlebars/handlebars.js'][575] = 0;
  _$jscoverage['handlebars/handlebars.js'][576] = 0;
  _$jscoverage['handlebars/handlebars.js'][578] = 0;
  _$jscoverage['handlebars/handlebars.js'][579] = 0;
  _$jscoverage['handlebars/handlebars.js'][580] = 0;
  _$jscoverage['handlebars/handlebars.js'][581] = 0;
  _$jscoverage['handlebars/handlebars.js'][582] = 0;
  _$jscoverage['handlebars/handlebars.js'][583] = 0;
  _$jscoverage['handlebars/handlebars.js'][584] = 0;
  _$jscoverage['handlebars/handlebars.js'][585] = 0;
  _$jscoverage['handlebars/handlebars.js'][586] = 0;
  _$jscoverage['handlebars/handlebars.js'][587] = 0;
  _$jscoverage['handlebars/handlebars.js'][588] = 0;
  _$jscoverage['handlebars/handlebars.js'][589] = 0;
  _$jscoverage['handlebars/handlebars.js'][590] = 0;
  _$jscoverage['handlebars/handlebars.js'][591] = 0;
  _$jscoverage['handlebars/handlebars.js'][592] = 0;
  _$jscoverage['handlebars/handlebars.js'][593] = 0;
  _$jscoverage['handlebars/handlebars.js'][594] = 0;
  _$jscoverage['handlebars/handlebars.js'][595] = 0;
  _$jscoverage['handlebars/handlebars.js'][596] = 0;
  _$jscoverage['handlebars/handlebars.js'][597] = 0;
  _$jscoverage['handlebars/handlebars.js'][598] = 0;
  _$jscoverage['handlebars/handlebars.js'][599] = 0;
  _$jscoverage['handlebars/handlebars.js'][600] = 0;
  _$jscoverage['handlebars/handlebars.js'][601] = 0;
  _$jscoverage['handlebars/handlebars.js'][602] = 0;
  _$jscoverage['handlebars/handlebars.js'][603] = 0;
  _$jscoverage['handlebars/handlebars.js'][604] = 0;
  _$jscoverage['handlebars/handlebars.js'][605] = 0;
  _$jscoverage['handlebars/handlebars.js'][606] = 0;
  _$jscoverage['handlebars/handlebars.js'][607] = 0;
  _$jscoverage['handlebars/handlebars.js'][608] = 0;
  _$jscoverage['handlebars/handlebars.js'][610] = 0;
  _$jscoverage['handlebars/handlebars.js'][611] = 0;
  _$jscoverage['handlebars/handlebars.js'][612] = 0;
  _$jscoverage['handlebars/handlebars.js'][613] = 0;
  _$jscoverage['handlebars/handlebars.js'][614] = 0;
  _$jscoverage['handlebars/handlebars.js'][615] = 0;
  _$jscoverage['handlebars/handlebars.js'][616] = 0;
  _$jscoverage['handlebars/handlebars.js'][617] = 0;
  _$jscoverage['handlebars/handlebars.js'][618] = 0;
  _$jscoverage['handlebars/handlebars.js'][619] = 0;
  _$jscoverage['handlebars/handlebars.js'][620] = 0;
  _$jscoverage['handlebars/handlebars.js'][621] = 0;
  _$jscoverage['handlebars/handlebars.js'][622] = 0;
  _$jscoverage['handlebars/handlebars.js'][623] = 0;
  _$jscoverage['handlebars/handlebars.js'][624] = 0;
  _$jscoverage['handlebars/handlebars.js'][625] = 0;
  _$jscoverage['handlebars/handlebars.js'][626] = 0;
  _$jscoverage['handlebars/handlebars.js'][627] = 0;
  _$jscoverage['handlebars/handlebars.js'][628] = 0;
  _$jscoverage['handlebars/handlebars.js'][629] = 0;
  _$jscoverage['handlebars/handlebars.js'][630] = 0;
  _$jscoverage['handlebars/handlebars.js'][631] = 0;
  _$jscoverage['handlebars/handlebars.js'][632] = 0;
  _$jscoverage['handlebars/handlebars.js'][634] = 0;
  _$jscoverage['handlebars/handlebars.js'][635] = 0;
  _$jscoverage['handlebars/handlebars.js'][636] = 0;
  _$jscoverage['handlebars/handlebars.js'][637] = 0;
  _$jscoverage['handlebars/handlebars.js'][638] = 0;
  _$jscoverage['handlebars/handlebars.js'][641] = 0;
  _$jscoverage['handlebars/handlebars.js'][642] = 0;
  _$jscoverage['handlebars/handlebars.js'][643] = 0;
  _$jscoverage['handlebars/handlebars.js'][644] = 0;
  _$jscoverage['handlebars/handlebars.js'][645] = 0;
  _$jscoverage['handlebars/handlebars.js'][646] = 0;
  _$jscoverage['handlebars/handlebars.js'][647] = 0;
  _$jscoverage['handlebars/handlebars.js'][649] = 0;
  _$jscoverage['handlebars/handlebars.js'][651] = 0;
  _$jscoverage['handlebars/handlebars.js'][654] = 0;
  _$jscoverage['handlebars/handlebars.js'][656] = 0;
  _$jscoverage['handlebars/handlebars.js'][657] = 0;
  _$jscoverage['handlebars/handlebars.js'][660] = 0;
  _$jscoverage['handlebars/handlebars.js'][661] = 0;
  _$jscoverage['handlebars/handlebars.js'][662] = 0;
  _$jscoverage['handlebars/handlebars.js'][664] = 0;
  _$jscoverage['handlebars/handlebars.js'][666] = 0;
  _$jscoverage['handlebars/handlebars.js'][668] = 0;
  _$jscoverage['handlebars/handlebars.js'][669] = 0;
  _$jscoverage['handlebars/handlebars.js'][670] = 0;
  _$jscoverage['handlebars/handlebars.js'][671] = 0;
  _$jscoverage['handlebars/handlebars.js'][674] = 0;
  _$jscoverage['handlebars/handlebars.js'][675] = 0;
  _$jscoverage['handlebars/handlebars.js'][676] = 0;
  _$jscoverage['handlebars/handlebars.js'][677] = 0;
  _$jscoverage['handlebars/handlebars.js'][679] = 0;
  _$jscoverage['handlebars/handlebars.js'][680] = 0;
  _$jscoverage['handlebars/handlebars.js'][684] = 0;
  _$jscoverage['handlebars/handlebars.js'][689] = 0;
  _$jscoverage['handlebars/handlebars.js'][696] = 0;
  _$jscoverage['handlebars/handlebars.js'][697] = 0;
  _$jscoverage['handlebars/handlebars.js'][698] = 0;
  _$jscoverage['handlebars/handlebars.js'][699] = 0;
  _$jscoverage['handlebars/handlebars.js'][702] = 0;
  _$jscoverage['handlebars/handlebars.js'][703] = 0;
  _$jscoverage['handlebars/handlebars.js'][704] = 0;
  _$jscoverage['handlebars/handlebars.js'][708] = 0;
  _$jscoverage['handlebars/handlebars.js'][709] = 0;
  _$jscoverage['handlebars/handlebars.js'][710] = 0;
  _$jscoverage['handlebars/handlebars.js'][711] = 0;
  _$jscoverage['handlebars/handlebars.js'][712] = 0;
  _$jscoverage['handlebars/handlebars.js'][713] = 0;
  _$jscoverage['handlebars/handlebars.js'][715] = 0;
  _$jscoverage['handlebars/handlebars.js'][716] = 0;
  _$jscoverage['handlebars/handlebars.js'][720] = 0;
  _$jscoverage['handlebars/handlebars.js'][721] = 0;
  _$jscoverage['handlebars/handlebars.js'][722] = 0;
  _$jscoverage['handlebars/handlebars.js'][725] = 0;
  _$jscoverage['handlebars/handlebars.js'][726] = 0;
  _$jscoverage['handlebars/handlebars.js'][727] = 0;
  _$jscoverage['handlebars/handlebars.js'][730] = 0;
  _$jscoverage['handlebars/handlebars.js'][731] = 0;
  _$jscoverage['handlebars/handlebars.js'][732] = 0;
  _$jscoverage['handlebars/handlebars.js'][734] = 0;
  _$jscoverage['handlebars/handlebars.js'][736] = 0;
  _$jscoverage['handlebars/handlebars.js'][737] = 0;
  _$jscoverage['handlebars/handlebars.js'][739] = 0;
  _$jscoverage['handlebars/handlebars.js'][740] = 0;
  _$jscoverage['handlebars/handlebars.js'][741] = 0;
  _$jscoverage['handlebars/handlebars.js'][742] = 0;
  _$jscoverage['handlebars/handlebars.js'][744] = 0;
  _$jscoverage['handlebars/handlebars.js'][747] = 0;
  _$jscoverage['handlebars/handlebars.js'][748] = 0;
  _$jscoverage['handlebars/handlebars.js'][749] = 0;
  _$jscoverage['handlebars/handlebars.js'][753] = 0;
  _$jscoverage['handlebars/handlebars.js'][755] = 0;
  _$jscoverage['handlebars/handlebars.js'][758] = 0;
  _$jscoverage['handlebars/handlebars.js'][759] = 0;
  _$jscoverage['handlebars/handlebars.js'][760] = 0;
  _$jscoverage['handlebars/handlebars.js'][763] = 0;
  _$jscoverage['handlebars/handlebars.js'][764] = 0;
  _$jscoverage['handlebars/handlebars.js'][765] = 0;
  _$jscoverage['handlebars/handlebars.js'][768] = 0;
  _$jscoverage['handlebars/handlebars.js'][769] = 0;
  _$jscoverage['handlebars/handlebars.js'][770] = 0;
  _$jscoverage['handlebars/handlebars.js'][771] = 0;
  _$jscoverage['handlebars/handlebars.js'][774] = 0;
  _$jscoverage['handlebars/handlebars.js'][775] = 0;
  _$jscoverage['handlebars/handlebars.js'][776] = 0;
  _$jscoverage['handlebars/handlebars.js'][777] = 0;
  _$jscoverage['handlebars/handlebars.js'][780] = 0;
  _$jscoverage['handlebars/handlebars.js'][781] = 0;
  _$jscoverage['handlebars/handlebars.js'][782] = 0;
  _$jscoverage['handlebars/handlebars.js'][783] = 0;
  _$jscoverage['handlebars/handlebars.js'][786] = 0;
  _$jscoverage['handlebars/handlebars.js'][787] = 0;
  _$jscoverage['handlebars/handlebars.js'][788] = 0;
  _$jscoverage['handlebars/handlebars.js'][791] = 0;
  _$jscoverage['handlebars/handlebars.js'][794] = 0;
  _$jscoverage['handlebars/handlebars.js'][796] = 0;
  _$jscoverage['handlebars/handlebars.js'][797] = 0;
  _$jscoverage['handlebars/handlebars.js'][800] = 0;
  _$jscoverage['handlebars/handlebars.js'][801] = 0;
  _$jscoverage['handlebars/handlebars.js'][804] = 0;
  _$jscoverage['handlebars/handlebars.js'][807] = 0;
  _$jscoverage['handlebars/handlebars.js'][808] = 0;
  _$jscoverage['handlebars/handlebars.js'][810] = 0;
  _$jscoverage['handlebars/handlebars.js'][811] = 0;
  _$jscoverage['handlebars/handlebars.js'][814] = 0;
  _$jscoverage['handlebars/handlebars.js'][815] = 0;
  _$jscoverage['handlebars/handlebars.js'][824] = 0;
  _$jscoverage['handlebars/handlebars.js'][825] = 0;
  _$jscoverage['handlebars/handlebars.js'][827] = 0;
  _$jscoverage['handlebars/handlebars.js'][828] = 0;
  _$jscoverage['handlebars/handlebars.js'][831] = 0;
  _$jscoverage['handlebars/handlebars.js'][834] = 0;
  _$jscoverage['handlebars/handlebars.js'][835] = 0;
  _$jscoverage['handlebars/handlebars.js'][836] = 0;
  _$jscoverage['handlebars/handlebars.js'][837] = 0;
  _$jscoverage['handlebars/handlebars.js'][840] = 0;
  _$jscoverage['handlebars/handlebars.js'][841] = 0;
  _$jscoverage['handlebars/handlebars.js'][845] = 0;
  _$jscoverage['handlebars/handlebars.js'][846] = 0;
  _$jscoverage['handlebars/handlebars.js'][847] = 0;
  _$jscoverage['handlebars/handlebars.js'][848] = 0;
  _$jscoverage['handlebars/handlebars.js'][850] = 0;
  _$jscoverage['handlebars/handlebars.js'][854] = 0;
  _$jscoverage['handlebars/handlebars.js'][858] = 0;
  _$jscoverage['handlebars/handlebars.js'][859] = 0;
  _$jscoverage['handlebars/handlebars.js'][861] = 0;
  _$jscoverage['handlebars/handlebars.js'][867] = 0;
  _$jscoverage['handlebars/handlebars.js'][871] = 0;
  _$jscoverage['handlebars/handlebars.js'][873] = 0;
  _$jscoverage['handlebars/handlebars.js'][874] = 0;
  _$jscoverage['handlebars/handlebars.js'][876] = 0;
  _$jscoverage['handlebars/handlebars.js'][877] = 0;
  _$jscoverage['handlebars/handlebars.js'][879] = 0;
  _$jscoverage['handlebars/handlebars.js'][880] = 0;
  _$jscoverage['handlebars/handlebars.js'][881] = 0;
  _$jscoverage['handlebars/handlebars.js'][882] = 0;
  _$jscoverage['handlebars/handlebars.js'][883] = 0;
  _$jscoverage['handlebars/handlebars.js'][885] = 0;
  _$jscoverage['handlebars/handlebars.js'][887] = 0;
  _$jscoverage['handlebars/handlebars.js'][891] = 0;
  _$jscoverage['handlebars/handlebars.js'][894] = 0;
  _$jscoverage['handlebars/handlebars.js'][895] = 0;
  _$jscoverage['handlebars/handlebars.js'][896] = 0;
  _$jscoverage['handlebars/handlebars.js'][899] = 0;
  _$jscoverage['handlebars/handlebars.js'][900] = 0;
  _$jscoverage['handlebars/handlebars.js'][902] = 0;
  _$jscoverage['handlebars/handlebars.js'][903] = 0;
  _$jscoverage['handlebars/handlebars.js'][905] = 0;
  _$jscoverage['handlebars/handlebars.js'][906] = 0;
  _$jscoverage['handlebars/handlebars.js'][907] = 0;
  _$jscoverage['handlebars/handlebars.js'][911] = 0;
  _$jscoverage['handlebars/handlebars.js'][917] = 0;
  _$jscoverage['handlebars/handlebars.js'][918] = 0;
  _$jscoverage['handlebars/handlebars.js'][919] = 0;
  _$jscoverage['handlebars/handlebars.js'][922] = 0;
  _$jscoverage['handlebars/handlebars.js'][923] = 0;
  _$jscoverage['handlebars/handlebars.js'][932] = 0;
  _$jscoverage['handlebars/handlebars.js'][933] = 0;
  _$jscoverage['handlebars/handlebars.js'][934] = 0;
  _$jscoverage['handlebars/handlebars.js'][938] = 0;
  _$jscoverage['handlebars/handlebars.js'][942] = 0;
  _$jscoverage['handlebars/handlebars.js'][946] = 0;
  _$jscoverage['handlebars/handlebars.js'][947] = 0;
  _$jscoverage['handlebars/handlebars.js'][949] = 0;
  _$jscoverage['handlebars/handlebars.js'][950] = 0;
  _$jscoverage['handlebars/handlebars.js'][951] = 0;
  _$jscoverage['handlebars/handlebars.js'][953] = 0;
  _$jscoverage['handlebars/handlebars.js'][955] = 0;
  _$jscoverage['handlebars/handlebars.js'][956] = 0;
  _$jscoverage['handlebars/handlebars.js'][959] = 0;
  _$jscoverage['handlebars/handlebars.js'][963] = 0;
  _$jscoverage['handlebars/handlebars.js'][964] = 0;
  _$jscoverage['handlebars/handlebars.js'][966] = 0;
  _$jscoverage['handlebars/handlebars.js'][968] = 0;
  _$jscoverage['handlebars/handlebars.js'][970] = 0;
  _$jscoverage['handlebars/handlebars.js'][971] = 0;
  _$jscoverage['handlebars/handlebars.js'][973] = 0;
  _$jscoverage['handlebars/handlebars.js'][974] = 0;
  _$jscoverage['handlebars/handlebars.js'][977] = 0;
  _$jscoverage['handlebars/handlebars.js'][981] = 0;
  _$jscoverage['handlebars/handlebars.js'][985] = 0;
  _$jscoverage['handlebars/handlebars.js'][986] = 0;
  _$jscoverage['handlebars/handlebars.js'][989] = 0;
  _$jscoverage['handlebars/handlebars.js'][990] = 0;
  _$jscoverage['handlebars/handlebars.js'][993] = 0;
  _$jscoverage['handlebars/handlebars.js'][995] = 0;
  _$jscoverage['handlebars/handlebars.js'][996] = 0;
  _$jscoverage['handlebars/handlebars.js'][997] = 0;
  _$jscoverage['handlebars/handlebars.js'][998] = 0;
  _$jscoverage['handlebars/handlebars.js'][1002] = 0;
  _$jscoverage['handlebars/handlebars.js'][1003] = 0;
  _$jscoverage['handlebars/handlebars.js'][1004] = 0;
  _$jscoverage['handlebars/handlebars.js'][1005] = 0;
  _$jscoverage['handlebars/handlebars.js'][1007] = 0;
  _$jscoverage['handlebars/handlebars.js'][1011] = 0;
  _$jscoverage['handlebars/handlebars.js'][1012] = 0;
  _$jscoverage['handlebars/handlebars.js'][1013] = 0;
  _$jscoverage['handlebars/handlebars.js'][1014] = 0;
  _$jscoverage['handlebars/handlebars.js'][1017] = 0;
  _$jscoverage['handlebars/handlebars.js'][1021] = 0;
  _$jscoverage['handlebars/handlebars.js'][1023] = 0;
  _$jscoverage['handlebars/handlebars.js'][1025] = 0;
  _$jscoverage['handlebars/handlebars.js'][1026] = 0;
  _$jscoverage['handlebars/handlebars.js'][1027] = 0;
  _$jscoverage['handlebars/handlebars.js'][1029] = 0;
  _$jscoverage['handlebars/handlebars.js'][1030] = 0;
  _$jscoverage['handlebars/handlebars.js'][1032] = 0;
  _$jscoverage['handlebars/handlebars.js'][1035] = 0;
  _$jscoverage['handlebars/handlebars.js'][1037] = 0;
  _$jscoverage['handlebars/handlebars.js'][1041] = 0;
  _$jscoverage['handlebars/handlebars.js'][1042] = 0;
  _$jscoverage['handlebars/handlebars.js'][1044] = 0;
  _$jscoverage['handlebars/handlebars.js'][1045] = 0;
  _$jscoverage['handlebars/handlebars.js'][1047] = 0;
  _$jscoverage['handlebars/handlebars.js'][1050] = 0;
  _$jscoverage['handlebars/handlebars.js'][1051] = 0;
  _$jscoverage['handlebars/handlebars.js'][1055] = 0;
  _$jscoverage['handlebars/handlebars.js'][1059] = 0;
  _$jscoverage['handlebars/handlebars.js'][1060] = 0;
  _$jscoverage['handlebars/handlebars.js'][1062] = 0;
  _$jscoverage['handlebars/handlebars.js'][1063] = 0;
  _$jscoverage['handlebars/handlebars.js'][1064] = 0;
  _$jscoverage['handlebars/handlebars.js'][1065] = 0;
  _$jscoverage['handlebars/handlebars.js'][1067] = 0;
  _$jscoverage['handlebars/handlebars.js'][1070] = 0;
  _$jscoverage['handlebars/handlebars.js'][1071] = 0;
  _$jscoverage['handlebars/handlebars.js'][1073] = 0;
  _$jscoverage['handlebars/handlebars.js'][1078] = 0;
  _$jscoverage['handlebars/handlebars.js'][1082] = 0;
  _$jscoverage['handlebars/handlebars.js'][1084] = 0;
  _$jscoverage['handlebars/handlebars.js'][1085] = 0;
  _$jscoverage['handlebars/handlebars.js'][1087] = 0;
  _$jscoverage['handlebars/handlebars.js'][1091] = 0;
  _$jscoverage['handlebars/handlebars.js'][1093] = 0;
  _$jscoverage['handlebars/handlebars.js'][1094] = 0;
  _$jscoverage['handlebars/handlebars.js'][1095] = 0;
  _$jscoverage['handlebars/handlebars.js'][1096] = 0;
  _$jscoverage['handlebars/handlebars.js'][1099] = 0;
  _$jscoverage['handlebars/handlebars.js'][1100] = 0;
  _$jscoverage['handlebars/handlebars.js'][1101] = 0;
  _$jscoverage['handlebars/handlebars.js'][1104] = 0;
  _$jscoverage['handlebars/handlebars.js'][1108] = 0;
  _$jscoverage['handlebars/handlebars.js'][1111] = 0;
  _$jscoverage['handlebars/handlebars.js'][1112] = 0;
  _$jscoverage['handlebars/handlebars.js'][1113] = 0;
  _$jscoverage['handlebars/handlebars.js'][1114] = 0;
  _$jscoverage['handlebars/handlebars.js'][1116] = 0;
  _$jscoverage['handlebars/handlebars.js'][1121] = 0;
  _$jscoverage['handlebars/handlebars.js'][1122] = 0;
  _$jscoverage['handlebars/handlebars.js'][1124] = 0;
  _$jscoverage['handlebars/handlebars.js'][1125] = 0;
  _$jscoverage['handlebars/handlebars.js'][1126] = 0;
  _$jscoverage['handlebars/handlebars.js'][1128] = 0;
  _$jscoverage['handlebars/handlebars.js'][1131] = 0;
  _$jscoverage['handlebars/handlebars.js'][1132] = 0;
  _$jscoverage['handlebars/handlebars.js'][1137] = 0;
  _$jscoverage['handlebars/handlebars.js'][1138] = 0;
  _$jscoverage['handlebars/handlebars.js'][1142] = 0;
  _$jscoverage['handlebars/handlebars.js'][1146] = 0;
  _$jscoverage['handlebars/handlebars.js'][1150] = 0;
  _$jscoverage['handlebars/handlebars.js'][1157] = 0;
  _$jscoverage['handlebars/handlebars.js'][1161] = 0;
  _$jscoverage['handlebars/handlebars.js'][1165] = 0;
  _$jscoverage['handlebars/handlebars.js'][1166] = 0;
  _$jscoverage['handlebars/handlebars.js'][1168] = 0;
  _$jscoverage['handlebars/handlebars.js'][1169] = 0;
  _$jscoverage['handlebars/handlebars.js'][1170] = 0;
  _$jscoverage['handlebars/handlebars.js'][1175] = 0;
  _$jscoverage['handlebars/handlebars.js'][1176] = 0;
  _$jscoverage['handlebars/handlebars.js'][1177] = 0;
  _$jscoverage['handlebars/handlebars.js'][1180] = 0;
  _$jscoverage['handlebars/handlebars.js'][1181] = 0;
  _$jscoverage['handlebars/handlebars.js'][1183] = 0;
  _$jscoverage['handlebars/handlebars.js'][1184] = 0;
  _$jscoverage['handlebars/handlebars.js'][1185] = 0;
  _$jscoverage['handlebars/handlebars.js'][1186] = 0;
  _$jscoverage['handlebars/handlebars.js'][1190] = 0;
  _$jscoverage['handlebars/handlebars.js'][1191] = 0;
  _$jscoverage['handlebars/handlebars.js'][1192] = 0;
  _$jscoverage['handlebars/handlebars.js'][1196] = 0;
  _$jscoverage['handlebars/handlebars.js'][1198] = 0;
  _$jscoverage['handlebars/handlebars.js'][1199] = 0;
  _$jscoverage['handlebars/handlebars.js'][1201] = 0;
  _$jscoverage['handlebars/handlebars.js'][1202] = 0;
  _$jscoverage['handlebars/handlebars.js'][1203] = 0;
  _$jscoverage['handlebars/handlebars.js'][1206] = 0;
  _$jscoverage['handlebars/handlebars.js'][1207] = 0;
  _$jscoverage['handlebars/handlebars.js'][1209] = 0;
  _$jscoverage['handlebars/handlebars.js'][1215] = 0;
  _$jscoverage['handlebars/handlebars.js'][1216] = 0;
  _$jscoverage['handlebars/handlebars.js'][1218] = 0;
  _$jscoverage['handlebars/handlebars.js'][1219] = 0;
  _$jscoverage['handlebars/handlebars.js'][1221] = 0;
  _$jscoverage['handlebars/handlebars.js'][1224] = 0;
  _$jscoverage['handlebars/handlebars.js'][1229] = 0;
  _$jscoverage['handlebars/handlebars.js'][1230] = 0;
  _$jscoverage['handlebars/handlebars.js'][1232] = 0;
  _$jscoverage['handlebars/handlebars.js'][1233] = 0;
  _$jscoverage['handlebars/handlebars.js'][1235] = 0;
  _$jscoverage['handlebars/handlebars.js'][1236] = 0;
  _$jscoverage['handlebars/handlebars.js'][1238] = 0;
  _$jscoverage['handlebars/handlebars.js'][1241] = 0;
  _$jscoverage['handlebars/handlebars.js'][1245] = 0;
  _$jscoverage['handlebars/handlebars.js'][1246] = 0;
  _$jscoverage['handlebars/handlebars.js'][1249] = 0;
  _$jscoverage['handlebars/handlebars.js'][1253] = 0;
  _$jscoverage['handlebars/handlebars.js'][1254] = 0;
  _$jscoverage['handlebars/handlebars.js'][1255] = 0;
  _$jscoverage['handlebars/handlebars.js'][1256] = 0;
  _$jscoverage['handlebars/handlebars.js'][1259] = 0;
  _$jscoverage['handlebars/handlebars.js'][1264] = 0;
  _$jscoverage['handlebars/handlebars.js'][1265] = 0;
  _$jscoverage['handlebars/handlebars.js'][1267] = 0;
  _$jscoverage['handlebars/handlebars.js'][1270] = 0;
  _$jscoverage['handlebars/handlebars.js'][1276] = 0;
  _$jscoverage['handlebars/handlebars.js'][1283] = 0;
  _$jscoverage['handlebars/handlebars.js'][1284] = 0;
  _$jscoverage['handlebars/handlebars.js'][1286] = 0;
  _$jscoverage['handlebars/handlebars.js'][1288] = 0;
  _$jscoverage['handlebars/handlebars.js'][1289] = 0;
  _$jscoverage['handlebars/handlebars.js'][1290] = 0;
  _$jscoverage['handlebars/handlebars.js'][1296] = 0;
  _$jscoverage['handlebars/handlebars.js'][1298] = 0;
  _$jscoverage['handlebars/handlebars.js'][1299] = 0;
  _$jscoverage['handlebars/handlebars.js'][1300] = 0;
  _$jscoverage['handlebars/handlebars.js'][1301] = 0;
  _$jscoverage['handlebars/handlebars.js'][1302] = 0;
  _$jscoverage['handlebars/handlebars.js'][1304] = 0;
  _$jscoverage['handlebars/handlebars.js'][1306] = 0;
  _$jscoverage['handlebars/handlebars.js'][1308] = 0;
  _$jscoverage['handlebars/handlebars.js'][1310] = 0;
  _$jscoverage['handlebars/handlebars.js'][1311] = 0;
  _$jscoverage['handlebars/handlebars.js'][1313] = 0;
  _$jscoverage['handlebars/handlebars.js'][1314] = 0;
  _$jscoverage['handlebars/handlebars.js'][1316] = 0;
  _$jscoverage['handlebars/handlebars.js'][1320] = 0;
  _$jscoverage['handlebars/handlebars.js'][1324] = 0;
  _$jscoverage['handlebars/handlebars.js'][1325] = 0;
  _$jscoverage['handlebars/handlebars.js'][1329] = 0;
  _$jscoverage['handlebars/handlebars.js'][1333] = 0;
  _$jscoverage['handlebars/handlebars.js'][1335] = 0;
  _$jscoverage['handlebars/handlebars.js'][1336] = 0;
  _$jscoverage['handlebars/handlebars.js'][1337] = 0;
  _$jscoverage['handlebars/handlebars.js'][1338] = 0;
  _$jscoverage['handlebars/handlebars.js'][1339] = 0;
  _$jscoverage['handlebars/handlebars.js'][1340] = 0;
  _$jscoverage['handlebars/handlebars.js'][1342] = 0;
  _$jscoverage['handlebars/handlebars.js'][1345] = 0;
  _$jscoverage['handlebars/handlebars.js'][1346] = 0;
  _$jscoverage['handlebars/handlebars.js'][1348] = 0;
  _$jscoverage['handlebars/handlebars.js'][1353] = 0;
  _$jscoverage['handlebars/handlebars.js'][1354] = 0;
  _$jscoverage['handlebars/handlebars.js'][1358] = 0;
  _$jscoverage['handlebars/handlebars.js'][1360] = 0;
  _$jscoverage['handlebars/handlebars.js'][1361] = 0;
  _$jscoverage['handlebars/handlebars.js'][1365] = 0;
  _$jscoverage['handlebars/handlebars.js'][1366] = 0;
  _$jscoverage['handlebars/handlebars.js'][1367] = 0;
  _$jscoverage['handlebars/handlebars.js'][1371] = 0;
  _$jscoverage['handlebars/handlebars.js'][1372] = 0;
  _$jscoverage['handlebars/handlebars.js'][1376] = 0;
  _$jscoverage['handlebars/handlebars.js'][1377] = 0;
  _$jscoverage['handlebars/handlebars.js'][1380] = 0;
  _$jscoverage['handlebars/handlebars.js'][1381] = 0;
  _$jscoverage['handlebars/handlebars.js'][1384] = 0;
  _$jscoverage['handlebars/handlebars.js'][1386] = 0;
  _$jscoverage['handlebars/handlebars.js'][1387] = 0;
  _$jscoverage['handlebars/handlebars.js'][1391] = 0;
  _$jscoverage['handlebars/handlebars.js'][1393] = 0;
  _$jscoverage['handlebars/handlebars.js'][1394] = 0;
  _$jscoverage['handlebars/handlebars.js'][1396] = 0;
  _$jscoverage['handlebars/handlebars.js'][1399] = 0;
  _$jscoverage['handlebars/handlebars.js'][1400] = 0;
  _$jscoverage['handlebars/handlebars.js'][1402] = 0;
  _$jscoverage['handlebars/handlebars.js'][1404] = 0;
  _$jscoverage['handlebars/handlebars.js'][1405] = 0;
  _$jscoverage['handlebars/handlebars.js'][1406] = 0;
  _$jscoverage['handlebars/handlebars.js'][1412] = 0;
  _$jscoverage['handlebars/handlebars.js'][1414] = 0;
  _$jscoverage['handlebars/handlebars.js'][1415] = 0;
  _$jscoverage['handlebars/handlebars.js'][1416] = 0;
  _$jscoverage['handlebars/handlebars.js'][1417] = 0;
  _$jscoverage['handlebars/handlebars.js'][1418] = 0;
  _$jscoverage['handlebars/handlebars.js'][1420] = 0;
  _$jscoverage['handlebars/handlebars.js'][1423] = 0;
  _$jscoverage['handlebars/handlebars.js'][1424] = 0;
  _$jscoverage['handlebars/handlebars.js'][1425] = 0;
  _$jscoverage['handlebars/handlebars.js'][1427] = 0;
  _$jscoverage['handlebars/handlebars.js'][1430] = 0;
  _$jscoverage['handlebars/handlebars.js'][1443] = 0;
  _$jscoverage['handlebars/handlebars.js'][1445] = 0;
  _$jscoverage['handlebars/handlebars.js'][1446] = 0;
  _$jscoverage['handlebars/handlebars.js'][1448] = 0;
  _$jscoverage['handlebars/handlebars.js'][1449] = 0;
  _$jscoverage['handlebars/handlebars.js'][1450] = 0;
  _$jscoverage['handlebars/handlebars.js'][1461] = 0;
  _$jscoverage['handlebars/handlebars.js'][1463] = 0;
  _$jscoverage['handlebars/handlebars.js'][1464] = 0;
  _$jscoverage['handlebars/handlebars.js'][1466] = 0;
  _$jscoverage['handlebars/handlebars.js'][1467] = 0;
  _$jscoverage['handlebars/handlebars.js'][1470] = 0;
  _$jscoverage['handlebars/handlebars.js'][1472] = 0;
  _$jscoverage['handlebars/handlebars.js'][1482] = 0;
  _$jscoverage['handlebars/handlebars.js'][1497] = 0;
  _$jscoverage['handlebars/handlebars.js'][1498] = 0;
  _$jscoverage['handlebars/handlebars.js'][1499] = 0;
  _$jscoverage['handlebars/handlebars.js'][1500] = 0;
  _$jscoverage['handlebars/handlebars.js'][1501] = 0;
  _$jscoverage['handlebars/handlebars.js'][1512] = 0;
  _$jscoverage['handlebars/handlebars.js'][1514] = 0;
  _$jscoverage['handlebars/handlebars.js'][1525] = 0;
  _$jscoverage['handlebars/handlebars.js'][1526] = 0;
  _$jscoverage['handlebars/handlebars.js'][1538] = 0;
  _$jscoverage['handlebars/handlebars.js'][1548] = 0;
  _$jscoverage['handlebars/handlebars.js'][1559] = 0;
  _$jscoverage['handlebars/handlebars.js'][1561] = 0;
  _$jscoverage['handlebars/handlebars.js'][1562] = 0;
  _$jscoverage['handlebars/handlebars.js'][1574] = 0;
  _$jscoverage['handlebars/handlebars.js'][1575] = 0;
  _$jscoverage['handlebars/handlebars.js'][1586] = 0;
  _$jscoverage['handlebars/handlebars.js'][1598] = 0;
  _$jscoverage['handlebars/handlebars.js'][1600] = 0;
  _$jscoverage['handlebars/handlebars.js'][1602] = 0;
  _$jscoverage['handlebars/handlebars.js'][1603] = 0;
  _$jscoverage['handlebars/handlebars.js'][1605] = 0;
  _$jscoverage['handlebars/handlebars.js'][1610] = 0;
  _$jscoverage['handlebars/handlebars.js'][1612] = 0;
  _$jscoverage['handlebars/handlebars.js'][1613] = 0;
  _$jscoverage['handlebars/handlebars.js'][1617] = 0;
  _$jscoverage['handlebars/handlebars.js'][1620] = 0;
  _$jscoverage['handlebars/handlebars.js'][1621] = 0;
  _$jscoverage['handlebars/handlebars.js'][1623] = 0;
  _$jscoverage['handlebars/handlebars.js'][1624] = 0;
  _$jscoverage['handlebars/handlebars.js'][1626] = 0;
  _$jscoverage['handlebars/handlebars.js'][1636] = 0;
  _$jscoverage['handlebars/handlebars.js'][1646] = 0;
  _$jscoverage['handlebars/handlebars.js'][1647] = 0;
  _$jscoverage['handlebars/handlebars.js'][1659] = 0;
  _$jscoverage['handlebars/handlebars.js'][1671] = 0;
  _$jscoverage['handlebars/handlebars.js'][1672] = 0;
  _$jscoverage['handlebars/handlebars.js'][1674] = 0;
  _$jscoverage['handlebars/handlebars.js'][1688] = 0;
  _$jscoverage['handlebars/handlebars.js'][1690] = 0;
  _$jscoverage['handlebars/handlebars.js'][1692] = 0;
  _$jscoverage['handlebars/handlebars.js'][1693] = 0;
  _$jscoverage['handlebars/handlebars.js'][1694] = 0;
  _$jscoverage['handlebars/handlebars.js'][1708] = 0;
  _$jscoverage['handlebars/handlebars.js'][1709] = 0;
  _$jscoverage['handlebars/handlebars.js'][1725] = 0;
  _$jscoverage['handlebars/handlebars.js'][1727] = 0;
  _$jscoverage['handlebars/handlebars.js'][1728] = 0;
  _$jscoverage['handlebars/handlebars.js'][1730] = 0;
  _$jscoverage['handlebars/handlebars.js'][1732] = 0;
  _$jscoverage['handlebars/handlebars.js'][1733] = 0;
  _$jscoverage['handlebars/handlebars.js'][1735] = 0;
  _$jscoverage['handlebars/handlebars.js'][1736] = 0;
  _$jscoverage['handlebars/handlebars.js'][1747] = 0;
  _$jscoverage['handlebars/handlebars.js'][1749] = 0;
  _$jscoverage['handlebars/handlebars.js'][1750] = 0;
  _$jscoverage['handlebars/handlebars.js'][1753] = 0;
  _$jscoverage['handlebars/handlebars.js'][1754] = 0;
  _$jscoverage['handlebars/handlebars.js'][1765] = 0;
  _$jscoverage['handlebars/handlebars.js'][1768] = 0;
  _$jscoverage['handlebars/handlebars.js'][1769] = 0;
  _$jscoverage['handlebars/handlebars.js'][1770] = 0;
  _$jscoverage['handlebars/handlebars.js'][1773] = 0;
  _$jscoverage['handlebars/handlebars.js'][1774] = 0;
  _$jscoverage['handlebars/handlebars.js'][1775] = 0;
  _$jscoverage['handlebars/handlebars.js'][1777] = 0;
  _$jscoverage['handlebars/handlebars.js'][1785] = 0;
  _$jscoverage['handlebars/handlebars.js'][1787] = 0;
  _$jscoverage['handlebars/handlebars.js'][1788] = 0;
  _$jscoverage['handlebars/handlebars.js'][1789] = 0;
  _$jscoverage['handlebars/handlebars.js'][1791] = 0;
  _$jscoverage['handlebars/handlebars.js'][1793] = 0;
  _$jscoverage['handlebars/handlebars.js'][1794] = 0;
  _$jscoverage['handlebars/handlebars.js'][1795] = 0;
  _$jscoverage['handlebars/handlebars.js'][1796] = 0;
  _$jscoverage['handlebars/handlebars.js'][1797] = 0;
  _$jscoverage['handlebars/handlebars.js'][1798] = 0;
  _$jscoverage['handlebars/handlebars.js'][1799] = 0;
  _$jscoverage['handlebars/handlebars.js'][1801] = 0;
  _$jscoverage['handlebars/handlebars.js'][1802] = 0;
  _$jscoverage['handlebars/handlebars.js'][1807] = 0;
  _$jscoverage['handlebars/handlebars.js'][1808] = 0;
  _$jscoverage['handlebars/handlebars.js'][1809] = 0;
  _$jscoverage['handlebars/handlebars.js'][1810] = 0;
  _$jscoverage['handlebars/handlebars.js'][1816] = 0;
  _$jscoverage['handlebars/handlebars.js'][1818] = 0;
  _$jscoverage['handlebars/handlebars.js'][1819] = 0;
  _$jscoverage['handlebars/handlebars.js'][1822] = 0;
  _$jscoverage['handlebars/handlebars.js'][1825] = 0;
  _$jscoverage['handlebars/handlebars.js'][1827] = 0;
  _$jscoverage['handlebars/handlebars.js'][1828] = 0;
  _$jscoverage['handlebars/handlebars.js'][1830] = 0;
  _$jscoverage['handlebars/handlebars.js'][1831] = 0;
  _$jscoverage['handlebars/handlebars.js'][1834] = 0;
  _$jscoverage['handlebars/handlebars.js'][1835] = 0;
  _$jscoverage['handlebars/handlebars.js'][1837] = 0;
  _$jscoverage['handlebars/handlebars.js'][1838] = 0;
  _$jscoverage['handlebars/handlebars.js'][1843] = 0;
  _$jscoverage['handlebars/handlebars.js'][1844] = 0;
  _$jscoverage['handlebars/handlebars.js'][1848] = 0;
  _$jscoverage['handlebars/handlebars.js'][1849] = 0;
  _$jscoverage['handlebars/handlebars.js'][1850] = 0;
  _$jscoverage['handlebars/handlebars.js'][1855] = 0;
  _$jscoverage['handlebars/handlebars.js'][1859] = 0;
  _$jscoverage['handlebars/handlebars.js'][1861] = 0;
  _$jscoverage['handlebars/handlebars.js'][1862] = 0;
  _$jscoverage['handlebars/handlebars.js'][1863] = 0;
  _$jscoverage['handlebars/handlebars.js'][1865] = 0;
  _$jscoverage['handlebars/handlebars.js'][1866] = 0;
  _$jscoverage['handlebars/handlebars.js'][1870] = 0;
  _$jscoverage['handlebars/handlebars.js'][1876] = 0;
  _$jscoverage['handlebars/handlebars.js'][1877] = 0;
  _$jscoverage['handlebars/handlebars.js'][1879] = 0;
  _$jscoverage['handlebars/handlebars.js'][1881] = 0;
  _$jscoverage['handlebars/handlebars.js'][1884] = 0;
  _$jscoverage['handlebars/handlebars.js'][1886] = 0;
  _$jscoverage['handlebars/handlebars.js'][1887] = 0;
  _$jscoverage['handlebars/handlebars.js'][1890] = 0;
  _$jscoverage['handlebars/handlebars.js'][1893] = 0;
  _$jscoverage['handlebars/handlebars.js'][1895] = 0;
  _$jscoverage['handlebars/handlebars.js'][1896] = 0;
  _$jscoverage['handlebars/handlebars.js'][1897] = 0;
  _$jscoverage['handlebars/handlebars.js'][1899] = 0;
  _$jscoverage['handlebars/handlebars.js'][1902] = 0;
  _$jscoverage['handlebars/handlebars.js'][1903] = 0;
  _$jscoverage['handlebars/handlebars.js'][1906] = 0;
  _$jscoverage['handlebars/handlebars.js'][1908] = 0;
  _$jscoverage['handlebars/handlebars.js'][1912] = 0;
  _$jscoverage['handlebars/handlebars.js'][1916] = 0;
  _$jscoverage['handlebars/handlebars.js'][1917] = 0;
  _$jscoverage['handlebars/handlebars.js'][1918] = 0;
  _$jscoverage['handlebars/handlebars.js'][1921] = 0;
  _$jscoverage['handlebars/handlebars.js'][1924] = 0;
  _$jscoverage['handlebars/handlebars.js'][1925] = 0;
  _$jscoverage['handlebars/handlebars.js'][1926] = 0;
  _$jscoverage['handlebars/handlebars.js'][1927] = 0;
  _$jscoverage['handlebars/handlebars.js'][1928] = 0;
  _$jscoverage['handlebars/handlebars.js'][1929] = 0;
  _$jscoverage['handlebars/handlebars.js'][1930] = 0;
  _$jscoverage['handlebars/handlebars.js'][1932] = 0;
  _$jscoverage['handlebars/handlebars.js'][1938] = 0;
  _$jscoverage['handlebars/handlebars.js'][1942] = 0;
  _$jscoverage['handlebars/handlebars.js'][1945] = 0;
  _$jscoverage['handlebars/handlebars.js'][1946] = 0;
  _$jscoverage['handlebars/handlebars.js'][1948] = 0;
  _$jscoverage['handlebars/handlebars.js'][1949] = 0;
  _$jscoverage['handlebars/handlebars.js'][1951] = 0;
  _$jscoverage['handlebars/handlebars.js'][1956] = 0;
  _$jscoverage['handlebars/handlebars.js'][1959] = 0;
  _$jscoverage['handlebars/handlebars.js'][1960] = 0;
  _$jscoverage['handlebars/handlebars.js'][1962] = 0;
  _$jscoverage['handlebars/handlebars.js'][1967] = 0;
  _$jscoverage['handlebars/handlebars.js'][1975] = 0;
  _$jscoverage['handlebars/handlebars.js'][1976] = 0;
  _$jscoverage['handlebars/handlebars.js'][1977] = 0;
  _$jscoverage['handlebars/handlebars.js'][1979] = 0;
  _$jscoverage['handlebars/handlebars.js'][1990] = 0;
  _$jscoverage['handlebars/handlebars.js'][1992] = 0;
  _$jscoverage['handlebars/handlebars.js'][1994] = 0;
  _$jscoverage['handlebars/handlebars.js'][1995] = 0;
  _$jscoverage['handlebars/handlebars.js'][1999] = 0;
  _$jscoverage['handlebars/handlebars.js'][2000] = 0;
  _$jscoverage['handlebars/handlebars.js'][2001] = 0;
  _$jscoverage['handlebars/handlebars.js'][2002] = 0;
  _$jscoverage['handlebars/handlebars.js'][2005] = 0;
  _$jscoverage['handlebars/handlebars.js'][2006] = 0;
  _$jscoverage['handlebars/handlebars.js'][2007] = 0;
  _$jscoverage['handlebars/handlebars.js'][2010] = 0;
  _$jscoverage['handlebars/handlebars.js'][2011] = 0;
  _$jscoverage['handlebars/handlebars.js'][2014] = 0;
  _$jscoverage['handlebars/handlebars.js'][2015] = 0;
  _$jscoverage['handlebars/handlebars.js'][2016] = 0;
  _$jscoverage['handlebars/handlebars.js'][2018] = 0;
  _$jscoverage['handlebars/handlebars.js'][2019] = 0;
  _$jscoverage['handlebars/handlebars.js'][2020] = 0;
  _$jscoverage['handlebars/handlebars.js'][2024] = 0;
  _$jscoverage['handlebars/handlebars.js'][2025] = 0;
  _$jscoverage['handlebars/handlebars.js'][2026] = 0;
  _$jscoverage['handlebars/handlebars.js'][2027] = 0;
  _$jscoverage['handlebars/handlebars.js'][2030] = 0;
  _$jscoverage['handlebars/handlebars.js'][2031] = 0;
  _$jscoverage['handlebars/handlebars.js'][2034] = 0;
  _$jscoverage['handlebars/handlebars.js'][2035] = 0;
  _$jscoverage['handlebars/handlebars.js'][2036] = 0;
  _$jscoverage['handlebars/handlebars.js'][2037] = 0;
  _$jscoverage['handlebars/handlebars.js'][2039] = 0;
  _$jscoverage['handlebars/handlebars.js'][2041] = 0;
  _$jscoverage['handlebars/handlebars.js'][2045] = 0;
  _$jscoverage['handlebars/handlebars.js'][2063] = 0;
  _$jscoverage['handlebars/handlebars.js'][2065] = 0;
  _$jscoverage['handlebars/handlebars.js'][2066] = 0;
  _$jscoverage['handlebars/handlebars.js'][2069] = 0;
  _$jscoverage['handlebars/handlebars.js'][2070] = 0;
  _$jscoverage['handlebars/handlebars.js'][2071] = 0;
  _$jscoverage['handlebars/handlebars.js'][2073] = 0;
  _$jscoverage['handlebars/handlebars.js'][2078] = 0;
  _$jscoverage['handlebars/handlebars.js'][2079] = 0;
  _$jscoverage['handlebars/handlebars.js'][2080] = 0;
  _$jscoverage['handlebars/handlebars.js'][2083] = 0;
  _$jscoverage['handlebars/handlebars.js'][2084] = 0;
  _$jscoverage['handlebars/handlebars.js'][2085] = 0;
  _$jscoverage['handlebars/handlebars.js'][2087] = 0;
  _$jscoverage['handlebars/handlebars.js'][2088] = 0;
  _$jscoverage['handlebars/handlebars.js'][2089] = 0;
  _$jscoverage['handlebars/handlebars.js'][2092] = 0;
  _$jscoverage['handlebars/handlebars.js'][2093] = 0;
  _$jscoverage['handlebars/handlebars.js'][2094] = 0;
  _$jscoverage['handlebars/handlebars.js'][2097] = 0;
  _$jscoverage['handlebars/handlebars.js'][2098] = 0;
  _$jscoverage['handlebars/handlebars.js'][2099] = 0;
  _$jscoverage['handlebars/handlebars.js'][2101] = 0;
  _$jscoverage['handlebars/handlebars.js'][2102] = 0;
  _$jscoverage['handlebars/handlebars.js'][2103] = 0;
  _$jscoverage['handlebars/handlebars.js'][2104] = 0;
  _$jscoverage['handlebars/handlebars.js'][2105] = 0;
  _$jscoverage['handlebars/handlebars.js'][2106] = 0;
  _$jscoverage['handlebars/handlebars.js'][2110] = 0;
  _$jscoverage['handlebars/handlebars.js'][2111] = 0;
  _$jscoverage['handlebars/handlebars.js'][2112] = 0;
  _$jscoverage['handlebars/handlebars.js'][2114] = 0;
  _$jscoverage['handlebars/handlebars.js'][2117] = 0;
  _$jscoverage['handlebars/handlebars.js'][2119] = 0;
  _$jscoverage['handlebars/handlebars.js'][2122] = 0;
  _$jscoverage['handlebars/handlebars.js'][2127] = 0;
  _$jscoverage['handlebars/handlebars.js'][2128] = 0;
  _$jscoverage['handlebars/handlebars.js'][2129] = 0;
  _$jscoverage['handlebars/handlebars.js'][2130] = 0;
  _$jscoverage['handlebars/handlebars.js'][2131] = 0;
  _$jscoverage['handlebars/handlebars.js'][2133] = 0;
  _$jscoverage['handlebars/handlebars.js'][2134] = 0;
  _$jscoverage['handlebars/handlebars.js'][2142] = 0;
  _$jscoverage['handlebars/handlebars.js'][2143] = 0;
  _$jscoverage['handlebars/handlebars.js'][2144] = 0;
  _$jscoverage['handlebars/handlebars.js'][2146] = 0;
  _$jscoverage['handlebars/handlebars.js'][2150] = 0;
  _$jscoverage['handlebars/handlebars.js'][2151] = 0;
  _$jscoverage['handlebars/handlebars.js'][2152] = 0;
  _$jscoverage['handlebars/handlebars.js'][2154] = 0;
  _$jscoverage['handlebars/handlebars.js'][2158] = 0;
  _$jscoverage['handlebars/handlebars.js'][2163] = 0;
  _$jscoverage['handlebars/handlebars.js'][2168] = 0;
  _$jscoverage['handlebars/handlebars.js'][2170] = 0;
  _$jscoverage['handlebars/handlebars.js'][2171] = 0;
  _$jscoverage['handlebars/handlebars.js'][2173] = 0;
  _$jscoverage['handlebars/handlebars.js'][2177] = 0;
  _$jscoverage['handlebars/handlebars.js'][2178] = 0;
  _$jscoverage['handlebars/handlebars.js'][2180] = 0;
  _$jscoverage['handlebars/handlebars.js'][2183] = 0;
  _$jscoverage['handlebars/handlebars.js'][2185] = 0;
  _$jscoverage['handlebars/handlebars.js'][2187] = 0;
  _$jscoverage['handlebars/handlebars.js'][2188] = 0;
  _$jscoverage['handlebars/handlebars.js'][2189] = 0;
  _$jscoverage['handlebars/handlebars.js'][2190] = 0;
  _$jscoverage['handlebars/handlebars.js'][2191] = 0;
  _$jscoverage['handlebars/handlebars.js'][2192] = 0;
  _$jscoverage['handlebars/handlebars.js'][2194] = 0;
  _$jscoverage['handlebars/handlebars.js'][2195] = 0;
  _$jscoverage['handlebars/handlebars.js'][2200] = 0;
  _$jscoverage['handlebars/handlebars.js'][2201] = 0;
}
_$jscoverage['handlebars/handlebars.js'].source = ["<span class=\"c\">/*</span>","","<span class=\"c\">Copyright (C) 2011 by Yehuda Katz</span>","","<span class=\"c\">Permission is hereby granted, free of charge, to any person obtaining a copy</span>","<span class=\"c\">of this software and associated documentation files (the \"Software\"), to deal</span>","<span class=\"c\">in the Software without restriction, including without limitation the rights</span>","<span class=\"c\">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>","<span class=\"c\">copies of the Software, and to permit persons to whom the Software is</span>","<span class=\"c\">furnished to do so, subject to the following conditions:</span>","","<span class=\"c\">The above copyright notice and this permission notice shall be included in</span>","<span class=\"c\">all copies or substantial portions of the Software.</span>","","<span class=\"c\">THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>","<span class=\"c\">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>","<span class=\"c\">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>","<span class=\"c\">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>","<span class=\"c\">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>","<span class=\"c\">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>","<span class=\"c\">THE SOFTWARE.</span>","","<span class=\"c\">*/</span>","","<span class=\"c\">// lib/handlebars/base.js</span>","","<span class=\"c\">/*jshint eqnull:true*/</span>","<span class=\"k\">this</span><span class=\"k\">.</span>Handlebars <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>Handlebars<span class=\"k\">)</span> <span class=\"k\">{</span>","","Handlebars<span class=\"k\">.</span>VERSION <span class=\"k\">=</span> <span class=\"s\">\"1.0.0-rc.3\"</span><span class=\"k\">;</span>","Handlebars<span class=\"k\">.</span>COMPILER_REVISION <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>REVISION_CHANGES <span class=\"k\">=</span> <span class=\"k\">{</span>","  <span class=\"s\">1</span><span class=\"k\">:</span> <span class=\"s\">'&lt;= 1.0.rc.2'</span><span class=\"k\">,</span> <span class=\"c\">// 1.0.rc.2 is actually rev2 but doesn't report it</span>","  <span class=\"s\">2</span><span class=\"k\">:</span> <span class=\"s\">'&gt;= 1.0.0-rc.3'</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>helpers  <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","Handlebars<span class=\"k\">.</span>partials <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>registerHelper <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> fn<span class=\"k\">,</span> inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">if</span><span class=\"k\">(</span>inverse<span class=\"k\">)</span> <span class=\"k\">{</span> fn<span class=\"k\">.</span>not <span class=\"k\">=</span> inverse<span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>helpers<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> fn<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>registerPartial <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> str<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>partials<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> str<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>registerHelper<span class=\"k\">(</span><span class=\"s\">'helperMissing'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>arg<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">if</span><span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> undefined<span class=\"k\">;</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Could not find property '\"</span> <span class=\"k\">+</span> arg <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"k\">var</span> toString <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">,</span> functionType <span class=\"k\">=</span> <span class=\"s\">\"[object Function]\"</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>registerHelper<span class=\"k\">(</span><span class=\"s\">'blockHelperMissing'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> inverse <span class=\"k\">=</span> options<span class=\"k\">.</span>inverse <span class=\"k\">||</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span> fn <span class=\"k\">=</span> options<span class=\"k\">.</span>fn<span class=\"k\">;</span>","","","  <span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> type <span class=\"k\">=</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">);</span>","","  <span class=\"k\">if</span><span class=\"k\">(</span>type <span class=\"k\">===</span> functionType<span class=\"k\">)</span> <span class=\"k\">{</span> context <span class=\"k\">=</span> context<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","","  <span class=\"k\">if</span><span class=\"k\">(</span>context <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> fn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>context <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">||</span> context <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> inverse<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">\"[object Array]\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span>context<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> Handlebars<span class=\"k\">.</span>helpers<span class=\"k\">.</span>each<span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> inverse<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> fn<span class=\"k\">(</span>context<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","Handlebars<span class=\"k\">.</span>K <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>createFrame <span class=\"k\">=</span> Object<span class=\"k\">.</span>create <span class=\"k\">||</span> <span class=\"k\">function</span><span class=\"k\">(</span>object<span class=\"k\">)</span> <span class=\"k\">{</span>","  Handlebars<span class=\"k\">.</span>K<span class=\"k\">.</span>prototype <span class=\"k\">=</span> object<span class=\"k\">;</span>","  <span class=\"k\">var</span> obj <span class=\"k\">=</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>K<span class=\"k\">();</span>","  Handlebars<span class=\"k\">.</span>K<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">return</span> obj<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>logger <span class=\"k\">=</span> <span class=\"k\">{</span>","  DEBUG<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> INFO<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> WARN<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">,</span> ERROR<span class=\"k\">:</span> <span class=\"s\">3</span><span class=\"k\">,</span> level<span class=\"k\">:</span> <span class=\"s\">3</span><span class=\"k\">,</span>","","  methodMap<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">0</span><span class=\"k\">:</span> <span class=\"s\">'debug'</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">:</span> <span class=\"s\">'info'</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">:</span> <span class=\"s\">'warn'</span><span class=\"k\">,</span> <span class=\"s\">3</span><span class=\"k\">:</span> <span class=\"s\">'error'</span><span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">// can be overridden in the host environment</span>","  log<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>level<span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>Handlebars<span class=\"k\">.</span>logger<span class=\"k\">.</span>level <span class=\"k\">&lt;=</span> level<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> method <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>logger<span class=\"k\">.</span>methodMap<span class=\"k\">[</span>level<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> console <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> console<span class=\"k\">[</span>method<span class=\"k\">])</span> <span class=\"k\">{</span>","        console<span class=\"k\">[</span>method<span class=\"k\">].</span>call<span class=\"k\">(</span>console<span class=\"k\">,</span> obj<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>log <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>level<span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span> Handlebars<span class=\"k\">.</span>logger<span class=\"k\">.</span>log<span class=\"k\">(</span>level<span class=\"k\">,</span> obj<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>registerHelper<span class=\"k\">(</span><span class=\"s\">'each'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> fn <span class=\"k\">=</span> options<span class=\"k\">.</span>fn<span class=\"k\">,</span> inverse <span class=\"k\">=</span> options<span class=\"k\">.</span>inverse<span class=\"k\">;</span>","  <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> ret <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> data<span class=\"k\">;</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","    data <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>createFrame<span class=\"k\">(</span>options<span class=\"k\">.</span>data<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span><span class=\"k\">(</span>context <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> context <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span>context <span class=\"k\">instanceof</span> Array<span class=\"k\">)</span><span class=\"k\">{</span>","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> context<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>j<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> data<span class=\"k\">.</span>index <span class=\"k\">=</span> i<span class=\"k\">;</span> <span class=\"k\">}</span>","        ret <span class=\"k\">=</span> ret <span class=\"k\">+</span> fn<span class=\"k\">(</span>context<span class=\"k\">[</span>i<span class=\"k\">],</span> <span class=\"k\">{</span> data<span class=\"k\">:</span> data <span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>context<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> data<span class=\"k\">.</span>key <span class=\"k\">=</span> key<span class=\"k\">;</span> <span class=\"k\">}</span>","          ret <span class=\"k\">=</span> ret <span class=\"k\">+</span> fn<span class=\"k\">(</span>context<span class=\"k\">[</span>key<span class=\"k\">],</span> <span class=\"k\">{</span>data<span class=\"k\">:</span> data<span class=\"k\">}</span><span class=\"k\">);</span>","          i<span class=\"k\">++;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span><span class=\"k\">(</span>i <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","    ret <span class=\"k\">=</span> inverse<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">return</span> ret<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","Handlebars<span class=\"k\">.</span>registerHelper<span class=\"k\">(</span><span class=\"s\">'if'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> type <span class=\"k\">=</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>context<span class=\"k\">);</span>","  <span class=\"k\">if</span><span class=\"k\">(</span>type <span class=\"k\">===</span> functionType<span class=\"k\">)</span> <span class=\"k\">{</span> context <span class=\"k\">=</span> context<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","","  <span class=\"k\">if</span><span class=\"k\">(!</span>context <span class=\"k\">||</span> Handlebars<span class=\"k\">.</span>Utils<span class=\"k\">.</span>isEmpty<span class=\"k\">(</span>context<span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> options<span class=\"k\">.</span>inverse<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> options<span class=\"k\">.</span>fn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","Handlebars<span class=\"k\">.</span>registerHelper<span class=\"k\">(</span><span class=\"s\">'unless'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> fn <span class=\"k\">=</span> options<span class=\"k\">.</span>fn<span class=\"k\">,</span> inverse <span class=\"k\">=</span> options<span class=\"k\">.</span>inverse<span class=\"k\">;</span>","  options<span class=\"k\">.</span>fn <span class=\"k\">=</span> inverse<span class=\"k\">;</span>","  options<span class=\"k\">.</span>inverse <span class=\"k\">=</span> fn<span class=\"k\">;</span>","","  <span class=\"k\">return</span> Handlebars<span class=\"k\">.</span>helpers<span class=\"k\">[</span><span class=\"s\">'if'</span><span class=\"k\">].</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> context<span class=\"k\">,</span> options<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","Handlebars<span class=\"k\">.</span>registerHelper<span class=\"k\">(</span><span class=\"s\">'with'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> options<span class=\"k\">.</span>fn<span class=\"k\">(</span>context<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","Handlebars<span class=\"k\">.</span>registerHelper<span class=\"k\">(</span><span class=\"s\">'log'</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> level <span class=\"k\">=</span> options<span class=\"k\">.</span>data <span class=\"k\">&amp;&amp;</span> options<span class=\"k\">.</span>data<span class=\"k\">.</span>level <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">?</span> parseInt<span class=\"k\">(</span>options<span class=\"k\">.</span>data<span class=\"k\">.</span>level<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  Handlebars<span class=\"k\">.</span>log<span class=\"k\">(</span>level<span class=\"k\">,</span> context<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>Handlebars<span class=\"k\">));</span>","<span class=\"k\">;</span>","<span class=\"c\">// lib/handlebars/compiler/parser.js</span>","<span class=\"c\">/* Jison generated parser */</span>","<span class=\"k\">var</span> handlebars <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","<span class=\"k\">var</span> parser <span class=\"k\">=</span> <span class=\"k\">{</span>trace<span class=\"k\">:</span> <span class=\"k\">function</span> trace<span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">}</span><span class=\"k\">,</span>","yy<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","symbols_<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">\"error\"</span><span class=\"k\">:</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">\"root\"</span><span class=\"k\">:</span><span class=\"s\">3</span><span class=\"k\">,</span><span class=\"s\">\"program\"</span><span class=\"k\">:</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">\"EOF\"</span><span class=\"k\">:</span><span class=\"s\">5</span><span class=\"k\">,</span><span class=\"s\">\"simpleInverse\"</span><span class=\"k\">:</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">\"statements\"</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">\"statement\"</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">\"openInverse\"</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">\"closeBlock\"</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">\"openBlock\"</span><span class=\"k\">:</span><span class=\"s\">11</span><span class=\"k\">,</span><span class=\"s\">\"mustache\"</span><span class=\"k\">:</span><span class=\"s\">12</span><span class=\"k\">,</span><span class=\"s\">\"partial\"</span><span class=\"k\">:</span><span class=\"s\">13</span><span class=\"k\">,</span><span class=\"s\">\"CONTENT\"</span><span class=\"k\">:</span><span class=\"s\">14</span><span class=\"k\">,</span><span class=\"s\">\"COMMENT\"</span><span class=\"k\">:</span><span class=\"s\">15</span><span class=\"k\">,</span><span class=\"s\">\"OPEN_BLOCK\"</span><span class=\"k\">:</span><span class=\"s\">16</span><span class=\"k\">,</span><span class=\"s\">\"inMustache\"</span><span class=\"k\">:</span><span class=\"s\">17</span><span class=\"k\">,</span><span class=\"s\">\"CLOSE\"</span><span class=\"k\">:</span><span class=\"s\">18</span><span class=\"k\">,</span><span class=\"s\">\"OPEN_INVERSE\"</span><span class=\"k\">:</span><span class=\"s\">19</span><span class=\"k\">,</span><span class=\"s\">\"OPEN_ENDBLOCK\"</span><span class=\"k\">:</span><span class=\"s\">20</span><span class=\"k\">,</span><span class=\"s\">\"path\"</span><span class=\"k\">:</span><span class=\"s\">21</span><span class=\"k\">,</span><span class=\"s\">\"OPEN\"</span><span class=\"k\">:</span><span class=\"s\">22</span><span class=\"k\">,</span><span class=\"s\">\"OPEN_UNESCAPED\"</span><span class=\"k\">:</span><span class=\"s\">23</span><span class=\"k\">,</span><span class=\"s\">\"OPEN_PARTIAL\"</span><span class=\"k\">:</span><span class=\"s\">24</span><span class=\"k\">,</span><span class=\"s\">\"partialName\"</span><span class=\"k\">:</span><span class=\"s\">25</span><span class=\"k\">,</span><span class=\"s\">\"params\"</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">,</span><span class=\"s\">\"hash\"</span><span class=\"k\">:</span><span class=\"s\">27</span><span class=\"k\">,</span><span class=\"s\">\"DATA\"</span><span class=\"k\">:</span><span class=\"s\">28</span><span class=\"k\">,</span><span class=\"s\">\"param\"</span><span class=\"k\">:</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">\"STRING\"</span><span class=\"k\">:</span><span class=\"s\">30</span><span class=\"k\">,</span><span class=\"s\">\"INTEGER\"</span><span class=\"k\">:</span><span class=\"s\">31</span><span class=\"k\">,</span><span class=\"s\">\"BOOLEAN\"</span><span class=\"k\">:</span><span class=\"s\">32</span><span class=\"k\">,</span><span class=\"s\">\"hashSegments\"</span><span class=\"k\">:</span><span class=\"s\">33</span><span class=\"k\">,</span><span class=\"s\">\"hashSegment\"</span><span class=\"k\">:</span><span class=\"s\">34</span><span class=\"k\">,</span><span class=\"s\">\"ID\"</span><span class=\"k\">:</span><span class=\"s\">35</span><span class=\"k\">,</span><span class=\"s\">\"EQUALS\"</span><span class=\"k\">:</span><span class=\"s\">36</span><span class=\"k\">,</span><span class=\"s\">\"PARTIAL_NAME\"</span><span class=\"k\">:</span><span class=\"s\">37</span><span class=\"k\">,</span><span class=\"s\">\"pathSegments\"</span><span class=\"k\">:</span><span class=\"s\">38</span><span class=\"k\">,</span><span class=\"s\">\"SEP\"</span><span class=\"k\">:</span><span class=\"s\">39</span><span class=\"k\">,</span><span class=\"s\">\"$accept\"</span><span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">\"$end\"</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span>","terminals_<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">2</span><span class=\"k\">:</span><span class=\"s\">\"error\"</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">:</span><span class=\"s\">\"EOF\"</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:</span><span class=\"s\">\"CONTENT\"</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">:</span><span class=\"s\">\"COMMENT\"</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">:</span><span class=\"s\">\"OPEN_BLOCK\"</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">:</span><span class=\"s\">\"CLOSE\"</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">:</span><span class=\"s\">\"OPEN_INVERSE\"</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">:</span><span class=\"s\">\"OPEN_ENDBLOCK\"</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">:</span><span class=\"s\">\"OPEN\"</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">:</span><span class=\"s\">\"OPEN_UNESCAPED\"</span><span class=\"k\">,</span><span class=\"s\">24</span><span class=\"k\">:</span><span class=\"s\">\"OPEN_PARTIAL\"</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:</span><span class=\"s\">\"DATA\"</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">:</span><span class=\"s\">\"STRING\"</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">:</span><span class=\"s\">\"INTEGER\"</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">:</span><span class=\"s\">\"BOOLEAN\"</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">:</span><span class=\"s\">\"ID\"</span><span class=\"k\">,</span><span class=\"s\">36</span><span class=\"k\">:</span><span class=\"s\">\"EQUALS\"</span><span class=\"k\">,</span><span class=\"s\">37</span><span class=\"k\">:</span><span class=\"s\">\"PARTIAL_NAME\"</span><span class=\"k\">,</span><span class=\"s\">39</span><span class=\"k\">:</span><span class=\"s\">\"SEP\"</span><span class=\"k\">}</span><span class=\"k\">,</span>","productions_<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,[</span><span class=\"s\">3</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">],[</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">11</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">12</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">12</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">13</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">13</span><span class=\"k\">,</span><span class=\"s\">4</span><span class=\"k\">],[</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">17</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">17</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">17</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">17</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">17</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">26</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">26</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">27</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">33</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],[</span><span class=\"s\">33</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">34</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">34</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">34</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">34</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">34</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">25</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">21</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],[</span><span class=\"s\">38</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],[</span><span class=\"s\">38</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">]],</span>","performAction<span class=\"k\">:</span> <span class=\"k\">function</span> anonymous<span class=\"k\">(</span>yytext<span class=\"k\">,</span>yyleng<span class=\"k\">,</span>yylineno<span class=\"k\">,</span>yy<span class=\"k\">,</span>yystate<span class=\"k\">,</span>$$<span class=\"k\">,</span>_$<span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> $0 <span class=\"k\">=</span> $$<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"k\">switch</span> <span class=\"k\">(</span>yystate<span class=\"k\">)</span> <span class=\"k\">{</span>","<span class=\"k\">case</span> <span class=\"s\">1</span><span class=\"k\">:</span> <span class=\"k\">return</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">2</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>ProgramNode<span class=\"k\">([],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">3</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>ProgramNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">4</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>ProgramNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">],</span> <span class=\"k\">[]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">5</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>ProgramNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">6</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>ProgramNode<span class=\"k\">([],</span> <span class=\"k\">[]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">7</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>ProgramNode<span class=\"k\">([]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">8</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">9</span><span class=\"k\">:</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">].</span>push<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">10</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>BlockNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">].</span>inverse<span class=\"k\">,</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">11</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>BlockNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">].</span>inverse<span class=\"k\">,</span> $$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">12</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">13</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">14</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>ContentNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">15</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>CommentNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">16</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>MustacheNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">17</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>MustacheNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">18</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">19</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>MustacheNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">20</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>MustacheNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">21</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>PartialNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">22</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>PartialNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">23</span><span class=\"k\">:</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">24</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">]].</span>concat<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]),</span> $$<span class=\"k\">[</span>$0<span class=\"k\">]];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">25</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]].</span>concat<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]),</span> <span class=\"k\">null</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">26</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">]];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">27</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]],</span> <span class=\"k\">null</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">28</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[[</span><span class=\"k\">new</span> yy<span class=\"k\">.</span>DataNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">])],</span> <span class=\"k\">null</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">29</span><span class=\"k\">:</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">].</span>push<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">30</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">31</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">32</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>StringNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">33</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>IntegerNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">34</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>BooleanNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">35</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>DataNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">36</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>HashNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">37</span><span class=\"k\">:</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">].</span>push<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">38</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">39</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> $$<span class=\"k\">[</span>$0<span class=\"k\">]];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">40</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>StringNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">])];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">41</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>IntegerNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">])];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">42</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>BooleanNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">])];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">43</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">],</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>DataNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">])];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">44</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>PartialNameNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">45</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">new</span> yy<span class=\"k\">.</span>IdNode<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">46</span><span class=\"k\">:</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">].</span>push<span class=\"k\">(</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]);</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> $$<span class=\"k\">[</span>$0<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">47</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>$ <span class=\"k\">=</span> <span class=\"k\">[</span>$$<span class=\"k\">[</span>$0<span class=\"k\">]];</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">,</span>","table<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span><span class=\"s\">3</span><span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">4</span><span class=\"k\">:</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">7</span><span class=\"k\">],</span><span class=\"s\">6</span><span class=\"k\">:</span><span class=\"s\">3</span><span class=\"k\">,</span><span class=\"s\">7</span><span class=\"k\">:</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">1</span><span class=\"k\">:[</span><span class=\"s\">3</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">6</span><span class=\"k\">],</span><span class=\"s\">7</span><span class=\"k\">:</span><span class=\"s\">18</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">6</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">],</span><span class=\"s\">6</span><span class=\"k\">:</span><span class=\"s\">20</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">21</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">17</span><span class=\"k\">:</span><span class=\"s\">23</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">24</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">25</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">4</span><span class=\"k\">:</span><span class=\"s\">28</span><span class=\"k\">,</span><span class=\"s\">6</span><span class=\"k\">:</span><span class=\"s\">3</span><span class=\"k\">,</span><span class=\"s\">7</span><span class=\"k\">:</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">7</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">4</span><span class=\"k\">:</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">6</span><span class=\"k\">:</span><span class=\"s\">3</span><span class=\"k\">,</span><span class=\"s\">7</span><span class=\"k\">:</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">7</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">17</span><span class=\"k\">:</span><span class=\"s\">30</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">24</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">25</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">17</span><span class=\"k\">:</span><span class=\"s\">31</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">24</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">25</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">17</span><span class=\"k\">:</span><span class=\"s\">32</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">24</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">25</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">25</span><span class=\"k\">:</span><span class=\"s\">33</span><span class=\"k\">,</span><span class=\"s\">37</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">1</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">21</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">17</span><span class=\"k\">:</span><span class=\"s\">23</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">24</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">25</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">4</span><span class=\"k\">],</span><span class=\"s\">7</span><span class=\"k\">:</span><span class=\"s\">35</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">4</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">36</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">41</span><span class=\"k\">,</span><span class=\"s\">26</span><span class=\"k\">:</span><span class=\"s\">37</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">:</span><span class=\"s\">38</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">29</span><span class=\"k\">:</span><span class=\"s\">39</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">42</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">43</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">44</span><span class=\"k\">],</span><span class=\"s\">33</span><span class=\"k\">:</span><span class=\"s\">40</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">:</span><span class=\"s\">46</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">39</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">48</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">39</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">10</span><span class=\"k\">:</span><span class=\"s\">49</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">50</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">10</span><span class=\"k\">:</span><span class=\"s\">51</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">50</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">52</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">53</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">54</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">55</span><span class=\"k\">],</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">56</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">44</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">44</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],</span><span class=\"s\">8</span><span class=\"k\">:</span><span class=\"s\">21</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">:</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">:</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">:</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">:</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">3</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">25</span><span class=\"k\">],</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">41</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">:</span><span class=\"s\">57</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">45</span><span class=\"k\">],</span><span class=\"s\">29</span><span class=\"k\">:</span><span class=\"s\">58</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">42</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">43</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">44</span><span class=\"k\">],</span><span class=\"s\">33</span><span class=\"k\">:</span><span class=\"s\">40</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">:</span><span class=\"s\">46</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">26</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">30</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">36</span><span class=\"k\">],</span><span class=\"s\">34</span><span class=\"k\">:</span><span class=\"s\">59</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">60</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">33</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">33</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">33</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">33</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">33</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">33</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">34</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">38</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">38</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">],</span><span class=\"s\">36</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">61</span><span class=\"k\">],</span><span class=\"s\">39</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">47</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">62</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">63</span><span class=\"k\">,</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">64</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">24</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">29</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">29</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">29</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">29</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">29</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">29</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">37</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">37</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">36</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">61</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">21</span><span class=\"k\">:</span><span class=\"s\">65</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">69</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">66</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">67</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">68</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:</span><span class=\"s\">26</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">46</span><span class=\"k\">],</span><span class=\"s\">28</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">46</span><span class=\"k\">],</span><span class=\"s\">30</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">46</span><span class=\"k\">],</span><span class=\"s\">31</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">46</span><span class=\"k\">],</span><span class=\"s\">32</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">46</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">46</span><span class=\"k\">],</span><span class=\"s\">39</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">46</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">70</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">39</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">39</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">40</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">40</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">41</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">41</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">42</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">42</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">18</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">43</span><span class=\"k\">],</span><span class=\"s\">35</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">43</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">5</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">14</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">15</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">16</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">19</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">20</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">22</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">23</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">],</span><span class=\"s\">24</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">],</span>","defaultActions<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">17</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">],</span><span class=\"s\">25</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">],</span><span class=\"s\">38</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">26</span><span class=\"k\">],</span><span class=\"s\">57</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">24</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span>","parseError<span class=\"k\">:</span> <span class=\"k\">function</span> parseError<span class=\"k\">(</span>str<span class=\"k\">,</span> hash<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span>str<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">,</span>","parse<span class=\"k\">:</span> <span class=\"k\">function</span> parse<span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> stack <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> vstack <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"k\">null</span><span class=\"k\">],</span> lstack <span class=\"k\">=</span> <span class=\"k\">[],</span> table <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>table<span class=\"k\">,</span> yytext <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> yylineno <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> yyleng <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> recovering <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> TERROR <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">,</span> EOF <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>setInput<span class=\"k\">(</span>input<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yy <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">.</span>lexer <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">.</span>parser <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yylloc <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yylloc <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> yyloc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yylloc<span class=\"k\">;</span>","    lstack<span class=\"k\">.</span>push<span class=\"k\">(</span>yyloc<span class=\"k\">);</span>","    <span class=\"k\">var</span> ranges <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>options <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>options<span class=\"k\">.</span>ranges<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">.</span>parseError <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>parseError <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">.</span>parseError<span class=\"k\">;</span>","    <span class=\"k\">function</span> popStack<span class=\"k\">(</span>n<span class=\"k\">)</span> <span class=\"k\">{</span>","        stack<span class=\"k\">.</span>length <span class=\"k\">=</span> stack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">2</span> <span class=\"k\">*</span> n<span class=\"k\">;</span>","        vstack<span class=\"k\">.</span>length <span class=\"k\">=</span> vstack<span class=\"k\">.</span>length <span class=\"k\">-</span> n<span class=\"k\">;</span>","        lstack<span class=\"k\">.</span>length <span class=\"k\">=</span> lstack<span class=\"k\">.</span>length <span class=\"k\">-</span> n<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">function</span> lex<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> token<span class=\"k\">;</span>","        token <span class=\"k\">=</span> self<span class=\"k\">.</span>lexer<span class=\"k\">.</span>lex<span class=\"k\">()</span> <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> token <span class=\"k\">!==</span> <span class=\"s\">\"number\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            token <span class=\"k\">=</span> self<span class=\"k\">.</span>symbols_<span class=\"k\">[</span>token<span class=\"k\">]</span> <span class=\"k\">||</span> token<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> token<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">var</span> symbol<span class=\"k\">,</span> preErrorSymbol<span class=\"k\">,</span> state<span class=\"k\">,</span> action<span class=\"k\">,</span> a<span class=\"k\">,</span> r<span class=\"k\">,</span> yyval <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> p<span class=\"k\">,</span> len<span class=\"k\">,</span> newState<span class=\"k\">,</span> expected<span class=\"k\">;</span>","    <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        state <span class=\"k\">=</span> stack<span class=\"k\">[</span>stack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultActions<span class=\"k\">[</span>state<span class=\"k\">])</span> <span class=\"k\">{</span>","            action <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>defaultActions<span class=\"k\">[</span>state<span class=\"k\">];</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>symbol <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> symbol <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                symbol <span class=\"k\">=</span> lex<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            action <span class=\"k\">=</span> table<span class=\"k\">[</span>state<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> table<span class=\"k\">[</span>state<span class=\"k\">][</span>symbol<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> action <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> <span class=\"k\">!</span>action<span class=\"k\">.</span>length <span class=\"k\">||</span> <span class=\"k\">!</span>action<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> errStr <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>recovering<span class=\"k\">)</span> <span class=\"k\">{</span>","                expected <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>p <span class=\"k\">in</span> table<span class=\"k\">[</span>state<span class=\"k\">])</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>terminals_<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> p <span class=\"k\">&gt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        expected<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"'\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>terminals_<span class=\"k\">[</span>p<span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>showPosition<span class=\"k\">)</span> <span class=\"k\">{</span>","                    errStr <span class=\"k\">=</span> <span class=\"s\">\"Parse error on line \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>yylineno <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\":</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>showPosition<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">Expecting \"</span> <span class=\"k\">+</span> expected<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\", got '\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>terminals_<span class=\"k\">[</span>symbol<span class=\"k\">]</span> <span class=\"k\">||</span> symbol<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    errStr <span class=\"k\">=</span> <span class=\"s\">\"Parse error on line \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>yylineno <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\": Unexpected \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>symbol <span class=\"k\">==</span> <span class=\"s\">1</span><span class=\"k\">?</span><span class=\"s\">\"end of input\"</span><span class=\"k\">:</span><span class=\"s\">\"'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>terminals_<span class=\"k\">[</span>symbol<span class=\"k\">]</span> <span class=\"k\">||</span> symbol<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>parseError<span class=\"k\">(</span>errStr<span class=\"k\">,</span> <span class=\"k\">{</span>text<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>match<span class=\"k\">,</span> token<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>terminals_<span class=\"k\">[</span>symbol<span class=\"k\">]</span> <span class=\"k\">||</span> symbol<span class=\"k\">,</span> line<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yylineno<span class=\"k\">,</span> loc<span class=\"k\">:</span> yyloc<span class=\"k\">,</span> expected<span class=\"k\">:</span> expected<span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>action<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">instanceof</span> Array <span class=\"k\">&amp;&amp;</span> action<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Parse Error: multiple actions possible at state: \"</span> <span class=\"k\">+</span> state <span class=\"k\">+</span> <span class=\"s\">\", token: \"</span> <span class=\"k\">+</span> symbol<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">switch</span> <span class=\"k\">(</span>action<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">{</span>","        <span class=\"k\">case</span> <span class=\"s\">1</span><span class=\"k\">:</span>","            stack<span class=\"k\">.</span>push<span class=\"k\">(</span>symbol<span class=\"k\">);</span>","            vstack<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yytext<span class=\"k\">);</span>","            lstack<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yylloc<span class=\"k\">);</span>","            stack<span class=\"k\">.</span>push<span class=\"k\">(</span>action<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span>","            symbol <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>preErrorSymbol<span class=\"k\">)</span> <span class=\"k\">{</span>","                yyleng <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yyleng<span class=\"k\">;</span>","                yytext <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yytext<span class=\"k\">;</span>","                yylineno <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yylineno<span class=\"k\">;</span>","                yyloc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lexer<span class=\"k\">.</span>yylloc<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>recovering <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span>","                    recovering<span class=\"k\">--;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                symbol <span class=\"k\">=</span> preErrorSymbol<span class=\"k\">;</span>","                preErrorSymbol <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> <span class=\"s\">2</span><span class=\"k\">:</span>","            len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>productions_<span class=\"k\">[</span>action<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]][</span><span class=\"s\">1</span><span class=\"k\">];</span>","            yyval<span class=\"k\">.</span>$ <span class=\"k\">=</span> vstack<span class=\"k\">[</span>vstack<span class=\"k\">.</span>length <span class=\"k\">-</span> len<span class=\"k\">];</span>","            yyval<span class=\"k\">.</span>_$ <span class=\"k\">=</span> <span class=\"k\">{</span>first_line<span class=\"k\">:</span> lstack<span class=\"k\">[</span>lstack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"k\">(</span>len <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">)].</span>first_line<span class=\"k\">,</span> last_line<span class=\"k\">:</span> lstack<span class=\"k\">[</span>lstack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>last_line<span class=\"k\">,</span> first_column<span class=\"k\">:</span> lstack<span class=\"k\">[</span>lstack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"k\">(</span>len <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">)].</span>first_column<span class=\"k\">,</span> last_column<span class=\"k\">:</span> lstack<span class=\"k\">[</span>lstack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>last_column<span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>ranges<span class=\"k\">)</span> <span class=\"k\">{</span>","                yyval<span class=\"k\">.</span>_$<span class=\"k\">.</span>range <span class=\"k\">=</span> <span class=\"k\">[</span>lstack<span class=\"k\">[</span>lstack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"k\">(</span>len <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">)].</span>range<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> lstack<span class=\"k\">[</span>lstack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>range<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]];</span>","            <span class=\"k\">}</span>","            r <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>performAction<span class=\"k\">.</span>call<span class=\"k\">(</span>yyval<span class=\"k\">,</span> yytext<span class=\"k\">,</span> yyleng<span class=\"k\">,</span> yylineno<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">,</span> action<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> vstack<span class=\"k\">,</span> lstack<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> r <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> r<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>len<span class=\"k\">)</span> <span class=\"k\">{</span>","                stack <span class=\"k\">=</span> stack<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">*</span> len <span class=\"k\">*</span> <span class=\"s\">2</span><span class=\"k\">);</span>","                vstack <span class=\"k\">=</span> vstack<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">*</span> len<span class=\"k\">);</span>","                lstack <span class=\"k\">=</span> lstack<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">*</span> len<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            stack<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>productions_<span class=\"k\">[</span>action<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]][</span><span class=\"s\">0</span><span class=\"k\">]);</span>","            vstack<span class=\"k\">.</span>push<span class=\"k\">(</span>yyval<span class=\"k\">.</span>$<span class=\"k\">);</span>","            lstack<span class=\"k\">.</span>push<span class=\"k\">(</span>yyval<span class=\"k\">.</span>_$<span class=\"k\">);</span>","            newState <span class=\"k\">=</span> table<span class=\"k\">[</span>stack<span class=\"k\">[</span>stack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">2</span><span class=\"k\">]][</span>stack<span class=\"k\">[</span>stack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]];</span>","            stack<span class=\"k\">.</span>push<span class=\"k\">(</span>newState<span class=\"k\">);</span>","            <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">case</span> <span class=\"s\">3</span><span class=\"k\">:</span>","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"c\">/* Jison generated lexer */</span>","<span class=\"k\">var</span> lexer <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","<span class=\"k\">var</span> lexer <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">{</span>EOF<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>","parseError<span class=\"k\">:</span><span class=\"k\">function</span> parseError<span class=\"k\">(</span>str<span class=\"k\">,</span> hash<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">.</span>parser<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">.</span>parser<span class=\"k\">.</span>parseError<span class=\"k\">(</span>str<span class=\"k\">,</span> hash<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span>str<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","setInput<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_input <span class=\"k\">=</span> input<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_more <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_less <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>done <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>yylineno <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>yyleng <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>yytext <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>matched <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>match <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>conditionStack <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'INITIAL'</span><span class=\"k\">];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>yylloc <span class=\"k\">=</span> <span class=\"k\">{</span>first_line<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>first_column<span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">,</span>last_line<span class=\"k\">:</span><span class=\"s\">1</span><span class=\"k\">,</span>last_column<span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>ranges<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>range <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>offset <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","input<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> ch <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>yytext <span class=\"k\">+=</span> ch<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>yyleng<span class=\"k\">++;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>offset<span class=\"k\">++;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>match <span class=\"k\">+=</span> ch<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>matched <span class=\"k\">+=</span> ch<span class=\"k\">;</span>","        <span class=\"k\">var</span> lines <span class=\"k\">=</span> ch<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/(?:\\r\\n?|\\n).*/g</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>lines<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yylineno<span class=\"k\">++;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>last_line<span class=\"k\">++;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>last_column<span class=\"k\">++;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>ranges<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>range<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]++;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_input <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">return</span> ch<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","unput<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>ch<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> len <span class=\"k\">=</span> ch<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">var</span> lines <span class=\"k\">=</span> ch<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/(?:\\r\\n?|\\n)/g</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_input <span class=\"k\">=</span> ch <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>yytext <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>yytext<span class=\"k\">.</span>length<span class=\"k\">-</span>len<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"c\">//this.yyleng -= len;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>offset <span class=\"k\">-=</span> len<span class=\"k\">;</span>","        <span class=\"k\">var</span> oldLines <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>match<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/(?:\\r\\n?|\\n)/g</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>match <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>match<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>match<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>matched <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>matched<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>matched<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>lines<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylineno <span class=\"k\">-=</span> lines<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> r <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>range<span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>yylloc <span class=\"k\">=</span> <span class=\"k\">{</span>first_line<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>first_line<span class=\"k\">,</span>","          last_line<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylineno<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">,</span>","          first_column<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>first_column<span class=\"k\">,</span>","          last_column<span class=\"k\">:</span> lines <span class=\"k\">?</span>","              <span class=\"k\">(</span>lines<span class=\"k\">.</span>length <span class=\"k\">===</span> oldLines<span class=\"k\">.</span>length <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>first_column <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">+</span> oldLines<span class=\"k\">[</span>oldLines<span class=\"k\">.</span>length <span class=\"k\">-</span> lines<span class=\"k\">.</span>length<span class=\"k\">].</span>length <span class=\"k\">-</span> lines<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">:</span>","              <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>first_column <span class=\"k\">-</span> len","          <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>ranges<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>range <span class=\"k\">=</span> <span class=\"k\">[</span>r<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> r<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>yyleng <span class=\"k\">-</span> len<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","more<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_more <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","less<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">(</span>n<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>unput<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>match<span class=\"k\">.</span>slice<span class=\"k\">(</span>n<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","pastInput<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> past <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>matched<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>matched<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>match<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"k\">(</span>past<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">20</span> <span class=\"k\">?</span> <span class=\"s\">'...'</span><span class=\"k\">:</span><span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> past<span class=\"k\">.</span>substr<span class=\"k\">(-</span><span class=\"s\">20</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\n/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","upcomingInput<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> next <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>match<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>next<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">20</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            next <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">20</span><span class=\"k\">-</span>next<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">(</span>next<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">)+(</span>next<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">20</span> <span class=\"k\">?</span> <span class=\"s\">'...'</span><span class=\"k\">:</span><span class=\"s\">''</span><span class=\"k\">)).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\n/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","showPosition<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> pre <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>pastInput<span class=\"k\">();</span>","        <span class=\"k\">var</span> c <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>pre<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">).</span>join<span class=\"k\">(</span><span class=\"s\">\"-\"</span><span class=\"k\">);</span>","        <span class=\"k\">return</span> pre <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>upcomingInput<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> c<span class=\"k\">+</span><span class=\"s\">\"^\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","next<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>done<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>EOF<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>done <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> token<span class=\"k\">,</span>","            match<span class=\"k\">,</span>","            tempMatch<span class=\"k\">,</span>","            index<span class=\"k\">,</span>","            col<span class=\"k\">,</span>","            lines<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_more<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yytext <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>match <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">var</span> rules <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_currentRules<span class=\"k\">();</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span>i <span class=\"k\">&lt;</span> rules<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            tempMatch <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>rules<span class=\"k\">[</span>rules<span class=\"k\">[</span>i<span class=\"k\">]]);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>tempMatch <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>match <span class=\"k\">||</span> tempMatch<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length <span class=\"k\">&gt;</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">))</span> <span class=\"k\">{</span>","                match <span class=\"k\">=</span> tempMatch<span class=\"k\">;</span>","                index <span class=\"k\">=</span> i<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>flex<span class=\"k\">)</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>match<span class=\"k\">)</span> <span class=\"k\">{</span>","            lines <span class=\"k\">=</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>match<span class=\"k\">(</span><span class=\"s\">/(?:\\r\\n?|\\n).*/g</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>lines<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylineno <span class=\"k\">+=</span> lines<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yylloc <span class=\"k\">=</span> <span class=\"k\">{</span>first_line<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>last_line<span class=\"k\">,</span>","                           last_line<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylineno<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">,</span>","                           first_column<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>last_column<span class=\"k\">,</span>","                           last_column<span class=\"k\">:</span> lines <span class=\"k\">?</span> lines<span class=\"k\">[</span>lines<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">-</span>lines<span class=\"k\">[</span>lines<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">].</span>match<span class=\"k\">(</span><span class=\"s\">/\\r?\\n?/</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">].</span>length <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>last_column <span class=\"k\">+</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yytext <span class=\"k\">+=</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>match <span class=\"k\">+=</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>matches <span class=\"k\">=</span> match<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>yyleng <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>yytext<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>ranges<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>yylloc<span class=\"k\">.</span>range <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>offset<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>offset <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>yyleng<span class=\"k\">];</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_more <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_input <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">.</span>slice<span class=\"k\">(</span>match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>matched <span class=\"k\">+=</span> match<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","            token <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>performAction<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>yy<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> rules<span class=\"k\">[</span>index<span class=\"k\">],</span><span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>done <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_input<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>done <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>token<span class=\"k\">)</span> <span class=\"k\">return</span> token<span class=\"k\">;</span>","            <span class=\"k\">else</span> <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_input <span class=\"k\">===</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>EOF<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>parseError<span class=\"k\">(</span><span class=\"s\">'Lexical error on line '</span><span class=\"k\">+(</span><span class=\"k\">this</span><span class=\"k\">.</span>yylineno<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">)+</span><span class=\"s\">'. Unrecognized text.</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">+</span><span class=\"k\">this</span><span class=\"k\">.</span>showPosition<span class=\"k\">(),</span>","                    <span class=\"k\">{</span>text<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> token<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span> line<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>yylineno<span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","lex<span class=\"k\">:</span><span class=\"k\">function</span> lex<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> r <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>next<span class=\"k\">();</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> r <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> r<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>lex<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","begin<span class=\"k\">:</span><span class=\"k\">function</span> begin<span class=\"k\">(</span>condition<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">.</span>push<span class=\"k\">(</span>condition<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","popState<span class=\"k\">:</span><span class=\"k\">function</span> popState<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">.</span>pop<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","_currentRules<span class=\"k\">:</span><span class=\"k\">function</span> _currentRules<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>conditions<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]].</span>rules<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","topState<span class=\"k\">:</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>conditionStack<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","pushState<span class=\"k\">:</span><span class=\"k\">function</span> begin<span class=\"k\">(</span>condition<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>begin<span class=\"k\">(</span>condition<span class=\"k\">);</span>","    <span class=\"k\">}}</span><span class=\"k\">);</span>","lexer<span class=\"k\">.</span>options <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","lexer<span class=\"k\">.</span>performAction <span class=\"k\">=</span> <span class=\"k\">function</span> anonymous<span class=\"k\">(</span>yy<span class=\"k\">,</span>yy_<span class=\"k\">,</span>$avoiding_name_collisions<span class=\"k\">,</span>YY_START<span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> YYSTATE<span class=\"k\">=</span>YY_START","<span class=\"k\">switch</span><span class=\"k\">(</span>$avoiding_name_collisions<span class=\"k\">)</span> <span class=\"k\">{</span>","<span class=\"k\">case</span> <span class=\"s\">0</span><span class=\"k\">:</span>","                                   <span class=\"k\">if</span><span class=\"k\">(</span>yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">\"</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>begin<span class=\"k\">(</span><span class=\"s\">\"mu\"</span><span class=\"k\">);</span>","                                   <span class=\"k\">if</span><span class=\"k\">(</span>yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">\"</span><span class=\"k\">)</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span>yy_<span class=\"k\">.</span>yyleng<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">),</span> <span class=\"k\">this</span><span class=\"k\">.</span>begin<span class=\"k\">(</span><span class=\"s\">\"emu\"</span><span class=\"k\">);</span>","                                   <span class=\"k\">if</span><span class=\"k\">(</span>yy_<span class=\"k\">.</span>yytext<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">14</span><span class=\"k\">;</span>","                                 ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">1</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">14</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">2</span><span class=\"k\">:</span>","                                   <span class=\"k\">if</span><span class=\"k\">(</span>yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">\"</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>popState<span class=\"k\">();</span>","                                   <span class=\"k\">if</span><span class=\"k\">(</span>yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">\"</span><span class=\"k\">)</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span>yy_<span class=\"k\">.</span>yyleng<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","                                   <span class=\"k\">return</span> <span class=\"s\">14</span><span class=\"k\">;</span>","                                 ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">3</span><span class=\"k\">:</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> yy_<span class=\"k\">.</span>yyleng<span class=\"k\">-</span><span class=\"s\">4</span><span class=\"k\">);</span> <span class=\"k\">this</span><span class=\"k\">.</span>popState<span class=\"k\">();</span> <span class=\"k\">return</span> <span class=\"s\">15</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">4</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>begin<span class=\"k\">(</span><span class=\"s\">\"par\"</span><span class=\"k\">);</span> <span class=\"k\">return</span> <span class=\"s\">24</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">5</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">16</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">6</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">20</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">7</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">19</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">8</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">19</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">9</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">23</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">10</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">23</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">11</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>popState<span class=\"k\">();</span> <span class=\"k\">this</span><span class=\"k\">.</span>begin<span class=\"k\">(</span><span class=\"s\">'com'</span><span class=\"k\">);</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">12</span><span class=\"k\">:</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">,</span>yy_<span class=\"k\">.</span>yyleng<span class=\"k\">-</span><span class=\"s\">5</span><span class=\"k\">);</span> <span class=\"k\">this</span><span class=\"k\">.</span>popState<span class=\"k\">();</span> <span class=\"k\">return</span> <span class=\"s\">15</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">13</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">22</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">14</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">36</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">15</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">35</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">16</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">35</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">17</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">39</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">18</span><span class=\"k\">:</span> <span class=\"c\">/*ignore whitespace*/</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">19</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>popState<span class=\"k\">();</span> <span class=\"k\">return</span> <span class=\"s\">18</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">20</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>popState<span class=\"k\">();</span> <span class=\"k\">return</span> <span class=\"s\">18</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">21</span><span class=\"k\">:</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span>yy_<span class=\"k\">.</span>yyleng<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\\\\"/g</span><span class=\"k\">,</span><span class=\"s\">'\"'</span><span class=\"k\">);</span> <span class=\"k\">return</span> <span class=\"s\">30</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">22</span><span class=\"k\">:</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span>yy_<span class=\"k\">.</span>yyleng<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\\\'/g</span><span class=\"k\">,</span><span class=\"s\">\"'\"</span><span class=\"k\">);</span> <span class=\"k\">return</span> <span class=\"s\">30</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">23</span><span class=\"k\">:</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span> <span class=\"k\">return</span> <span class=\"s\">28</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">24</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">32</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">25</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">32</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">26</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">31</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">27</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">35</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">28</span><span class=\"k\">:</span> yy_<span class=\"k\">.</span>yytext <span class=\"k\">=</span> yy_<span class=\"k\">.</span>yytext<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> yy_<span class=\"k\">.</span>yyleng<span class=\"k\">-</span><span class=\"s\">2</span><span class=\"k\">);</span> <span class=\"k\">return</span> <span class=\"s\">35</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">29</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">'INVALID'</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">30</span><span class=\"k\">:</span> <span class=\"c\">/*ignore whitespace*/</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">31</span><span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>popState<span class=\"k\">();</span> <span class=\"k\">return</span> <span class=\"s\">37</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">case</span> <span class=\"s\">32</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">5</span><span class=\"k\">;</span> ","<span class=\"k\">break</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","lexer<span class=\"k\">.</span>rules <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">/^(?:[^\\x00]*?(?=(\\{\\{)))/</span><span class=\"k\">,</span><span class=\"s\">/^(?:[^\\x00]+)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:[^\\x00]{2,}?(?=(\\{\\{|$)))/</span><span class=\"k\">,</span><span class=\"s\">/^(?:[\\s\\S]*?--\\}\\})/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{&gt;)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{#)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{\\/)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{\\^)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{\\s*else\\b)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{\\{)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{&amp;)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{!--)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{![\\s\\S]*?\\}\\})/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\{\\{)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:=)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\.(?=[} ]))/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\.\\.)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:[\\/.])/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\s+)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\}\\}\\})/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\}\\})/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\"(\\\\[\"]|[^\"])*\")/</span><span class=\"k\">,</span><span class=\"s\">/^(?:'(\\\\[']|[^'])*')/</span><span class=\"k\">,</span><span class=\"s\">/^(?:@[a-zA-Z]+)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:true(?=[}\\s]))/</span><span class=\"k\">,</span><span class=\"s\">/^(?:false(?=[}\\s]))/</span><span class=\"k\">,</span><span class=\"s\">/^(?:[0-9]+(?=[}\\s]))/</span><span class=\"k\">,</span><span class=\"s\">/^(?:[a-zA-Z0-9_$-]+(?=[=}\\s\\/.]))/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\[[^\\]]*\\])/</span><span class=\"k\">,</span><span class=\"s\">/^(?:.)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:\\s+)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:[a-zA-Z0-9_$-/]+)/</span><span class=\"k\">,</span><span class=\"s\">/^(?:$)/</span><span class=\"k\">];</span>","lexer<span class=\"k\">.</span>conditions <span class=\"k\">=</span> <span class=\"k\">{</span><span class=\"s\">\"mu\"</span><span class=\"k\">:</span><span class=\"k\">{</span><span class=\"s\">\"rules\"</span><span class=\"k\">:[</span><span class=\"s\">4</span><span class=\"k\">,</span><span class=\"s\">5</span><span class=\"k\">,</span><span class=\"s\">6</span><span class=\"k\">,</span><span class=\"s\">7</span><span class=\"k\">,</span><span class=\"s\">8</span><span class=\"k\">,</span><span class=\"s\">9</span><span class=\"k\">,</span><span class=\"s\">10</span><span class=\"k\">,</span><span class=\"s\">11</span><span class=\"k\">,</span><span class=\"s\">12</span><span class=\"k\">,</span><span class=\"s\">13</span><span class=\"k\">,</span><span class=\"s\">14</span><span class=\"k\">,</span><span class=\"s\">15</span><span class=\"k\">,</span><span class=\"s\">16</span><span class=\"k\">,</span><span class=\"s\">17</span><span class=\"k\">,</span><span class=\"s\">18</span><span class=\"k\">,</span><span class=\"s\">19</span><span class=\"k\">,</span><span class=\"s\">20</span><span class=\"k\">,</span><span class=\"s\">21</span><span class=\"k\">,</span><span class=\"s\">22</span><span class=\"k\">,</span><span class=\"s\">23</span><span class=\"k\">,</span><span class=\"s\">24</span><span class=\"k\">,</span><span class=\"s\">25</span><span class=\"k\">,</span><span class=\"s\">26</span><span class=\"k\">,</span><span class=\"s\">27</span><span class=\"k\">,</span><span class=\"s\">28</span><span class=\"k\">,</span><span class=\"s\">29</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">],</span><span class=\"s\">\"inclusive\"</span><span class=\"k\">:</span><span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"s\">\"emu\"</span><span class=\"k\">:</span><span class=\"k\">{</span><span class=\"s\">\"rules\"</span><span class=\"k\">:[</span><span class=\"s\">2</span><span class=\"k\">],</span><span class=\"s\">\"inclusive\"</span><span class=\"k\">:</span><span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"s\">\"com\"</span><span class=\"k\">:</span><span class=\"k\">{</span><span class=\"s\">\"rules\"</span><span class=\"k\">:[</span><span class=\"s\">3</span><span class=\"k\">],</span><span class=\"s\">\"inclusive\"</span><span class=\"k\">:</span><span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"s\">\"par\"</span><span class=\"k\">:</span><span class=\"k\">{</span><span class=\"s\">\"rules\"</span><span class=\"k\">:[</span><span class=\"s\">30</span><span class=\"k\">,</span><span class=\"s\">31</span><span class=\"k\">],</span><span class=\"s\">\"inclusive\"</span><span class=\"k\">:</span><span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"s\">\"INITIAL\"</span><span class=\"k\">:</span><span class=\"k\">{</span><span class=\"s\">\"rules\"</span><span class=\"k\">:[</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">32</span><span class=\"k\">],</span><span class=\"s\">\"inclusive\"</span><span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}}</span><span class=\"k\">;</span>","<span class=\"k\">return</span> lexer<span class=\"k\">;</span><span class=\"k\">}</span><span class=\"k\">)()</span>","parser<span class=\"k\">.</span>lexer <span class=\"k\">=</span> lexer<span class=\"k\">;</span>","<span class=\"k\">function</span> Parser <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>yy <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"k\">}</span>Parser<span class=\"k\">.</span>prototype <span class=\"k\">=</span> parser<span class=\"k\">;</span>parser<span class=\"k\">.</span>Parser <span class=\"k\">=</span> Parser<span class=\"k\">;</span>","<span class=\"k\">return</span> <span class=\"k\">new</span> Parser<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">)();;</span>","<span class=\"c\">// lib/handlebars/compiler/base.js</span>","Handlebars<span class=\"k\">.</span>Parser <span class=\"k\">=</span> handlebars<span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>parse <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","","  <span class=\"c\">// Just return if an already-compile AST was passed in.</span>","  <span class=\"k\">if</span><span class=\"k\">(</span>input<span class=\"k\">.</span>constructor <span class=\"k\">===</span> Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>ProgramNode<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> input<span class=\"k\">;</span> <span class=\"k\">}</span>","","  Handlebars<span class=\"k\">.</span>Parser<span class=\"k\">.</span>yy <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>AST<span class=\"k\">;</span>","  <span class=\"k\">return</span> Handlebars<span class=\"k\">.</span>Parser<span class=\"k\">.</span>parse<span class=\"k\">(</span>input<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>print <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>ast<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>PrintVisitor<span class=\"k\">().</span>accept<span class=\"k\">(</span>ast<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;;</span>","<span class=\"c\">// lib/handlebars/compiler/ast.js</span>","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","  Handlebars<span class=\"k\">.</span>AST <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>ProgramNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>statements<span class=\"k\">,</span> inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"program\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>statements <span class=\"k\">=</span> statements<span class=\"k\">;</span>","    <span class=\"k\">if</span><span class=\"k\">(</span>inverse<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>inverse <span class=\"k\">=</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>ProgramNode<span class=\"k\">(</span>inverse<span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>MustacheNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>rawParams<span class=\"k\">,</span> hash<span class=\"k\">,</span> unescaped<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"mustache\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>escaped <span class=\"k\">=</span> <span class=\"k\">!</span>unescaped<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>hash <span class=\"k\">=</span> hash<span class=\"k\">;</span>","","    <span class=\"k\">var</span> id <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> rawParams<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","    <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>params <span class=\"k\">=</span> rawParams<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","","    <span class=\"c\">// a mustache is an eligible helper if:</span>","    <span class=\"c\">// * its id is simple (a single part, not `this` or `..`)</span>","    <span class=\"k\">var</span> eligibleHelper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>eligibleHelper <span class=\"k\">=</span> id<span class=\"k\">.</span>isSimple<span class=\"k\">;</span>","","    <span class=\"c\">// a mustache is definitely a helper if:</span>","    <span class=\"c\">// * it is an eligible helper, and</span>","    <span class=\"c\">// * it has at least one parameter or hash segment</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>isHelper <span class=\"k\">=</span> eligibleHelper <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>params<span class=\"k\">.</span>length <span class=\"k\">||</span> hash<span class=\"k\">);</span>","","    <span class=\"c\">// if a mustache is an eligible helper but not a definite</span>","    <span class=\"c\">// helper, it is ambiguous, and will be resolved in a later</span>","    <span class=\"c\">// pass or at runtime.</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>PartialNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>partialName<span class=\"k\">,</span> context<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type         <span class=\"k\">=</span> <span class=\"s\">\"partial\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>partialName  <span class=\"k\">=</span> partialName<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>context      <span class=\"k\">=</span> context<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> verifyMatch <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>open<span class=\"k\">,</span> close<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(</span>open<span class=\"k\">.</span>original <span class=\"k\">!==</span> close<span class=\"k\">.</span>original<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">throw</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Exception<span class=\"k\">(</span>open<span class=\"k\">.</span>original <span class=\"k\">+</span> <span class=\"s\">\" doesn't match \"</span> <span class=\"k\">+</span> close<span class=\"k\">.</span>original<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>BlockNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">,</span> program<span class=\"k\">,</span> inverse<span class=\"k\">,</span> close<span class=\"k\">)</span> <span class=\"k\">{</span>","    verifyMatch<span class=\"k\">(</span>mustache<span class=\"k\">.</span>id<span class=\"k\">,</span> close<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"block\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>mustache <span class=\"k\">=</span> mustache<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>program  <span class=\"k\">=</span> program<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>inverse  <span class=\"k\">=</span> inverse<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>inverse <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>program<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>isInverse <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>ContentNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"content\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>string <span class=\"k\">=</span> string<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>HashNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>pairs<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"hash\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>pairs <span class=\"k\">=</span> pairs<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>IdNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>parts<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"ID\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>original <span class=\"k\">=</span> parts<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\".\"</span><span class=\"k\">);</span>","","    <span class=\"k\">var</span> dig <span class=\"k\">=</span> <span class=\"k\">[],</span> depth <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","    <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span>l<span class=\"k\">=</span>parts<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> part <span class=\"k\">=</span> parts<span class=\"k\">[</span>i<span class=\"k\">];</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>part <span class=\"k\">===</span> <span class=\"s\">\"..\"</span> <span class=\"k\">||</span> part <span class=\"k\">===</span> <span class=\"s\">\".\"</span> <span class=\"k\">||</span> part <span class=\"k\">===</span> <span class=\"s\">\"this\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>dig<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Exception<span class=\"k\">(</span><span class=\"s\">\"Invalid path: \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>original<span class=\"k\">);</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>part <span class=\"k\">===</span> <span class=\"s\">\"..\"</span><span class=\"k\">)</span> <span class=\"k\">{</span> depth<span class=\"k\">++;</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>isScoped <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> dig<span class=\"k\">.</span>push<span class=\"k\">(</span>part<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>parts    <span class=\"k\">=</span> dig<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>string   <span class=\"k\">=</span> dig<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'.'</span><span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>depth    <span class=\"k\">=</span> depth<span class=\"k\">;</span>","","    <span class=\"c\">// an ID is simple if it only has one part, and that part is not</span>","    <span class=\"c\">// `..` or `this`.</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>isSimple <span class=\"k\">=</span> parts<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>isScoped <span class=\"k\">&amp;&amp;</span> depth <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>stringModeValue <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>string<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>PartialNameNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"PARTIAL_NAME\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> name<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>DataNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>id<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"DATA\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> id<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>StringNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"STRING\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>string <span class=\"k\">=</span> string<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>stringModeValue <span class=\"k\">=</span> string<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>IntegerNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>integer<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"INTEGER\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>integer <span class=\"k\">=</span> integer<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>stringModeValue <span class=\"k\">=</span> Number<span class=\"k\">(</span>integer<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>BooleanNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>bool<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"BOOLEAN\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>bool <span class=\"k\">=</span> bool<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>stringModeValue <span class=\"k\">=</span> bool <span class=\"k\">===</span> <span class=\"s\">\"true\"</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>CommentNode <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>comment<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"comment\"</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>comment <span class=\"k\">=</span> comment<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">)();;</span>","<span class=\"c\">// lib/handlebars/utils.js</span>","","<span class=\"k\">var</span> errorProps <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'description'</span><span class=\"k\">,</span> <span class=\"s\">'fileName'</span><span class=\"k\">,</span> <span class=\"s\">'lineNumber'</span><span class=\"k\">,</span> <span class=\"s\">'message'</span><span class=\"k\">,</span> <span class=\"s\">'name'</span><span class=\"k\">,</span> <span class=\"s\">'number'</span><span class=\"k\">,</span> <span class=\"s\">'stack'</span><span class=\"k\">];</span>","","Handlebars<span class=\"k\">.</span>Exception <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>message<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> tmp <span class=\"k\">=</span> Error<span class=\"k\">.</span>prototype<span class=\"k\">.</span>constructor<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","","  <span class=\"c\">// Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> idx <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> idx <span class=\"k\">&lt;</span> errorProps<span class=\"k\">.</span>length<span class=\"k\">;</span> idx<span class=\"k\">++)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">[</span>errorProps<span class=\"k\">[</span>idx<span class=\"k\">]]</span> <span class=\"k\">=</span> tmp<span class=\"k\">[</span>errorProps<span class=\"k\">[</span>idx<span class=\"k\">]];</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","Handlebars<span class=\"k\">.</span>Exception<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">new</span> Error<span class=\"k\">();</span>","","<span class=\"c\">// Build out our basic SafeString type</span>","Handlebars<span class=\"k\">.</span>SafeString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>string <span class=\"k\">=</span> string<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","Handlebars<span class=\"k\">.</span>SafeString<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>string<span class=\"k\">.</span>toString<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> escape <span class=\"k\">=</span> <span class=\"k\">{</span>","    <span class=\"s\">\"&amp;\"</span><span class=\"k\">:</span> <span class=\"s\">\"&amp;amp;\"</span><span class=\"k\">,</span>","    <span class=\"s\">\"&lt;\"</span><span class=\"k\">:</span> <span class=\"s\">\"&amp;lt;\"</span><span class=\"k\">,</span>","    <span class=\"s\">\"&gt;\"</span><span class=\"k\">:</span> <span class=\"s\">\"&amp;gt;\"</span><span class=\"k\">,</span>","    <span class=\"s\">'\"'</span><span class=\"k\">:</span> <span class=\"s\">\"&amp;quot;\"</span><span class=\"k\">,</span>","    <span class=\"s\">\"'\"</span><span class=\"k\">:</span> <span class=\"s\">\"&amp;#x27;\"</span><span class=\"k\">,</span>","    <span class=\"s\">\"`\"</span><span class=\"k\">:</span> <span class=\"s\">\"&amp;#x60;\"</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> badChars <span class=\"k\">=</span> <span class=\"s\">/[&amp;&lt;&gt;\"'`]/g</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> possible <span class=\"k\">=</span> <span class=\"s\">/[&amp;&lt;&gt;\"'`]/</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> escapeChar <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>chr<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> escape<span class=\"k\">[</span>chr<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">\"&amp;amp;\"</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  Handlebars<span class=\"k\">.</span>Utils <span class=\"k\">=</span> <span class=\"k\">{</span>","    escapeExpression<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// don't escape SafeStrings, since they're already safe</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>string <span class=\"k\">instanceof</span> Handlebars<span class=\"k\">.</span>SafeString<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> string<span class=\"k\">.</span>toString<span class=\"k\">();</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>string <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> string <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(!</span>possible<span class=\"k\">.</span>test<span class=\"k\">(</span>string<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> string<span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">return</span> string<span class=\"k\">.</span>replace<span class=\"k\">(</span>badChars<span class=\"k\">,</span> escapeChar<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    isEmpty<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>value <span class=\"k\">&amp;&amp;</span> value <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">.</span>call<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"[object Array]\"</span> <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">)();;</span>","<span class=\"c\">// lib/handlebars/compiler/compiler.js</span>","","<span class=\"c\">/*jshint eqnull:true*/</span>","Handlebars<span class=\"k\">.</span>Compiler <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","Handlebars<span class=\"k\">.</span>JavaScriptCompiler <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>Compiler<span class=\"k\">,</span> JavaScriptCompiler<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"c\">// the foundHelper register will disambiguate helper lookup from finding a</span>","  <span class=\"c\">// function in a context. This is necessary for mustache compatibility, which</span>","  <span class=\"c\">// requires that context functions in blocks are evaluated by blockHelperMissing,</span>","  <span class=\"c\">// and then proceed as if the resulting value was provided to blockHelperMissing.</span>","","  Compiler<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","    compiler<span class=\"k\">:</span> Compiler<span class=\"k\">,</span>","","    disassemble<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> opcodes <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>opcodes<span class=\"k\">,</span> opcode<span class=\"k\">,</span> out <span class=\"k\">=</span> <span class=\"k\">[],</span> params<span class=\"k\">,</span> param<span class=\"k\">;</span>","","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l<span class=\"k\">=</span>opcodes<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        opcode <span class=\"k\">=</span> opcodes<span class=\"k\">[</span>i<span class=\"k\">];</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>opcode<span class=\"k\">.</span>opcode <span class=\"k\">===</span> <span class=\"s\">'DECLARE'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          out<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"DECLARE \"</span> <span class=\"k\">+</span> opcode<span class=\"k\">.</span>name <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> opcode<span class=\"k\">.</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          params <span class=\"k\">=</span> <span class=\"k\">[];</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> j<span class=\"k\">&lt;</span>opcode<span class=\"k\">.</span>args<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","            param <span class=\"k\">=</span> opcode<span class=\"k\">.</span>args<span class=\"k\">[</span>j<span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> param <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","              param <span class=\"k\">=</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> param<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">,</span> <span class=\"s\">\"</span><span class=\"t\">\\\\</span><span class=\"s\">n\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            params<span class=\"k\">.</span>push<span class=\"k\">(</span>param<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          out<span class=\"k\">.</span>push<span class=\"k\">(</span>opcode<span class=\"k\">.</span>opcode <span class=\"k\">+</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> params<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\" \"</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> out<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    equals<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>other<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>opcodes<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>other<span class=\"k\">.</span>opcodes<span class=\"k\">.</span>length <span class=\"k\">!==</span> len<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> opcode <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>opcodes<span class=\"k\">[</span>i<span class=\"k\">],</span>","            otherOpcode <span class=\"k\">=</span> other<span class=\"k\">.</span>opcodes<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>opcode<span class=\"k\">.</span>opcode <span class=\"k\">!==</span> otherOpcode<span class=\"k\">.</span>opcode <span class=\"k\">||</span> opcode<span class=\"k\">.</span>args<span class=\"k\">.</span>length <span class=\"k\">!==</span> otherOpcode<span class=\"k\">.</span>args<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> opcode<span class=\"k\">.</span>args<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>opcode<span class=\"k\">.</span>args<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">!==</span> otherOpcode<span class=\"k\">.</span>args<span class=\"k\">[</span>j<span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    guid<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","","    compile<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>program<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>children <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>depths <span class=\"k\">=</span> <span class=\"k\">{</span>list<span class=\"k\">:</span> <span class=\"k\">[]</span><span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>options <span class=\"k\">=</span> options<span class=\"k\">;</span>","","      <span class=\"c\">// These changes will propagate to the other compiler components</span>","      <span class=\"k\">var</span> knownHelpers <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>knownHelpers<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>knownHelpers <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"s\">'helperMissing'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        <span class=\"s\">'blockHelperMissing'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        <span class=\"s\">'each'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        <span class=\"s\">'if'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        <span class=\"s\">'unless'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        <span class=\"s\">'with'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        <span class=\"s\">'log'</span><span class=\"k\">:</span> <span class=\"k\">true</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>knownHelpers<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> name <span class=\"k\">in</span> knownHelpers<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>knownHelpers<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> knownHelpers<span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>program<span class=\"k\">(</span>program<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    accept<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>node<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">[</span>node<span class=\"k\">.</span>type<span class=\"k\">](</span>node<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    program<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>program<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> statements <span class=\"k\">=</span> program<span class=\"k\">.</span>statements<span class=\"k\">,</span> statement<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcodes <span class=\"k\">=</span> <span class=\"k\">[];</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l<span class=\"k\">=</span>statements<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        statement <span class=\"k\">=</span> statements<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">this</span><span class=\"k\">[</span>statement<span class=\"k\">.</span>type<span class=\"k\">](</span>statement<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>isSimple <span class=\"k\">=</span> l <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>depths<span class=\"k\">.</span>list <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>depths<span class=\"k\">.</span>list<span class=\"k\">.</span>sort<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> a <span class=\"k\">-</span> b<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    compileProgram<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>program<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>compiler<span class=\"k\">().</span>compile<span class=\"k\">(</span>program<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">);</span>","      <span class=\"k\">var</span> guid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>guid<span class=\"k\">++,</span> depth<span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>usePartial <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>usePartial <span class=\"k\">||</span> result<span class=\"k\">.</span>usePartial<span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>children<span class=\"k\">[</span>guid<span class=\"k\">]</span> <span class=\"k\">=</span> result<span class=\"k\">;</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l<span class=\"k\">=</span>result<span class=\"k\">.</span>depths<span class=\"k\">.</span>list<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        depth <span class=\"k\">=</span> result<span class=\"k\">.</span>depths<span class=\"k\">.</span>list<span class=\"k\">[</span>i<span class=\"k\">];</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span>depth <span class=\"k\">&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addDepth<span class=\"k\">(</span>depth <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> guid<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    block<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>block<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> mustache <span class=\"k\">=</span> block<span class=\"k\">.</span>mustache<span class=\"k\">,</span>","          program <span class=\"k\">=</span> block<span class=\"k\">.</span>program<span class=\"k\">,</span>","          inverse <span class=\"k\">=</span> block<span class=\"k\">.</span>inverse<span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>program<span class=\"k\">)</span> <span class=\"k\">{</span>","        program <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>compileProgram<span class=\"k\">(</span>program<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","        inverse <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>compileProgram<span class=\"k\">(</span>inverse<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">var</span> type <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>classifyMustache<span class=\"k\">(</span>mustache<span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">\"helper\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>helperMustache<span class=\"k\">(</span>mustache<span class=\"k\">,</span> program<span class=\"k\">,</span> inverse<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">\"simple\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>simpleMustache<span class=\"k\">(</span>mustache<span class=\"k\">);</span>","","        <span class=\"c\">// now that the simple mustache is resolved, we need to</span>","        <span class=\"c\">// evaluate it by executing `blockHelperMissing`</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> program<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> inverse<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'emptyHash'</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'blockValue'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>ambiguousMustache<span class=\"k\">(</span>mustache<span class=\"k\">,</span> program<span class=\"k\">,</span> inverse<span class=\"k\">);</span>","","        <span class=\"c\">// now that the simple mustache is resolved, we need to</span>","        <span class=\"c\">// evaluate it by executing `blockHelperMissing`</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> program<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> inverse<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'emptyHash'</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'ambiguousBlockValue'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'append'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    hash<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hash<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> pairs <span class=\"k\">=</span> hash<span class=\"k\">.</span>pairs<span class=\"k\">,</span> pair<span class=\"k\">,</span> val<span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushHash'</span><span class=\"k\">);</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l<span class=\"k\">=</span>pairs<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        pair <span class=\"k\">=</span> pairs<span class=\"k\">[</span>i<span class=\"k\">];</span>","        val  <span class=\"k\">=</span> pair<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>stringParams<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushStringParam'</span><span class=\"k\">,</span> val<span class=\"k\">.</span>stringModeValue<span class=\"k\">,</span> val<span class=\"k\">.</span>type<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>accept<span class=\"k\">(</span>val<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'assignToHash'</span><span class=\"k\">,</span> pair<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'popHash'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    partial<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>partial<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> partialName <span class=\"k\">=</span> partial<span class=\"k\">.</span>partialName<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>usePartial <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>partial<span class=\"k\">.</span>context<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>ID<span class=\"k\">(</span>partial<span class=\"k\">.</span>context<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'push'</span><span class=\"k\">,</span> <span class=\"s\">'depth0'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'invokePartial'</span><span class=\"k\">,</span> partialName<span class=\"k\">.</span>name<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'append'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    content<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>content<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'appendContent'</span><span class=\"k\">,</span> content<span class=\"k\">.</span>string<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    mustache<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","      <span class=\"k\">var</span> type <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>classifyMustache<span class=\"k\">(</span>mustache<span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">\"simple\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>simpleMustache<span class=\"k\">(</span>mustache<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">\"helper\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>helperMustache<span class=\"k\">(</span>mustache<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>ambiguousMustache<span class=\"k\">(</span>mustache<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>mustache<span class=\"k\">.</span>escaped <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>options<span class=\"k\">.</span>noEscape<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'appendEscaped'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'append'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    ambiguousMustache<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">,</span> program<span class=\"k\">,</span> inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> id <span class=\"k\">=</span> mustache<span class=\"k\">.</span>id<span class=\"k\">,</span>","          name <span class=\"k\">=</span> id<span class=\"k\">.</span>parts<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span>","          isBlock <span class=\"k\">=</span> program <span class=\"k\">!=</span> <span class=\"k\">null</span> <span class=\"k\">||</span> inverse <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'getContext'</span><span class=\"k\">,</span> id<span class=\"k\">.</span>depth<span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> program<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> inverse<span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'invokeAmbiguous'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> isBlock<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    simpleMustache<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> id <span class=\"k\">=</span> mustache<span class=\"k\">.</span>id<span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>id<span class=\"k\">.</span>type <span class=\"k\">===</span> <span class=\"s\">'DATA'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>DATA<span class=\"k\">(</span>id<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>id<span class=\"k\">.</span>parts<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>ID<span class=\"k\">(</span>id<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"c\">// Simplified ID for `this`</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>addDepth<span class=\"k\">(</span>id<span class=\"k\">.</span>depth<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'getContext'</span><span class=\"k\">,</span> id<span class=\"k\">.</span>depth<span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushContext'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'resolvePossibleLambda'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    helperMustache<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">,</span> program<span class=\"k\">,</span> inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>setupFullMustacheParams<span class=\"k\">(</span>mustache<span class=\"k\">,</span> program<span class=\"k\">,</span> inverse<span class=\"k\">),</span>","          name <span class=\"k\">=</span> mustache<span class=\"k\">.</span>id<span class=\"k\">.</span>parts<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>knownHelpers<span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'invokeKnownHelper'</span><span class=\"k\">,</span> params<span class=\"k\">.</span>length<span class=\"k\">,</span> name<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>knownHelpersOnly<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"You specified knownHelpersOnly, but used the unknown helper \"</span> <span class=\"k\">+</span> name<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'invokeHelper'</span><span class=\"k\">,</span> params<span class=\"k\">.</span>length<span class=\"k\">,</span> name<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    ID<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>id<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addDepth<span class=\"k\">(</span>id<span class=\"k\">.</span>depth<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'getContext'</span><span class=\"k\">,</span> id<span class=\"k\">.</span>depth<span class=\"k\">);</span>","","      <span class=\"k\">var</span> name <span class=\"k\">=</span> id<span class=\"k\">.</span>parts<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushContext'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'lookupOnContext'</span><span class=\"k\">,</span> id<span class=\"k\">.</span>parts<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">1</span><span class=\"k\">,</span> l<span class=\"k\">=</span>id<span class=\"k\">.</span>parts<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'lookup'</span><span class=\"k\">,</span> id<span class=\"k\">.</span>parts<span class=\"k\">[</span>i<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    DATA<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'lookupData'</span><span class=\"k\">,</span> data<span class=\"k\">.</span>id<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    STRING<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushString'</span><span class=\"k\">,</span> string<span class=\"k\">.</span>string<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    INTEGER<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>integer<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushLiteral'</span><span class=\"k\">,</span> integer<span class=\"k\">.</span>integer<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    BOOLEAN<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>bool<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushLiteral'</span><span class=\"k\">,</span> bool<span class=\"k\">.</span>bool<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    comment<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">// HELPERS</span>","    opcode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcodes<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span> opcode<span class=\"k\">:</span> name<span class=\"k\">,</span> args<span class=\"k\">:</span> <span class=\"k\">[].</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    declare<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcodes<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span> opcode<span class=\"k\">:</span> <span class=\"s\">'DECLARE'</span><span class=\"k\">,</span> name<span class=\"k\">:</span> name<span class=\"k\">,</span> value<span class=\"k\">:</span> value <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    addDepth<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>depth<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span><span class=\"k\">(</span>isNaN<span class=\"k\">(</span>depth<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"EWOT\"</span><span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">if</span><span class=\"k\">(</span>depth <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>depths<span class=\"k\">[</span>depth<span class=\"k\">])</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>depths<span class=\"k\">[</span>depth<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>depths<span class=\"k\">.</span>list<span class=\"k\">.</span>push<span class=\"k\">(</span>depth<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    classifyMustache<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> isHelper   <span class=\"k\">=</span> mustache<span class=\"k\">.</span>isHelper<span class=\"k\">;</span>","      <span class=\"k\">var</span> isEligible <span class=\"k\">=</span> mustache<span class=\"k\">.</span>eligibleHelper<span class=\"k\">;</span>","      <span class=\"k\">var</span> options    <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","","      <span class=\"c\">// if ambiguous, we can possibly resolve the ambiguity now</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>isEligible <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>isHelper<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> name <span class=\"k\">=</span> mustache<span class=\"k\">.</span>id<span class=\"k\">.</span>parts<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>knownHelpers<span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">{</span>","          isHelper <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>knownHelpersOnly<span class=\"k\">)</span> <span class=\"k\">{</span>","          isEligible <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>isHelper<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">\"helper\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>isEligible<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">\"ambiguous\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">\"simple\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    pushParams<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>params<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> i <span class=\"k\">=</span> params<span class=\"k\">.</span>length<span class=\"k\">,</span> param<span class=\"k\">;</span>","","      <span class=\"k\">while</span><span class=\"k\">(</span>i<span class=\"k\">--)</span> <span class=\"k\">{</span>","        param <span class=\"k\">=</span> params<span class=\"k\">[</span>i<span class=\"k\">];</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>stringParams<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span><span class=\"k\">(</span>param<span class=\"k\">.</span>depth<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>addDepth<span class=\"k\">(</span>param<span class=\"k\">.</span>depth<span class=\"k\">);</span>","          <span class=\"k\">}</span>","","          <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'getContext'</span><span class=\"k\">,</span> param<span class=\"k\">.</span>depth <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">);</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushStringParam'</span><span class=\"k\">,</span> param<span class=\"k\">.</span>stringModeValue<span class=\"k\">,</span> param<span class=\"k\">.</span>type<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">[</span>param<span class=\"k\">.</span>type<span class=\"k\">](</span>param<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    setupMustacheParams<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> params <span class=\"k\">=</span> mustache<span class=\"k\">.</span>params<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>pushParams<span class=\"k\">(</span>params<span class=\"k\">);</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>mustache<span class=\"k\">.</span>hash<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>hash<span class=\"k\">(</span>mustache<span class=\"k\">.</span>hash<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'emptyHash'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> params<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// this will replace setupMustacheParams when we're done</span>","    setupFullMustacheParams<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>mustache<span class=\"k\">,</span> program<span class=\"k\">,</span> inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> params <span class=\"k\">=</span> mustache<span class=\"k\">.</span>params<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>pushParams<span class=\"k\">(</span>params<span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> program<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'pushProgram'</span><span class=\"k\">,</span> inverse<span class=\"k\">);</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>mustache<span class=\"k\">.</span>hash<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>hash<span class=\"k\">(</span>mustache<span class=\"k\">.</span>hash<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>opcode<span class=\"k\">(</span><span class=\"s\">'emptyHash'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> params<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> Literal <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>value <span class=\"k\">=</span> value<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  JavaScriptCompiler<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","    <span class=\"c\">// PUBLIC API: You can override these methods in a subclass to provide</span>","    <span class=\"c\">// alternative compiled forms for name lookup and buffering semantics</span>","    nameLookup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>parent<span class=\"k\">,</span> name <span class=\"c\">/* , type*/</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^[0-9]+$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> parent <span class=\"k\">+</span> <span class=\"s\">\"[\"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\"]\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>JavaScriptCompiler<span class=\"k\">.</span>isValidJavaScriptVariableName<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> parent <span class=\"k\">+</span> <span class=\"s\">\".\"</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> parent <span class=\"k\">+</span> <span class=\"s\">\"['\"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\"']\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    appendToBuffer<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>isSimple<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"return \"</span> <span class=\"k\">+</span> string <span class=\"k\">+</span> <span class=\"s\">\";\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">{</span>","          appendToBuffer<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","          content<span class=\"k\">:</span> string<span class=\"k\">,</span>","          toString<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">\"buffer += \"</span> <span class=\"k\">+</span> string <span class=\"k\">+</span> <span class=\"s\">\";\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    initializeBuffer<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>quotedString<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    namespace<span class=\"k\">:</span> <span class=\"s\">\"Handlebars\"</span><span class=\"k\">,</span>","    <span class=\"c\">// END PUBLIC API</span>","","    compile<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>environment<span class=\"k\">,</span> options<span class=\"k\">,</span> context<span class=\"k\">,</span> asObject<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>environment <span class=\"k\">=</span> environment<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","      Handlebars<span class=\"k\">.</span>log<span class=\"k\">(</span>Handlebars<span class=\"k\">.</span>logger<span class=\"k\">.</span>DEBUG<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>disassemble<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\n\\n</span><span class=\"s\">\"</span><span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>name<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>isChild <span class=\"k\">=</span> <span class=\"k\">!!</span>context<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context <span class=\"k\">=</span> context <span class=\"k\">||</span> <span class=\"k\">{</span>","        programs<span class=\"k\">:</span> <span class=\"k\">[],</span>","        environments<span class=\"k\">:</span> <span class=\"k\">[],</span>","        aliases<span class=\"k\">:</span> <span class=\"k\">{</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>preamble<span class=\"k\">();</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>stackSlot <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>stackVars <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>registers <span class=\"k\">=</span> <span class=\"k\">{</span> list<span class=\"k\">:</span> <span class=\"k\">[]</span> <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>compileStack <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>inlineStack <span class=\"k\">=</span> <span class=\"k\">[];</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>compileChildren<span class=\"k\">(</span>environment<span class=\"k\">,</span> options<span class=\"k\">);</span>","","      <span class=\"k\">var</span> opcodes <span class=\"k\">=</span> environment<span class=\"k\">.</span>opcodes<span class=\"k\">,</span> opcode<span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span>l<span class=\"k\">=</span>opcodes<span class=\"k\">.</span>length<span class=\"k\">;</span> <span class=\"k\">this</span><span class=\"k\">.</span>i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> <span class=\"k\">this</span><span class=\"k\">.</span>i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        opcode <span class=\"k\">=</span> opcodes<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>i<span class=\"k\">];</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span>opcode<span class=\"k\">.</span>opcode <span class=\"k\">===</span> <span class=\"s\">'DECLARE'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">[</span>opcode<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> opcode<span class=\"k\">.</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">[</span>opcode<span class=\"k\">.</span>opcode<span class=\"k\">].</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> opcode<span class=\"k\">.</span>args<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>createFunctionContext<span class=\"k\">(</span>asObject<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    nextOpcode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> opcodes <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>opcodes<span class=\"k\">;</span>","      <span class=\"k\">return</span> opcodes<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>i <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">];</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    eat<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>i <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>i <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    preamble<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> out <span class=\"k\">=</span> <span class=\"k\">[];</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>isChild<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> namespace <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>namespace<span class=\"k\">;</span>","        <span class=\"k\">var</span> copies <span class=\"k\">=</span> <span class=\"s\">\"helpers = helpers || \"</span> <span class=\"k\">+</span> namespace <span class=\"k\">+</span> <span class=\"s\">\".helpers;\"</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>usePartial<span class=\"k\">)</span> <span class=\"k\">{</span> copies <span class=\"k\">=</span> copies <span class=\"k\">+</span> <span class=\"s\">\" partials = partials || \"</span> <span class=\"k\">+</span> namespace <span class=\"k\">+</span> <span class=\"s\">\".partials;\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> copies <span class=\"k\">=</span> copies <span class=\"k\">+</span> <span class=\"s\">\" data = data || {};\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        out<span class=\"k\">.</span>push<span class=\"k\">(</span>copies<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        out<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>isSimple<span class=\"k\">)</span> <span class=\"k\">{</span>","        out<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\", buffer = \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>initializeBuffer<span class=\"k\">());</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        out<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// track the last context pushed into place to allow skipping the</span>","      <span class=\"c\">// getContext opcode when it would be a noop</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>lastContext <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>source <span class=\"k\">=</span> out<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    createFunctionContext<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>asObject<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> locals <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>stackVars<span class=\"k\">.</span>concat<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>registers<span class=\"k\">.</span>list<span class=\"k\">);</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>locals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\", \"</span> <span class=\"k\">+</span> locals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Generate minimizer alias mappings</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>isChild<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> alias <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">', '</span> <span class=\"k\">+</span> alias <span class=\"k\">+</span> <span class=\"s\">'='</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">[</span>alias<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"var \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>substring<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\";\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Merge children</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>isChild<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+=</span> <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>programs<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>isSimple<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"return buffer;\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>isChild <span class=\"k\">?</span> <span class=\"k\">[</span><span class=\"s\">\"depth0\"</span><span class=\"k\">,</span> <span class=\"s\">\"data\"</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"Handlebars\"</span><span class=\"k\">,</span> <span class=\"s\">\"depth0\"</span><span class=\"k\">,</span> <span class=\"s\">\"helpers\"</span><span class=\"k\">,</span> <span class=\"s\">\"partials\"</span><span class=\"k\">,</span> <span class=\"s\">\"data\"</span><span class=\"k\">];</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l<span class=\"k\">=</span><span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>depths<span class=\"k\">.</span>list<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        params<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"depth\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>depths<span class=\"k\">.</span>list<span class=\"k\">[</span>i<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Perform a second pass over the output to merge content when possible</span>","      <span class=\"k\">var</span> source <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>mergeSource<span class=\"k\">();</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>isChild<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> revision <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>COMPILER_REVISION<span class=\"k\">,</span>","            versions <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>REVISION_CHANGES<span class=\"k\">[</span>revision<span class=\"k\">];</span>","        source <span class=\"k\">=</span> <span class=\"s\">\"this.compilerInfo = [\"</span><span class=\"k\">+</span>revision<span class=\"k\">+</span><span class=\"s\">\",'\"</span><span class=\"k\">+</span>versions<span class=\"k\">+</span><span class=\"s\">\"'];</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">+</span>source<span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>asObject<span class=\"k\">)</span> <span class=\"k\">{</span>","        params<span class=\"k\">.</span>push<span class=\"k\">(</span>source<span class=\"k\">);</span>","","        <span class=\"k\">return</span> Function<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> params<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> functionSource <span class=\"k\">=</span> <span class=\"s\">'function '</span> <span class=\"k\">+</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'('</span> <span class=\"k\">+</span> params<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">','</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">') {</span><span class=\"t\">\\n</span><span class=\"s\">  '</span> <span class=\"k\">+</span> source <span class=\"k\">+</span> <span class=\"s\">'}'</span><span class=\"k\">;</span>","        Handlebars<span class=\"k\">.</span>log<span class=\"k\">(</span>Handlebars<span class=\"k\">.</span>logger<span class=\"k\">.</span>DEBUG<span class=\"k\">,</span> functionSource <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\n\\n</span><span class=\"s\">\"</span><span class=\"k\">);</span>","        <span class=\"k\">return</span> functionSource<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    mergeSource<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"c\">// WARN: We are not handling the case where buffer is still populated as the source should</span>","      <span class=\"c\">// not have buffer append operations as their final action.</span>","      <span class=\"k\">var</span> source <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">,</span>","          buffer<span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> line <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>line<span class=\"k\">.</span>appendToBuffer<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>buffer<span class=\"k\">)</span> <span class=\"k\">{</span>","            buffer <span class=\"k\">=</span> buffer <span class=\"k\">+</span> <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">    + '</span> <span class=\"k\">+</span> line<span class=\"k\">.</span>content<span class=\"k\">;</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            buffer <span class=\"k\">=</span> line<span class=\"k\">.</span>content<span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>buffer<span class=\"k\">)</span> <span class=\"k\">{</span>","            source <span class=\"k\">+=</span> <span class=\"s\">'buffer += '</span> <span class=\"k\">+</span> buffer <span class=\"k\">+</span> <span class=\"s\">';</span><span class=\"t\">\\n</span><span class=\"s\">  '</span><span class=\"k\">;</span>","            buffer <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","          <span class=\"k\">}</span>","          source <span class=\"k\">+=</span> line <span class=\"k\">+</span> <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">  '</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> source<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [blockValue]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: hash, inverse, program, value</span>","    <span class=\"c\">// On stack, after: return value of blockHelperMissing</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// The purpose of this opcode is to take a block of the form</span>","    <span class=\"c\">// `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and</span>","    <span class=\"c\">// replace it on the stack with the result of properly</span>","    <span class=\"c\">// invoking blockHelperMissing.</span>","    blockValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>blockHelperMissing <span class=\"k\">=</span> <span class=\"s\">'helpers.blockHelperMissing'</span><span class=\"k\">;</span>","","      <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"depth0\"</span><span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>setupParams<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> params<span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>replaceStack<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","        params<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> current<span class=\"k\">);</span>","        <span class=\"k\">return</span> <span class=\"s\">\"blockHelperMissing.call(\"</span> <span class=\"k\">+</span> params<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [ambiguousBlockValue]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: hash, inverse, program, value</span>","    <span class=\"c\">// Compiler value, before: lastHelper=value of last found helper, if any</span>","    <span class=\"c\">// On stack, after, if no lastHelper: same as [blockValue]</span>","    <span class=\"c\">// On stack, after, if lastHelper: value</span>","    ambiguousBlockValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>blockHelperMissing <span class=\"k\">=</span> <span class=\"s\">'helpers.blockHelperMissing'</span><span class=\"k\">;</span>","","      <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"depth0\"</span><span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>setupParams<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> params<span class=\"k\">);</span>","","      <span class=\"k\">var</span> current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>topStack<span class=\"k\">();</span>","      params<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> current<span class=\"k\">);</span>","","      <span class=\"c\">// Use the options value generated from the invocation</span>","      params<span class=\"k\">[</span>params<span class=\"k\">.</span>length<span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">'options'</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"if (!\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>lastHelper <span class=\"k\">+</span> <span class=\"s\">\") { \"</span> <span class=\"k\">+</span> current <span class=\"k\">+</span> <span class=\"s\">\" = blockHelperMissing.call(\"</span> <span class=\"k\">+</span> params<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"); }\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [appendContent]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Appends the string value of `content` to the current buffer</span>","    appendContent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>content<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>appendToBuffer<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>quotedString<span class=\"k\">(</span>content<span class=\"k\">)));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [append]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: value, ...</span>","    <span class=\"c\">// On stack, after: ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Coerces `value` to a String and appends it to the current buffer.</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// If `value` is truthy, or 0, it is coerced into a string and appended</span>","    <span class=\"c\">// Otherwise, the empty string is appended</span>","    append<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"c\">// Force anything that is inlined onto the stack so we don't have duplication</span>","      <span class=\"c\">// when we examine local</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>flushInline<span class=\"k\">();</span>","      <span class=\"k\">var</span> local <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">();</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"if(\"</span> <span class=\"k\">+</span> local <span class=\"k\">+</span> <span class=\"s\">\" || \"</span> <span class=\"k\">+</span> local <span class=\"k\">+</span> <span class=\"s\">\" === 0) { \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>appendToBuffer<span class=\"k\">(</span>local<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" }\"</span><span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>isSimple<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"else { \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>appendToBuffer<span class=\"k\">(</span><span class=\"s\">\"''\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" }\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [appendEscaped]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: value, ...</span>","    <span class=\"c\">// On stack, after: ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Escape `value` and append it to the buffer</span>","    appendEscaped<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>escapeExpression <span class=\"k\">=</span> <span class=\"s\">'this.escapeExpression'</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>appendToBuffer<span class=\"k\">(</span><span class=\"s\">\"escapeExpression(\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [getContext]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: ...</span>","    <span class=\"c\">// Compiler value, after: lastContext=depth</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Set the value of the `lastContext` compiler value to the depth</span>","    getContext<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>depth<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>lastContext <span class=\"k\">!==</span> depth<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>lastContext <span class=\"k\">=</span> depth<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [lookupOnContext]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: currentContext[name], ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Looks up the value of `name` on the current context and pushes</span>","    <span class=\"c\">// it onto the stack.</span>","    lookupOnContext<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>nameLookup<span class=\"k\">(</span><span class=\"s\">'depth'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>lastContext<span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"s\">'context'</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [pushContext]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: currentContext, ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Pushes the value of the current context onto the stack.</span>","    pushContext<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span><span class=\"s\">'depth'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>lastContext<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [resolvePossibleLambda]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: value, ...</span>","    <span class=\"c\">// On stack, after: resolved value, ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// If the `value` is a lambda, replace it on the stack by</span>","    <span class=\"c\">// the return value of the lambda</span>","    resolvePossibleLambda<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>functionType <span class=\"k\">=</span> <span class=\"s\">'\"function\"'</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>replaceStack<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"typeof \"</span> <span class=\"k\">+</span> current <span class=\"k\">+</span> <span class=\"s\">\" === functionType ? \"</span> <span class=\"k\">+</span> current <span class=\"k\">+</span> <span class=\"s\">\".apply(depth0) : \"</span> <span class=\"k\">+</span> current<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [lookup]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: value, ...</span>","    <span class=\"c\">// On stack, after: value[name], ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Replace the value on the stack with the result of looking</span>","    <span class=\"c\">// up `name` on `value`</span>","    lookup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>replaceStack<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> current <span class=\"k\">+</span> <span class=\"s\">\" == null || \"</span> <span class=\"k\">+</span> current <span class=\"k\">+</span> <span class=\"s\">\" === false ? \"</span> <span class=\"k\">+</span> current <span class=\"k\">+</span> <span class=\"s\">\" : \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>nameLookup<span class=\"k\">(</span>current<span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"s\">'context'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [lookupData]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: data[id], ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Push the result of looking up `id` on the current data</span>","    lookupData<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>id<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>nameLookup<span class=\"k\">(</span><span class=\"s\">'data'</span><span class=\"k\">,</span> id<span class=\"k\">,</span> <span class=\"s\">'data'</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [pushStringParam]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: string, currentContext, ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// This opcode is designed for use in string mode, which</span>","    <span class=\"c\">// provides the string value of a parameter along with its</span>","    <span class=\"c\">// depth rather than resolving it immediately.</span>","    pushStringParam<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">,</span> type<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span><span class=\"s\">'depth'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>lastContext<span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>pushString<span class=\"k\">(</span>type<span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> string <span class=\"k\">===</span> <span class=\"s\">'string'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>pushString<span class=\"k\">(</span>string<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span>string<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    emptyHash<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span><span class=\"s\">'{}'</span><span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>stringParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>register<span class=\"k\">(</span><span class=\"s\">'hashTypes'</span><span class=\"k\">,</span> <span class=\"s\">'{}'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    pushHash<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>hash <span class=\"k\">=</span> <span class=\"k\">{</span>values<span class=\"k\">:</span> <span class=\"k\">[],</span> types<span class=\"k\">:</span> <span class=\"k\">[]</span><span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    popHash<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> hash <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hash<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>hash <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>stringParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>register<span class=\"k\">(</span><span class=\"s\">'hashTypes'</span><span class=\"k\">,</span> <span class=\"s\">'{'</span> <span class=\"k\">+</span> hash<span class=\"k\">.</span>types<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">','</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'}'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'{</span><span class=\"t\">\\n</span><span class=\"s\">    '</span> <span class=\"k\">+</span> hash<span class=\"k\">.</span>values<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">',</span><span class=\"t\">\\n</span><span class=\"s\">    '</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">  }'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [pushString]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: quotedString(string), ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Push a quoted version of `string` onto the stack</span>","    pushString<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>quotedString<span class=\"k\">(</span>string<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [push]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: expr, ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Push an expression onto the stack</span>","    push<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>expr<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>inlineStack<span class=\"k\">.</span>push<span class=\"k\">(</span>expr<span class=\"k\">);</span>","      <span class=\"k\">return</span> expr<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [pushLiteral]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: value, ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Pushes a value onto the stack. This operation prevents</span>","    <span class=\"c\">// the compiler from creating a temporary variable to hold</span>","    <span class=\"c\">// it.</span>","    pushLiteral<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span>value<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [pushProgram]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: ...</span>","    <span class=\"c\">// On stack, after: program(guid), ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Push a program expression onto the stack. This takes</span>","    <span class=\"c\">// a compile-time guid and converts it into a runtime-accessible</span>","    <span class=\"c\">// expression.</span>","    pushProgram<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>guid<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>guid <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>programExpression<span class=\"k\">(</span>guid<span class=\"k\">));</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [invokeHelper]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: hash, inverse, program, params..., ...</span>","    <span class=\"c\">// On stack, after: result of helper invocation</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Pops off the helper's parameters, invokes the helper,</span>","    <span class=\"c\">// and pushes the helper's return value onto the stack.</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// If the helper is not found, `helperMissing` is called.</span>","    invokeHelper<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramSize<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>helperMissing <span class=\"k\">=</span> <span class=\"s\">'helpers.helperMissing'</span><span class=\"k\">;</span>","","      <span class=\"k\">var</span> helper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lastHelper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>setupHelper<span class=\"k\">(</span>paramSize<span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span>helper<span class=\"k\">.</span>name<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>replaceStack<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> name <span class=\"k\">+</span> <span class=\"s\">' ? '</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">'.call('</span> <span class=\"k\">+</span>","            helper<span class=\"k\">.</span>callParams <span class=\"k\">+</span> <span class=\"s\">\") \"</span> <span class=\"k\">+</span> <span class=\"s\">\": helperMissing.call(\"</span> <span class=\"k\">+</span>","            helper<span class=\"k\">.</span>helperMissingParams <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [invokeKnownHelper]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: hash, inverse, program, params..., ...</span>","    <span class=\"c\">// On stack, after: result of helper invocation</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// This operation is used when the helper is known to exist,</span>","    <span class=\"c\">// so a `helperMissing` fallback is not required.</span>","    invokeKnownHelper<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramSize<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> helper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>setupHelper<span class=\"k\">(</span>paramSize<span class=\"k\">,</span> name<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span>helper<span class=\"k\">.</span>name <span class=\"k\">+</span> <span class=\"s\">\".call(\"</span> <span class=\"k\">+</span> helper<span class=\"k\">.</span>callParams <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [invokeAmbiguous]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: hash, inverse, program, params..., ...</span>","    <span class=\"c\">// On stack, after: result of disambiguation</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// This operation is used when an expression like `{{foo}}`</span>","    <span class=\"c\">// is provided, but we don't know at compile-time whether it</span>","    <span class=\"c\">// is a helper or a path.</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// This operation emits more code than the other options,</span>","    <span class=\"c\">// and can be avoided by passing the `knownHelpers` and</span>","    <span class=\"c\">// `knownHelpersOnly` flags at compile-time.</span>","    invokeAmbiguous<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> helperCall<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>functionType <span class=\"k\">=</span> <span class=\"s\">'\"function\"'</span><span class=\"k\">;</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>pushStackLiteral<span class=\"k\">(</span><span class=\"s\">'{}'</span><span class=\"k\">);</span>    <span class=\"c\">// Hash value</span>","      <span class=\"k\">var</span> helper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>setupHelper<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> name<span class=\"k\">,</span> helperCall<span class=\"k\">);</span>","","      <span class=\"k\">var</span> helperName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>lastHelper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>nameLookup<span class=\"k\">(</span><span class=\"s\">'helpers'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"s\">'helper'</span><span class=\"k\">);</span>","","      <span class=\"k\">var</span> nonHelper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>nameLookup<span class=\"k\">(</span><span class=\"s\">'depth'</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>lastContext<span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"s\">'context'</span><span class=\"k\">);</span>","      <span class=\"k\">var</span> nextStack <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>nextStack<span class=\"k\">();</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'if ('</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">' = '</span> <span class=\"k\">+</span> helperName <span class=\"k\">+</span> <span class=\"s\">') { '</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">' = '</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">'.call('</span> <span class=\"k\">+</span> helper<span class=\"k\">.</span>callParams <span class=\"k\">+</span> <span class=\"s\">'); }'</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'else { '</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">' = '</span> <span class=\"k\">+</span> nonHelper <span class=\"k\">+</span> <span class=\"s\">'; '</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">' = typeof '</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">' === functionType ? '</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">'.apply(depth0) : '</span> <span class=\"k\">+</span> nextStack <span class=\"k\">+</span> <span class=\"s\">'; }'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [invokePartial]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: context, ...</span>","    <span class=\"c\">// On stack after: result of partial invocation</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// This operation pops off a context, invokes a partial with that context,</span>","    <span class=\"c\">// and pushes the result of the invocation back.</span>","    invokePartial<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>nameLookup<span class=\"k\">(</span><span class=\"s\">'partials'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"s\">'partial'</span><span class=\"k\">),</span> <span class=\"s\">\"'\"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">(),</span> <span class=\"s\">\"helpers\"</span><span class=\"k\">,</span> <span class=\"s\">\"partials\"</span><span class=\"k\">];</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","        params<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"data\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>self <span class=\"k\">=</span> <span class=\"s\">\"this\"</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"self.invokePartial(\"</span> <span class=\"k\">+</span> params<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// [assignToHash]</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// On stack, before: value, hash, ...</span>","    <span class=\"c\">// On stack, after: hash, ...</span>","    <span class=\"c\">//</span>","    <span class=\"c\">// Pops a value and hash off the stack, assigns `hash[key] = value`</span>","    <span class=\"c\">// and pushes the hash back onto the stack.</span>","    assignToHash<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>key<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> value <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">(),</span>","          type<span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>stringParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        type <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">();</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">var</span> hash <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hash<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>type<span class=\"k\">)</span> <span class=\"k\">{</span>","        hash<span class=\"k\">.</span>types<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"'\"</span> <span class=\"k\">+</span> key <span class=\"k\">+</span> <span class=\"s\">\"': \"</span> <span class=\"k\">+</span> type<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      hash<span class=\"k\">.</span>values<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"'\"</span> <span class=\"k\">+</span> key <span class=\"k\">+</span> <span class=\"s\">\"': (\"</span> <span class=\"k\">+</span> value <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// HELPERS</span>","","    compiler<span class=\"k\">:</span> JavaScriptCompiler<span class=\"k\">,</span>","","    compileChildren<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>environment<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> children <span class=\"k\">=</span> environment<span class=\"k\">.</span>children<span class=\"k\">,</span> child<span class=\"k\">,</span> compiler<span class=\"k\">;</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l<span class=\"k\">=</span>children<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        child <span class=\"k\">=</span> children<span class=\"k\">[</span>i<span class=\"k\">];</span>","        compiler <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>compiler<span class=\"k\">();</span>","","        <span class=\"k\">var</span> index <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>matchExistingProgram<span class=\"k\">(</span>child<span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>index <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>programs<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">);</span>     <span class=\"c\">// Placeholder to prevent name conflicts for nested children</span>","          index <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>programs<span class=\"k\">.</span>length<span class=\"k\">;</span>","          child<span class=\"k\">.</span>index <span class=\"k\">=</span> index<span class=\"k\">;</span>","          child<span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"s\">'program'</span> <span class=\"k\">+</span> index<span class=\"k\">;</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>programs<span class=\"k\">[</span>index<span class=\"k\">]</span> <span class=\"k\">=</span> compiler<span class=\"k\">.</span>compile<span class=\"k\">(</span>child<span class=\"k\">,</span> options<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">);</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>environments<span class=\"k\">[</span>index<span class=\"k\">]</span> <span class=\"k\">=</span> child<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          child<span class=\"k\">.</span>index <span class=\"k\">=</span> index<span class=\"k\">;</span>","          child<span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"s\">'program'</span> <span class=\"k\">+</span> index<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    matchExistingProgram<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>child<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>environments<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> environment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>environments<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>environment <span class=\"k\">&amp;&amp;</span> environment<span class=\"k\">.</span>equals<span class=\"k\">(</span>child<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> i<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    programExpression<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>guid<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>self <span class=\"k\">=</span> <span class=\"s\">\"this\"</span><span class=\"k\">;</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>guid <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"self.noop\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">var</span> child <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>environment<span class=\"k\">.</span>children<span class=\"k\">[</span>guid<span class=\"k\">],</span>","          depths <span class=\"k\">=</span> child<span class=\"k\">.</span>depths<span class=\"k\">.</span>list<span class=\"k\">,</span> depth<span class=\"k\">;</span>","","      <span class=\"k\">var</span> programParams <span class=\"k\">=</span> <span class=\"k\">[</span>child<span class=\"k\">.</span>index<span class=\"k\">,</span> child<span class=\"k\">.</span>name<span class=\"k\">,</span> <span class=\"s\">\"data\"</span><span class=\"k\">];</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> depths<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        depth <span class=\"k\">=</span> depths<span class=\"k\">[</span>i<span class=\"k\">];</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span>depth <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> programParams<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"depth0\"</span><span class=\"k\">);</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> programParams<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"depth\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>depth <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">));</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span>depths<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"s\">\"self.program(\"</span> <span class=\"k\">+</span> programParams<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        programParams<span class=\"k\">.</span>shift<span class=\"k\">();</span>","        <span class=\"k\">return</span> <span class=\"s\">\"self.programWithDepth(\"</span> <span class=\"k\">+</span> programParams<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    register<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> val<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>useRegister<span class=\"k\">(</span>name<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span>name <span class=\"k\">+</span> <span class=\"s\">\" = \"</span> <span class=\"k\">+</span> val <span class=\"k\">+</span> <span class=\"s\">\";\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    useRegister<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>registers<span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>registers<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>registers<span class=\"k\">.</span>list<span class=\"k\">.</span>push<span class=\"k\">(</span>name<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    pushStackLiteral<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>item<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">new</span> Literal<span class=\"k\">(</span>item<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    pushStack<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>item<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>flushInline<span class=\"k\">();</span>","","      <span class=\"k\">var</span> stack <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>incrStack<span class=\"k\">();</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>item<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span>stack <span class=\"k\">+</span> <span class=\"s\">\" = \"</span> <span class=\"k\">+</span> item <span class=\"k\">+</span> <span class=\"s\">\";\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>compileStack<span class=\"k\">.</span>push<span class=\"k\">(</span>stack<span class=\"k\">);</span>","      <span class=\"k\">return</span> stack<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    replaceStack<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> prefix <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">,</span>","          inline <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>isInline<span class=\"k\">(),</span>","          stack<span class=\"k\">;</span>","","      <span class=\"c\">// If we are currently inline then we want to merge the inline statement into the</span>","      <span class=\"c\">// replacement statement via ','</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>inline<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> top <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>top <span class=\"k\">instanceof</span> Literal<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// Literals do not need to be inlined</span>","          stack <span class=\"k\">=</span> top<span class=\"k\">.</span>value<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"c\">// Get or create the current stack name for use by the inline</span>","          <span class=\"k\">var</span> name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>stackSlot <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>topStackName<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>incrStack<span class=\"k\">();</span>","","          prefix <span class=\"k\">=</span> <span class=\"s\">'('</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">' = '</span> <span class=\"k\">+</span> top <span class=\"k\">+</span> <span class=\"s\">'),'</span><span class=\"k\">;</span>","          stack <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>topStack<span class=\"k\">();</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        stack <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>topStack<span class=\"k\">();</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">var</span> item <span class=\"k\">=</span> callback<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> stack<span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>inline<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>inlineStack<span class=\"k\">.</span>length <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>compileStack<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'('</span> <span class=\"k\">+</span> prefix <span class=\"k\">+</span> item <span class=\"k\">+</span> <span class=\"s\">')'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"c\">// Prevent modification of the context depth variable. Through replaceStack</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"s\">/^stack/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>stack<span class=\"k\">))</span> <span class=\"k\">{</span>","          stack <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>nextStack<span class=\"k\">();</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>source<span class=\"k\">.</span>push<span class=\"k\">(</span>stack <span class=\"k\">+</span> <span class=\"s\">\" = (\"</span> <span class=\"k\">+</span> prefix <span class=\"k\">+</span> item <span class=\"k\">+</span> <span class=\"s\">\");\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> stack<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    nextStack<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>pushStack<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    incrStack<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>stackSlot<span class=\"k\">++;</span>","      <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>stackSlot <span class=\"k\">&gt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>stackVars<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>stackVars<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"stack\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>stackSlot<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>topStackName<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    topStackName<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"s\">\"stack\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>stackSlot<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    flushInline<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> inlineStack <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>inlineStack<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>inlineStack<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>inlineStack <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> inlineStack<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> entry <span class=\"k\">=</span> inlineStack<span class=\"k\">[</span>i<span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>entry <span class=\"k\">instanceof</span> Literal<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>compileStack<span class=\"k\">.</span>push<span class=\"k\">(</span>entry<span class=\"k\">);</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>pushStack<span class=\"k\">(</span>entry<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","    isInline<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>inlineStack<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    popStack<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>wrapped<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> inline <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>isInline<span class=\"k\">(),</span>","          item <span class=\"k\">=</span> <span class=\"k\">(</span>inline <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>inlineStack <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>compileStack<span class=\"k\">).</span>pop<span class=\"k\">();</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>wrapped <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>item <span class=\"k\">instanceof</span> Literal<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> item<span class=\"k\">.</span>value<span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>inline<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>stackSlot<span class=\"k\">--;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> item<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    topStack<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>wrapped<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> stack <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>isInline<span class=\"k\">()</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>inlineStack <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>compileStack<span class=\"k\">),</span>","          item <span class=\"k\">=</span> stack<span class=\"k\">[</span>stack<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>wrapped <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>item <span class=\"k\">instanceof</span> Literal<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> item<span class=\"k\">.</span>value<span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> item<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    quotedString<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>str<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"s\">'\"'</span> <span class=\"k\">+</span> str","        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\\\/g</span><span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\\\\\</span><span class=\"s\">'</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\"/g</span><span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">\"'</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\n/g</span><span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">n'</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\r/g</span><span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">r'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'\"'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    setupHelper<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramSize<span class=\"k\">,</span> name<span class=\"k\">,</span> missingParams<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>setupParams<span class=\"k\">(</span>paramSize<span class=\"k\">,</span> params<span class=\"k\">,</span> missingParams<span class=\"k\">);</span>","      <span class=\"k\">var</span> foundHelper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>nameLookup<span class=\"k\">(</span><span class=\"s\">'helpers'</span><span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"s\">'helper'</span><span class=\"k\">);</span>","","      <span class=\"k\">return</span> <span class=\"k\">{</span>","        params<span class=\"k\">:</span> params<span class=\"k\">,</span>","        name<span class=\"k\">:</span> foundHelper<span class=\"k\">,</span>","        callParams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"depth0\"</span><span class=\"k\">].</span>concat<span class=\"k\">(</span>params<span class=\"k\">).</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">),</span>","        helperMissingParams<span class=\"k\">:</span> missingParams <span class=\"k\">&amp;&amp;</span> <span class=\"k\">[</span><span class=\"s\">\"depth0\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>quotedString<span class=\"k\">(</span>name<span class=\"k\">)].</span>concat<span class=\"k\">(</span>params<span class=\"k\">).</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">// the params and contexts arguments are passed in arrays</span>","    <span class=\"c\">// to fill in</span>","    setupParams<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>paramSize<span class=\"k\">,</span> params<span class=\"k\">,</span> useRegister<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">[],</span> contexts <span class=\"k\">=</span> <span class=\"k\">[],</span> types <span class=\"k\">=</span> <span class=\"k\">[],</span> param<span class=\"k\">,</span> inverse<span class=\"k\">,</span> program<span class=\"k\">;</span>","","      options<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"hash:\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">());</span>","","      inverse <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">();</span>","      program <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">();</span>","","      <span class=\"c\">// Avoid setting fn and inverse if neither are set. This allows</span>","      <span class=\"c\">// helpers to do a check for `if (options.fn)`</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>program <span class=\"k\">||</span> inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>program<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>self <span class=\"k\">=</span> <span class=\"s\">\"this\"</span><span class=\"k\">;</span>","          program <span class=\"k\">=</span> <span class=\"s\">\"self.noop\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(!</span>inverse<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">this</span><span class=\"k\">.</span>context<span class=\"k\">.</span>aliases<span class=\"k\">.</span>self <span class=\"k\">=</span> <span class=\"s\">\"this\"</span><span class=\"k\">;</span>","          inverse <span class=\"k\">=</span> <span class=\"s\">\"self.noop\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        options<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"inverse:\"</span> <span class=\"k\">+</span> inverse<span class=\"k\">);</span>","        options<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"fn:\"</span> <span class=\"k\">+</span> program<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">&lt;</span>paramSize<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        param <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">();</span>","        params<span class=\"k\">.</span>push<span class=\"k\">(</span>param<span class=\"k\">);</span>","","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>stringParams<span class=\"k\">)</span> <span class=\"k\">{</span>","          types<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">());</span>","          contexts<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>popStack<span class=\"k\">());</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>stringParams<span class=\"k\">)</span> <span class=\"k\">{</span>","        options<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"contexts:[\"</span> <span class=\"k\">+</span> contexts<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\",\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"]\"</span><span class=\"k\">);</span>","        options<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"types:[\"</span> <span class=\"k\">+</span> types<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\",\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"]\"</span><span class=\"k\">);</span>","        options<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"hashTypes:hashTypes\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","        options<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">\"data:data\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      options <span class=\"k\">=</span> <span class=\"s\">\"{\"</span> <span class=\"k\">+</span> options<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\",\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"}\"</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>useRegister<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>register<span class=\"k\">(</span><span class=\"s\">'options'</span><span class=\"k\">,</span> options<span class=\"k\">);</span>","        params<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"s\">'options'</span><span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        params<span class=\"k\">.</span>push<span class=\"k\">(</span>options<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> params<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> reservedWords <span class=\"k\">=</span> <span class=\"k\">(</span>","    <span class=\"s\">\"break else new var\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" case finally return void\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" catch for switch while\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" continue function this with\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" default if throw\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" delete in try\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" do instanceof typeof\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" abstract enum int short\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" boolean export interface static\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" byte extends long super\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" char final native synchronized\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" class float package throws\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" const goto private transient\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" debugger implements protected volatile\"</span> <span class=\"k\">+</span>","    <span class=\"s\">\" double import public let yield\"</span>","  <span class=\"k\">).</span>split<span class=\"k\">(</span><span class=\"s\">\" \"</span><span class=\"k\">);</span>","","  <span class=\"k\">var</span> compilerWords <span class=\"k\">=</span> JavaScriptCompiler<span class=\"k\">.</span>RESERVED_WORDS <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","  <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">,</span> l<span class=\"k\">=</span>reservedWords<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","    compilerWords<span class=\"k\">[</span>reservedWords<span class=\"k\">[</span>i<span class=\"k\">]]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  JavaScriptCompiler<span class=\"k\">.</span>isValidJavaScriptVariableName <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span><span class=\"k\">(!</span>JavaScriptCompiler<span class=\"k\">.</span>RESERVED_WORDS<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">/^[a-zA-Z_$][0-9a-zA-Z_$]+$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">)(</span>Handlebars<span class=\"k\">.</span>Compiler<span class=\"k\">,</span> Handlebars<span class=\"k\">.</span>JavaScriptCompiler<span class=\"k\">);</span>","","Handlebars<span class=\"k\">.</span>precompile <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>input<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>input <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> input <span class=\"k\">!==</span> <span class=\"s\">'string'</span> <span class=\"k\">&amp;&amp;</span> input<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>ProgramNode<span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Exception<span class=\"k\">(</span><span class=\"s\">\"You must pass a string or Handlebars AST to Handlebars.compile. You passed \"</span> <span class=\"k\">+</span> input<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!(</span><span class=\"s\">'data'</span> <span class=\"k\">in</span> options<span class=\"k\">))</span> <span class=\"k\">{</span>","    options<span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">var</span> ast <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>parse<span class=\"k\">(</span>input<span class=\"k\">);</span>","  <span class=\"k\">var</span> environment <span class=\"k\">=</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Compiler<span class=\"k\">().</span>compile<span class=\"k\">(</span>ast<span class=\"k\">,</span> options<span class=\"k\">);</span>","  <span class=\"k\">return</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>JavaScriptCompiler<span class=\"k\">().</span>compile<span class=\"k\">(</span>environment<span class=\"k\">,</span> options<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>compile <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>input<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>input <span class=\"k\">||</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> input <span class=\"k\">!==</span> <span class=\"s\">'string'</span> <span class=\"k\">&amp;&amp;</span> input<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> Handlebars<span class=\"k\">.</span>AST<span class=\"k\">.</span>ProgramNode<span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Exception<span class=\"k\">(</span><span class=\"s\">\"You must pass a string or Handlebars AST to Handlebars.compile. You passed \"</span> <span class=\"k\">+</span> input<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!(</span><span class=\"s\">'data'</span> <span class=\"k\">in</span> options<span class=\"k\">))</span> <span class=\"k\">{</span>","    options<span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">var</span> compiled<span class=\"k\">;</span>","  <span class=\"k\">function</span> compile<span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> ast <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>parse<span class=\"k\">(</span>input<span class=\"k\">);</span>","    <span class=\"k\">var</span> environment <span class=\"k\">=</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Compiler<span class=\"k\">().</span>compile<span class=\"k\">(</span>ast<span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">var</span> templateSpec <span class=\"k\">=</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>JavaScriptCompiler<span class=\"k\">().</span>compile<span class=\"k\">(</span>environment<span class=\"k\">,</span> options<span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> Handlebars<span class=\"k\">.</span>template<span class=\"k\">(</span>templateSpec<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// Template is only compiled on first use and cached after that point.</span>","  <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>compiled<span class=\"k\">)</span> <span class=\"k\">{</span>","      compiled <span class=\"k\">=</span> compile<span class=\"k\">();</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> compiled<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> context<span class=\"k\">,</span> options<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">;</span>","<span class=\"c\">// lib/handlebars/runtime.js</span>","Handlebars<span class=\"k\">.</span>VM <span class=\"k\">=</span> <span class=\"k\">{</span>","  template<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>templateSpec<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// Just add water</span>","    <span class=\"k\">var</span> container <span class=\"k\">=</span> <span class=\"k\">{</span>","      escapeExpression<span class=\"k\">:</span> Handlebars<span class=\"k\">.</span>Utils<span class=\"k\">.</span>escapeExpression<span class=\"k\">,</span>","      invokePartial<span class=\"k\">:</span> Handlebars<span class=\"k\">.</span>VM<span class=\"k\">.</span>invokePartial<span class=\"k\">,</span>","      programs<span class=\"k\">:</span> <span class=\"k\">[],</span>","      program<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>i<span class=\"k\">,</span> fn<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> programWrapper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>programs<span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> Handlebars<span class=\"k\">.</span>VM<span class=\"k\">.</span>program<span class=\"k\">(</span>fn<span class=\"k\">,</span> data<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>programWrapper<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">return</span> programWrapper<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          programWrapper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>programs<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>VM<span class=\"k\">.</span>program<span class=\"k\">(</span>fn<span class=\"k\">);</span>","          <span class=\"k\">return</span> programWrapper<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      programWithDepth<span class=\"k\">:</span> Handlebars<span class=\"k\">.</span>VM<span class=\"k\">.</span>programWithDepth<span class=\"k\">,</span>","      noop<span class=\"k\">:</span> Handlebars<span class=\"k\">.</span>VM<span class=\"k\">.</span>noop<span class=\"k\">,</span>","      compilerInfo<span class=\"k\">:</span> <span class=\"k\">null</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> templateSpec<span class=\"k\">.</span>call<span class=\"k\">(</span>container<span class=\"k\">,</span> Handlebars<span class=\"k\">,</span> context<span class=\"k\">,</span> options<span class=\"k\">.</span>helpers<span class=\"k\">,</span> options<span class=\"k\">.</span>partials<span class=\"k\">,</span> options<span class=\"k\">.</span>data<span class=\"k\">);</span>","","      <span class=\"k\">var</span> compilerInfo <span class=\"k\">=</span> container<span class=\"k\">.</span>compilerInfo <span class=\"k\">||</span> <span class=\"k\">[],</span>","          compilerRevision <span class=\"k\">=</span> compilerInfo<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">,</span>","          currentRevision <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>COMPILER_REVISION<span class=\"k\">;</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>compilerRevision <span class=\"k\">!==</span> currentRevision<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>compilerRevision <span class=\"k\">&lt;</span> currentRevision<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">var</span> runtimeVersions <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>REVISION_CHANGES<span class=\"k\">[</span>currentRevision<span class=\"k\">],</span>","              compilerVersions <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>REVISION_CHANGES<span class=\"k\">[</span>compilerRevision<span class=\"k\">];</span>","          <span class=\"k\">throw</span> <span class=\"s\">\"Template was precompiled with an older version of Handlebars than the current runtime. \"</span><span class=\"k\">+</span>","                <span class=\"s\">\"Please update your precompiler to a newer version (\"</span><span class=\"k\">+</span>runtimeVersions<span class=\"k\">+</span><span class=\"s\">\") or downgrade your runtime to an older version (\"</span><span class=\"k\">+</span>compilerVersions<span class=\"k\">+</span><span class=\"s\">\").\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          <span class=\"c\">// Use the embedded version info since the runtime doesn't know about this revision yet</span>","          <span class=\"k\">throw</span> <span class=\"s\">\"Template was precompiled with a newer version of Handlebars than the current runtime. \"</span><span class=\"k\">+</span>","                <span class=\"s\">\"Please update your runtime to a newer version (\"</span><span class=\"k\">+</span>compilerInfo<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]+</span><span class=\"s\">\").\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  programWithDepth<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>fn<span class=\"k\">,</span> data<span class=\"k\">,</span> $depth<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> args <span class=\"k\">=</span> Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","      <span class=\"k\">return</span> fn<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">[</span>context<span class=\"k\">,</span> options<span class=\"k\">.</span>data <span class=\"k\">||</span> data<span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  program<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>fn<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      options <span class=\"k\">=</span> options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","      <span class=\"k\">return</span> fn<span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">.</span>data <span class=\"k\">||</span> data<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  noop<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">,</span>","  invokePartial<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>partial<span class=\"k\">,</span> name<span class=\"k\">,</span> context<span class=\"k\">,</span> helpers<span class=\"k\">,</span> partials<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">{</span> helpers<span class=\"k\">:</span> helpers<span class=\"k\">,</span> partials<span class=\"k\">:</span> partials<span class=\"k\">,</span> data<span class=\"k\">:</span> data <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span><span class=\"k\">(</span>partial <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">throw</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Exception<span class=\"k\">(</span><span class=\"s\">\"The partial \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" could not be found\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>partial <span class=\"k\">instanceof</span> Function<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> partial<span class=\"k\">(</span>context<span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>Handlebars<span class=\"k\">.</span>compile<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">throw</span> <span class=\"k\">new</span> Handlebars<span class=\"k\">.</span>Exception<span class=\"k\">(</span><span class=\"s\">\"The partial \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" could not be compiled when running in runtime-only mode\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","      partials<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>compile<span class=\"k\">(</span>partial<span class=\"k\">,</span> <span class=\"k\">{</span>data<span class=\"k\">:</span> data <span class=\"k\">!==</span> undefined<span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> partials<span class=\"k\">[</span>name<span class=\"k\">](</span>context<span class=\"k\">,</span> options<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Handlebars<span class=\"k\">.</span>template <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>VM<span class=\"k\">.</span>template<span class=\"k\">;</span>","<span class=\"k\">;</span>"];
_$jscoverage['handlebars/handlebars.js'][28]++;
this.Handlebars = {};
_$jscoverage['handlebars/handlebars.js'][30]++;
(function (Handlebars) {
  _$jscoverage['handlebars/handlebars.js'][32]++;
  Handlebars.VERSION = "1.0.0-rc.3";
  _$jscoverage['handlebars/handlebars.js'][33]++;
  Handlebars.COMPILER_REVISION = 2;
  _$jscoverage['handlebars/handlebars.js'][35]++;
  Handlebars.REVISION_CHANGES = {1: "<= 1.0.rc.2", 2: ">= 1.0.0-rc.3"};
  _$jscoverage['handlebars/handlebars.js'][40]++;
  Handlebars.helpers = {};
  _$jscoverage['handlebars/handlebars.js'][41]++;
  Handlebars.partials = {};
  _$jscoverage['handlebars/handlebars.js'][43]++;
  Handlebars.registerHelper = (function (name, fn, inverse) {
  _$jscoverage['handlebars/handlebars.js'][44]++;
  if (inverse) {
    _$jscoverage['handlebars/handlebars.js'][44]++;
    fn.not = inverse;
  }
  _$jscoverage['handlebars/handlebars.js'][45]++;
  this.helpers[name] = fn;
});
  _$jscoverage['handlebars/handlebars.js'][48]++;
  Handlebars.registerPartial = (function (name, str) {
  _$jscoverage['handlebars/handlebars.js'][49]++;
  this.partials[name] = str;
});
  _$jscoverage['handlebars/handlebars.js'][52]++;
  Handlebars.registerHelper("helperMissing", (function (arg) {
  _$jscoverage['handlebars/handlebars.js'][53]++;
  if ((arguments.length === 2)) {
    _$jscoverage['handlebars/handlebars.js'][54]++;
    return undefined;
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][56]++;
    throw new Error(("Could not find property '" + arg + "'"));
  }
}));
  _$jscoverage['handlebars/handlebars.js'][60]++;
  var toString = Object.prototype.toString, functionType = "[object Function]";
  _$jscoverage['handlebars/handlebars.js'][62]++;
  Handlebars.registerHelper("blockHelperMissing", (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][63]++;
  var inverse = (options.inverse || (function () {
})), fn = options.fn;
  _$jscoverage['handlebars/handlebars.js'][66]++;
  var ret = "";
  _$jscoverage['handlebars/handlebars.js'][67]++;
  var type = toString.call(context);
  _$jscoverage['handlebars/handlebars.js'][69]++;
  if ((type === functionType)) {
    _$jscoverage['handlebars/handlebars.js'][69]++;
    context = context.call(this);
  }
  _$jscoverage['handlebars/handlebars.js'][71]++;
  if ((context === true)) {
    _$jscoverage['handlebars/handlebars.js'][72]++;
    return fn(this);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][73]++;
    if (((context === false) || (context == null))) {
      _$jscoverage['handlebars/handlebars.js'][74]++;
      return inverse(this);
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][75]++;
      if ((type === "[object Array]")) {
        _$jscoverage['handlebars/handlebars.js'][76]++;
        if ((context.length > 0)) {
          _$jscoverage['handlebars/handlebars.js'][77]++;
          return Handlebars.helpers.each(context, options);
        }
        else {
          _$jscoverage['handlebars/handlebars.js'][79]++;
          return inverse(this);
        }
      }
      else {
        _$jscoverage['handlebars/handlebars.js'][82]++;
        return fn(context);
      }
    }
  }
}));
  _$jscoverage['handlebars/handlebars.js'][86]++;
  Handlebars.K = (function () {
});
  _$jscoverage['handlebars/handlebars.js'][88]++;
  Handlebars.createFrame = (Object.create || (function (object) {
  _$jscoverage['handlebars/handlebars.js'][89]++;
  Handlebars.K.prototype = object;
  _$jscoverage['handlebars/handlebars.js'][90]++;
  var obj = new (Handlebars.K)();
  _$jscoverage['handlebars/handlebars.js'][91]++;
  Handlebars.K.prototype = null;
  _$jscoverage['handlebars/handlebars.js'][92]++;
  return obj;
}));
  _$jscoverage['handlebars/handlebars.js'][95]++;
  Handlebars.logger = {DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3, methodMap: {0: "debug", 1: "info", 2: "warn", 3: "error"}, log: (function (level, obj) {
  _$jscoverage['handlebars/handlebars.js'][102]++;
  if ((Handlebars.logger.level <= level)) {
    _$jscoverage['handlebars/handlebars.js'][103]++;
    var method = Handlebars.logger.methodMap[level];
    _$jscoverage['handlebars/handlebars.js'][104]++;
    if ((((typeof console) !== "undefined") && console[method])) {
      _$jscoverage['handlebars/handlebars.js'][105]++;
      console[method].call(console, obj);
    }
  }
})};
  _$jscoverage['handlebars/handlebars.js'][111]++;
  Handlebars.log = (function (level, obj) {
  _$jscoverage['handlebars/handlebars.js'][111]++;
  Handlebars.logger.log(level, obj);
});
  _$jscoverage['handlebars/handlebars.js'][113]++;
  Handlebars.registerHelper("each", (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][114]++;
  var fn = options.fn, inverse = options.inverse;
  _$jscoverage['handlebars/handlebars.js'][115]++;
  var i = 0, ret = "", data;
  _$jscoverage['handlebars/handlebars.js'][117]++;
  if (options.data) {
    _$jscoverage['handlebars/handlebars.js'][118]++;
    data = Handlebars.createFrame(options.data);
  }
  _$jscoverage['handlebars/handlebars.js'][121]++;
  if ((context && ((typeof context) === "object"))) {
    _$jscoverage['handlebars/handlebars.js'][122]++;
    if ((context instanceof Array)) {
      _$jscoverage['handlebars/handlebars.js'][123]++;
      for (var j = context.length; (i < j); (i++)) {
        _$jscoverage['handlebars/handlebars.js'][124]++;
        if (data) {
          _$jscoverage['handlebars/handlebars.js'][124]++;
          data.index = i;
        }
        _$jscoverage['handlebars/handlebars.js'][125]++;
        ret = (ret + fn(context[i], {data: data}));
}
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][128]++;
      for (var key in context) {
        _$jscoverage['handlebars/handlebars.js'][129]++;
        if (context.hasOwnProperty(key)) {
          _$jscoverage['handlebars/handlebars.js'][130]++;
          if (data) {
            _$jscoverage['handlebars/handlebars.js'][130]++;
            data.key = key;
          }
          _$jscoverage['handlebars/handlebars.js'][131]++;
          ret = (ret + fn(context[key], {data: data}));
          _$jscoverage['handlebars/handlebars.js'][132]++;
          (i++);
        }
}
    }
  }
  _$jscoverage['handlebars/handlebars.js'][138]++;
  if ((i === 0)) {
    _$jscoverage['handlebars/handlebars.js'][139]++;
    ret = inverse(this);
  }
  _$jscoverage['handlebars/handlebars.js'][142]++;
  return ret;
}));
  _$jscoverage['handlebars/handlebars.js'][145]++;
  Handlebars.registerHelper("if", (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][146]++;
  var type = toString.call(context);
  _$jscoverage['handlebars/handlebars.js'][147]++;
  if ((type === functionType)) {
    _$jscoverage['handlebars/handlebars.js'][147]++;
    context = context.call(this);
  }
  _$jscoverage['handlebars/handlebars.js'][149]++;
  if (((! context) || Handlebars.Utils.isEmpty(context))) {
    _$jscoverage['handlebars/handlebars.js'][150]++;
    return options.inverse(this);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][152]++;
    return options.fn(this);
  }
}));
  _$jscoverage['handlebars/handlebars.js'][156]++;
  Handlebars.registerHelper("unless", (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][157]++;
  var fn = options.fn, inverse = options.inverse;
  _$jscoverage['handlebars/handlebars.js'][158]++;
  options.fn = inverse;
  _$jscoverage['handlebars/handlebars.js'][159]++;
  options.inverse = fn;
  _$jscoverage['handlebars/handlebars.js'][161]++;
  return Handlebars.helpers["if"].call(this, context, options);
}));
  _$jscoverage['handlebars/handlebars.js'][164]++;
  Handlebars.registerHelper("with", (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][165]++;
  return options.fn(context);
}));
  _$jscoverage['handlebars/handlebars.js'][168]++;
  Handlebars.registerHelper("log", (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][169]++;
  var level = ((options.data && (options.data.level != null))? parseInt(options.data.level, 10): 1);
  _$jscoverage['handlebars/handlebars.js'][170]++;
  Handlebars.log(level, context);
}));
})(this.Handlebars);
_$jscoverage['handlebars/handlebars.js'][174]++;
;
_$jscoverage['handlebars/handlebars.js'][177]++;
var handlebars = (function () {
  _$jscoverage['handlebars/handlebars.js'][178]++;
  var parser = {trace: (function trace() {
}), yy: {}, symbols_: {"error": 2, "root": 3, "program": 4, "EOF": 5, "simpleInverse": 6, "statements": 7, "statement": 8, "openInverse": 9, "closeBlock": 10, "openBlock": 11, "mustache": 12, "partial": 13, "CONTENT": 14, "COMMENT": 15, "OPEN_BLOCK": 16, "inMustache": 17, "CLOSE": 18, "OPEN_INVERSE": 19, "OPEN_ENDBLOCK": 20, "path": 21, "OPEN": 22, "OPEN_UNESCAPED": 23, "OPEN_PARTIAL": 24, "partialName": 25, "params": 26, "hash": 27, "DATA": 28, "param": 29, "STRING": 30, "INTEGER": 31, "BOOLEAN": 32, "hashSegments": 33, "hashSegment": 34, "ID": 35, "EQUALS": 36, "PARTIAL_NAME": 37, "pathSegments": 38, "SEP": 39, "$accept": 0, "$end": 1}, terminals_: {2: "error", 5: "EOF", 14: "CONTENT", 15: "COMMENT", 16: "OPEN_BLOCK", 18: "CLOSE", 19: "OPEN_INVERSE", 20: "OPEN_ENDBLOCK", 22: "OPEN", 23: "OPEN_UNESCAPED", 24: "OPEN_PARTIAL", 28: "DATA", 30: "STRING", 31: "INTEGER", 32: "BOOLEAN", 35: "ID", 36: "EQUALS", 37: "PARTIAL_NAME", 39: "SEP"}, productions_: [0, [3, 2], [4, 2], [4, 3], [4, 2], [4, 1], [4, 1], [4, 0], [7, 1], [7, 2], [8, 3], [8, 3], [8, 1], [8, 1], [8, 1], [8, 1], [11, 3], [9, 3], [10, 3], [12, 3], [12, 3], [13, 3], [13, 4], [6, 2], [17, 3], [17, 2], [17, 2], [17, 1], [17, 1], [26, 2], [26, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [27, 1], [33, 2], [33, 1], [34, 3], [34, 3], [34, 3], [34, 3], [34, 3], [25, 1], [21, 1], [38, 3], [38, 1]], performAction: (function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
  _$jscoverage['handlebars/handlebars.js'][185]++;
  var $0 = ($$.length - 1);
  _$jscoverage['handlebars/handlebars.js'][186]++;
  switch (yystate) {
  case 1:
    _$jscoverage['handlebars/handlebars.js'][187]++;
    return $$[($0 - 1)];
    _$jscoverage['handlebars/handlebars.js'][188]++;
    break;
  case 2:
    _$jscoverage['handlebars/handlebars.js'][189]++;
    this.$ = new (yy.ProgramNode)([], $$[$0]);
    _$jscoverage['handlebars/handlebars.js'][190]++;
    break;
  case 3:
    _$jscoverage['handlebars/handlebars.js'][191]++;
    this.$ = new (yy.ProgramNode)($$[($0 - 2)], $$[$0]);
    _$jscoverage['handlebars/handlebars.js'][192]++;
    break;
  case 4:
    _$jscoverage['handlebars/handlebars.js'][193]++;
    this.$ = new (yy.ProgramNode)($$[($0 - 1)], []);
    _$jscoverage['handlebars/handlebars.js'][194]++;
    break;
  case 5:
    _$jscoverage['handlebars/handlebars.js'][195]++;
    this.$ = new (yy.ProgramNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][196]++;
    break;
  case 6:
    _$jscoverage['handlebars/handlebars.js'][197]++;
    this.$ = new (yy.ProgramNode)([], []);
    _$jscoverage['handlebars/handlebars.js'][198]++;
    break;
  case 7:
    _$jscoverage['handlebars/handlebars.js'][199]++;
    this.$ = new (yy.ProgramNode)([]);
    _$jscoverage['handlebars/handlebars.js'][200]++;
    break;
  case 8:
    _$jscoverage['handlebars/handlebars.js'][201]++;
    this.$ = [$$[$0]];
    _$jscoverage['handlebars/handlebars.js'][202]++;
    break;
  case 9:
    _$jscoverage['handlebars/handlebars.js'][203]++;
    $$[($0 - 1)].push($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][203]++;
    this.$ = $$[($0 - 1)];
    _$jscoverage['handlebars/handlebars.js'][204]++;
    break;
  case 10:
    _$jscoverage['handlebars/handlebars.js'][205]++;
    this.$ = new (yy.BlockNode)($$[($0 - 2)], $$[($0 - 1)].inverse, $$[($0 - 1)], $$[$0]);
    _$jscoverage['handlebars/handlebars.js'][206]++;
    break;
  case 11:
    _$jscoverage['handlebars/handlebars.js'][207]++;
    this.$ = new (yy.BlockNode)($$[($0 - 2)], $$[($0 - 1)], $$[($0 - 1)].inverse, $$[$0]);
    _$jscoverage['handlebars/handlebars.js'][208]++;
    break;
  case 12:
    _$jscoverage['handlebars/handlebars.js'][209]++;
    this.$ = $$[$0];
    _$jscoverage['handlebars/handlebars.js'][210]++;
    break;
  case 13:
    _$jscoverage['handlebars/handlebars.js'][211]++;
    this.$ = $$[$0];
    _$jscoverage['handlebars/handlebars.js'][212]++;
    break;
  case 14:
    _$jscoverage['handlebars/handlebars.js'][213]++;
    this.$ = new (yy.ContentNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][214]++;
    break;
  case 15:
    _$jscoverage['handlebars/handlebars.js'][215]++;
    this.$ = new (yy.CommentNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][216]++;
    break;
  case 16:
    _$jscoverage['handlebars/handlebars.js'][217]++;
    this.$ = new (yy.MustacheNode)($$[($0 - 1)][0], $$[($0 - 1)][1]);
    _$jscoverage['handlebars/handlebars.js'][218]++;
    break;
  case 17:
    _$jscoverage['handlebars/handlebars.js'][219]++;
    this.$ = new (yy.MustacheNode)($$[($0 - 1)][0], $$[($0 - 1)][1]);
    _$jscoverage['handlebars/handlebars.js'][220]++;
    break;
  case 18:
    _$jscoverage['handlebars/handlebars.js'][221]++;
    this.$ = $$[($0 - 1)];
    _$jscoverage['handlebars/handlebars.js'][222]++;
    break;
  case 19:
    _$jscoverage['handlebars/handlebars.js'][223]++;
    this.$ = new (yy.MustacheNode)($$[($0 - 1)][0], $$[($0 - 1)][1]);
    _$jscoverage['handlebars/handlebars.js'][224]++;
    break;
  case 20:
    _$jscoverage['handlebars/handlebars.js'][225]++;
    this.$ = new (yy.MustacheNode)($$[($0 - 1)][0], $$[($0 - 1)][1], true);
    _$jscoverage['handlebars/handlebars.js'][226]++;
    break;
  case 21:
    _$jscoverage['handlebars/handlebars.js'][227]++;
    this.$ = new (yy.PartialNode)($$[($0 - 1)]);
    _$jscoverage['handlebars/handlebars.js'][228]++;
    break;
  case 22:
    _$jscoverage['handlebars/handlebars.js'][229]++;
    this.$ = new (yy.PartialNode)($$[($0 - 2)], $$[($0 - 1)]);
    _$jscoverage['handlebars/handlebars.js'][230]++;
    break;
  case 23:
    _$jscoverage['handlebars/handlebars.js'][232]++;
    break;
  case 24:
    _$jscoverage['handlebars/handlebars.js'][233]++;
    this.$ = [[$$[($0 - 2)]].concat($$[($0 - 1)]), $$[$0]];
    _$jscoverage['handlebars/handlebars.js'][234]++;
    break;
  case 25:
    _$jscoverage['handlebars/handlebars.js'][235]++;
    this.$ = [[$$[($0 - 1)]].concat($$[$0]), null];
    _$jscoverage['handlebars/handlebars.js'][236]++;
    break;
  case 26:
    _$jscoverage['handlebars/handlebars.js'][237]++;
    this.$ = [[$$[($0 - 1)]], $$[$0]];
    _$jscoverage['handlebars/handlebars.js'][238]++;
    break;
  case 27:
    _$jscoverage['handlebars/handlebars.js'][239]++;
    this.$ = [[$$[$0]], null];
    _$jscoverage['handlebars/handlebars.js'][240]++;
    break;
  case 28:
    _$jscoverage['handlebars/handlebars.js'][241]++;
    this.$ = [[new (yy.DataNode)($$[$0])], null];
    _$jscoverage['handlebars/handlebars.js'][242]++;
    break;
  case 29:
    _$jscoverage['handlebars/handlebars.js'][243]++;
    $$[($0 - 1)].push($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][243]++;
    this.$ = $$[($0 - 1)];
    _$jscoverage['handlebars/handlebars.js'][244]++;
    break;
  case 30:
    _$jscoverage['handlebars/handlebars.js'][245]++;
    this.$ = [$$[$0]];
    _$jscoverage['handlebars/handlebars.js'][246]++;
    break;
  case 31:
    _$jscoverage['handlebars/handlebars.js'][247]++;
    this.$ = $$[$0];
    _$jscoverage['handlebars/handlebars.js'][248]++;
    break;
  case 32:
    _$jscoverage['handlebars/handlebars.js'][249]++;
    this.$ = new (yy.StringNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][250]++;
    break;
  case 33:
    _$jscoverage['handlebars/handlebars.js'][251]++;
    this.$ = new (yy.IntegerNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][252]++;
    break;
  case 34:
    _$jscoverage['handlebars/handlebars.js'][253]++;
    this.$ = new (yy.BooleanNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][254]++;
    break;
  case 35:
    _$jscoverage['handlebars/handlebars.js'][255]++;
    this.$ = new (yy.DataNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][256]++;
    break;
  case 36:
    _$jscoverage['handlebars/handlebars.js'][257]++;
    this.$ = new (yy.HashNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][258]++;
    break;
  case 37:
    _$jscoverage['handlebars/handlebars.js'][259]++;
    $$[($0 - 1)].push($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][259]++;
    this.$ = $$[($0 - 1)];
    _$jscoverage['handlebars/handlebars.js'][260]++;
    break;
  case 38:
    _$jscoverage['handlebars/handlebars.js'][261]++;
    this.$ = [$$[$0]];
    _$jscoverage['handlebars/handlebars.js'][262]++;
    break;
  case 39:
    _$jscoverage['handlebars/handlebars.js'][263]++;
    this.$ = [$$[($0 - 2)], $$[$0]];
    _$jscoverage['handlebars/handlebars.js'][264]++;
    break;
  case 40:
    _$jscoverage['handlebars/handlebars.js'][265]++;
    this.$ = [$$[($0 - 2)], new (yy.StringNode)($$[$0])];
    _$jscoverage['handlebars/handlebars.js'][266]++;
    break;
  case 41:
    _$jscoverage['handlebars/handlebars.js'][267]++;
    this.$ = [$$[($0 - 2)], new (yy.IntegerNode)($$[$0])];
    _$jscoverage['handlebars/handlebars.js'][268]++;
    break;
  case 42:
    _$jscoverage['handlebars/handlebars.js'][269]++;
    this.$ = [$$[($0 - 2)], new (yy.BooleanNode)($$[$0])];
    _$jscoverage['handlebars/handlebars.js'][270]++;
    break;
  case 43:
    _$jscoverage['handlebars/handlebars.js'][271]++;
    this.$ = [$$[($0 - 2)], new (yy.DataNode)($$[$0])];
    _$jscoverage['handlebars/handlebars.js'][272]++;
    break;
  case 44:
    _$jscoverage['handlebars/handlebars.js'][273]++;
    this.$ = new (yy.PartialNameNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][274]++;
    break;
  case 45:
    _$jscoverage['handlebars/handlebars.js'][275]++;
    this.$ = new (yy.IdNode)($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][276]++;
    break;
  case 46:
    _$jscoverage['handlebars/handlebars.js'][277]++;
    $$[($0 - 2)].push($$[$0]);
    _$jscoverage['handlebars/handlebars.js'][277]++;
    this.$ = $$[($0 - 2)];
    _$jscoverage['handlebars/handlebars.js'][278]++;
    break;
  case 47:
    _$jscoverage['handlebars/handlebars.js'][279]++;
    this.$ = [$$[$0]];
    _$jscoverage['handlebars/handlebars.js'][280]++;
    break;
  }
}), table: [{3: 1, 4: 2, 5: [2, 7], 6: 3, 7: 4, 8: 6, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 5], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {1: [3]}, {5: [1, 17]}, {5: [2, 6], 7: 18, 8: 6, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 19], 20: [2, 6], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {5: [2, 5], 6: 20, 8: 21, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 5], 20: [2, 5], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {17: 23, 18: [1, 22], 21: 24, 28: [1, 25], 35: [1, 27], 38: 26}, {5: [2, 8], 14: [2, 8], 15: [2, 8], 16: [2, 8], 19: [2, 8], 20: [2, 8], 22: [2, 8], 23: [2, 8], 24: [2, 8]}, {4: 28, 6: 3, 7: 4, 8: 6, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 5], 20: [2, 7], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {4: 29, 6: 3, 7: 4, 8: 6, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 5], 20: [2, 7], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {5: [2, 12], 14: [2, 12], 15: [2, 12], 16: [2, 12], 19: [2, 12], 20: [2, 12], 22: [2, 12], 23: [2, 12], 24: [2, 12]}, {5: [2, 13], 14: [2, 13], 15: [2, 13], 16: [2, 13], 19: [2, 13], 20: [2, 13], 22: [2, 13], 23: [2, 13], 24: [2, 13]}, {5: [2, 14], 14: [2, 14], 15: [2, 14], 16: [2, 14], 19: [2, 14], 20: [2, 14], 22: [2, 14], 23: [2, 14], 24: [2, 14]}, {5: [2, 15], 14: [2, 15], 15: [2, 15], 16: [2, 15], 19: [2, 15], 20: [2, 15], 22: [2, 15], 23: [2, 15], 24: [2, 15]}, {17: 30, 21: 24, 28: [1, 25], 35: [1, 27], 38: 26}, {17: 31, 21: 24, 28: [1, 25], 35: [1, 27], 38: 26}, {17: 32, 21: 24, 28: [1, 25], 35: [1, 27], 38: 26}, {25: 33, 37: [1, 34]}, {1: [2, 1]}, {5: [2, 2], 8: 21, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 19], 20: [2, 2], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {17: 23, 21: 24, 28: [1, 25], 35: [1, 27], 38: 26}, {5: [2, 4], 7: 35, 8: 6, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 19], 20: [2, 4], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {5: [2, 9], 14: [2, 9], 15: [2, 9], 16: [2, 9], 19: [2, 9], 20: [2, 9], 22: [2, 9], 23: [2, 9], 24: [2, 9]}, {5: [2, 23], 14: [2, 23], 15: [2, 23], 16: [2, 23], 19: [2, 23], 20: [2, 23], 22: [2, 23], 23: [2, 23], 24: [2, 23]}, {18: [1, 36]}, {18: [2, 27], 21: 41, 26: 37, 27: 38, 28: [1, 45], 29: 39, 30: [1, 42], 31: [1, 43], 32: [1, 44], 33: 40, 34: 46, 35: [1, 47], 38: 26}, {18: [2, 28]}, {18: [2, 45], 28: [2, 45], 30: [2, 45], 31: [2, 45], 32: [2, 45], 35: [2, 45], 39: [1, 48]}, {18: [2, 47], 28: [2, 47], 30: [2, 47], 31: [2, 47], 32: [2, 47], 35: [2, 47], 39: [2, 47]}, {10: 49, 20: [1, 50]}, {10: 51, 20: [1, 50]}, {18: [1, 52]}, {18: [1, 53]}, {18: [1, 54]}, {18: [1, 55], 21: 56, 35: [1, 27], 38: 26}, {18: [2, 44], 35: [2, 44]}, {5: [2, 3], 8: 21, 9: 7, 11: 8, 12: 9, 13: 10, 14: [1, 11], 15: [1, 12], 16: [1, 13], 19: [1, 19], 20: [2, 3], 22: [1, 14], 23: [1, 15], 24: [1, 16]}, {14: [2, 17], 15: [2, 17], 16: [2, 17], 19: [2, 17], 20: [2, 17], 22: [2, 17], 23: [2, 17], 24: [2, 17]}, {18: [2, 25], 21: 41, 27: 57, 28: [1, 45], 29: 58, 30: [1, 42], 31: [1, 43], 32: [1, 44], 33: 40, 34: 46, 35: [1, 47], 38: 26}, {18: [2, 26]}, {18: [2, 30], 28: [2, 30], 30: [2, 30], 31: [2, 30], 32: [2, 30], 35: [2, 30]}, {18: [2, 36], 34: 59, 35: [1, 60]}, {18: [2, 31], 28: [2, 31], 30: [2, 31], 31: [2, 31], 32: [2, 31], 35: [2, 31]}, {18: [2, 32], 28: [2, 32], 30: [2, 32], 31: [2, 32], 32: [2, 32], 35: [2, 32]}, {18: [2, 33], 28: [2, 33], 30: [2, 33], 31: [2, 33], 32: [2, 33], 35: [2, 33]}, {18: [2, 34], 28: [2, 34], 30: [2, 34], 31: [2, 34], 32: [2, 34], 35: [2, 34]}, {18: [2, 35], 28: [2, 35], 30: [2, 35], 31: [2, 35], 32: [2, 35], 35: [2, 35]}, {18: [2, 38], 35: [2, 38]}, {18: [2, 47], 28: [2, 47], 30: [2, 47], 31: [2, 47], 32: [2, 47], 35: [2, 47], 36: [1, 61], 39: [2, 47]}, {35: [1, 62]}, {5: [2, 10], 14: [2, 10], 15: [2, 10], 16: [2, 10], 19: [2, 10], 20: [2, 10], 22: [2, 10], 23: [2, 10], 24: [2, 10]}, {21: 63, 35: [1, 27], 38: 26}, {5: [2, 11], 14: [2, 11], 15: [2, 11], 16: [2, 11], 19: [2, 11], 20: [2, 11], 22: [2, 11], 23: [2, 11], 24: [2, 11]}, {14: [2, 16], 15: [2, 16], 16: [2, 16], 19: [2, 16], 20: [2, 16], 22: [2, 16], 23: [2, 16], 24: [2, 16]}, {5: [2, 19], 14: [2, 19], 15: [2, 19], 16: [2, 19], 19: [2, 19], 20: [2, 19], 22: [2, 19], 23: [2, 19], 24: [2, 19]}, {5: [2, 20], 14: [2, 20], 15: [2, 20], 16: [2, 20], 19: [2, 20], 20: [2, 20], 22: [2, 20], 23: [2, 20], 24: [2, 20]}, {5: [2, 21], 14: [2, 21], 15: [2, 21], 16: [2, 21], 19: [2, 21], 20: [2, 21], 22: [2, 21], 23: [2, 21], 24: [2, 21]}, {18: [1, 64]}, {18: [2, 24]}, {18: [2, 29], 28: [2, 29], 30: [2, 29], 31: [2, 29], 32: [2, 29], 35: [2, 29]}, {18: [2, 37], 35: [2, 37]}, {36: [1, 61]}, {21: 65, 28: [1, 69], 30: [1, 66], 31: [1, 67], 32: [1, 68], 35: [1, 27], 38: 26}, {18: [2, 46], 28: [2, 46], 30: [2, 46], 31: [2, 46], 32: [2, 46], 35: [2, 46], 39: [2, 46]}, {18: [1, 70]}, {5: [2, 22], 14: [2, 22], 15: [2, 22], 16: [2, 22], 19: [2, 22], 20: [2, 22], 22: [2, 22], 23: [2, 22], 24: [2, 22]}, {18: [2, 39], 35: [2, 39]}, {18: [2, 40], 35: [2, 40]}, {18: [2, 41], 35: [2, 41]}, {18: [2, 42], 35: [2, 42]}, {18: [2, 43], 35: [2, 43]}, {5: [2, 18], 14: [2, 18], 15: [2, 18], 16: [2, 18], 19: [2, 18], 20: [2, 18], 22: [2, 18], 23: [2, 18], 24: [2, 18]}], defaultActions: {17: [2, 1], 25: [2, 28], 38: [2, 26], 57: [2, 24]}, parseError: (function parseError(str, hash) {
  _$jscoverage['handlebars/handlebars.js'][286]++;
  throw new Error(str);
}), parse: (function parse(input) {
  _$jscoverage['handlebars/handlebars.js'][289]++;
  var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
  _$jscoverage['handlebars/handlebars.js'][290]++;
  this.lexer.setInput(input);
  _$jscoverage['handlebars/handlebars.js'][291]++;
  this.lexer.yy = this.yy;
  _$jscoverage['handlebars/handlebars.js'][292]++;
  this.yy.lexer = this.lexer;
  _$jscoverage['handlebars/handlebars.js'][293]++;
  this.yy.parser = this;
  _$jscoverage['handlebars/handlebars.js'][294]++;
  if (((typeof this.lexer.yylloc) == "undefined")) {
    _$jscoverage['handlebars/handlebars.js'][295]++;
    this.lexer.yylloc = {};
  }
  _$jscoverage['handlebars/handlebars.js'][296]++;
  var yyloc = this.lexer.yylloc;
  _$jscoverage['handlebars/handlebars.js'][297]++;
  lstack.push(yyloc);
  _$jscoverage['handlebars/handlebars.js'][298]++;
  var ranges = (this.lexer.options && this.lexer.options.ranges);
  _$jscoverage['handlebars/handlebars.js'][299]++;
  if (((typeof this.yy.parseError) === "function")) {
    _$jscoverage['handlebars/handlebars.js'][300]++;
    this.parseError = this.yy.parseError;
  }
  _$jscoverage['handlebars/handlebars.js'][301]++;
  function popStack(n) {
    _$jscoverage['handlebars/handlebars.js'][302]++;
    stack.length = (stack.length - (2 * n));
    _$jscoverage['handlebars/handlebars.js'][303]++;
    vstack.length = (vstack.length - n);
    _$jscoverage['handlebars/handlebars.js'][304]++;
    lstack.length = (lstack.length - n);
}
  _$jscoverage['handlebars/handlebars.js'][306]++;
  function lex() {
    _$jscoverage['handlebars/handlebars.js'][307]++;
    var token;
    _$jscoverage['handlebars/handlebars.js'][308]++;
    token = (self.lexer.lex() || 1);
    _$jscoverage['handlebars/handlebars.js'][309]++;
    if (((typeof token) !== "number")) {
      _$jscoverage['handlebars/handlebars.js'][310]++;
      token = (self.symbols_[token] || token);
    }
    _$jscoverage['handlebars/handlebars.js'][312]++;
    return token;
}
  _$jscoverage['handlebars/handlebars.js'][314]++;
  var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
  _$jscoverage['handlebars/handlebars.js'][315]++;
  while (true) {
    _$jscoverage['handlebars/handlebars.js'][316]++;
    state = stack[(stack.length - 1)];
    _$jscoverage['handlebars/handlebars.js'][317]++;
    if (this.defaultActions[state]) {
      _$jscoverage['handlebars/handlebars.js'][318]++;
      action = this.defaultActions[state];
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][320]++;
      if (((symbol === null) || ((typeof symbol) == "undefined"))) {
        _$jscoverage['handlebars/handlebars.js'][321]++;
        symbol = lex();
      }
      _$jscoverage['handlebars/handlebars.js'][323]++;
      action = (table[state] && table[state][symbol]);
    }
    _$jscoverage['handlebars/handlebars.js'][325]++;
    if ((((typeof action) === "undefined") || (! action.length) || (! action[0]))) {
      _$jscoverage['handlebars/handlebars.js'][326]++;
      var errStr = "";
      _$jscoverage['handlebars/handlebars.js'][327]++;
      if ((! recovering)) {
        _$jscoverage['handlebars/handlebars.js'][328]++;
        expected = [];
        _$jscoverage['handlebars/handlebars.js'][329]++;
        for (p in table[state]) {
          _$jscoverage['handlebars/handlebars.js'][330]++;
          if ((this.terminals_[p] && (p > 2))) {
            _$jscoverage['handlebars/handlebars.js'][331]++;
            expected.push(("'" + this.terminals_[p] + "'"));
          }
}
        _$jscoverage['handlebars/handlebars.js'][333]++;
        if (this.lexer.showPosition) {
          _$jscoverage['handlebars/handlebars.js'][334]++;
          errStr = ("Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'");
        }
        else {
          _$jscoverage['handlebars/handlebars.js'][336]++;
          errStr = ("Parse error on line " + (yylineno + 1) + ": Unexpected " + ((symbol == 1)? "end of input": ("'" + (this.terminals_[symbol] || symbol) + "'")));
        }
        _$jscoverage['handlebars/handlebars.js'][338]++;
        this.parseError(errStr, {text: this.lexer.match, token: (this.terminals_[symbol] || symbol), line: this.lexer.yylineno, loc: yyloc, expected: expected});
      }
    }
    _$jscoverage['handlebars/handlebars.js'][341]++;
    if (((action[0] instanceof Array) && (action.length > 1))) {
      _$jscoverage['handlebars/handlebars.js'][342]++;
      throw new Error(("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol));
    }
    _$jscoverage['handlebars/handlebars.js'][344]++;
    switch (action[0]) {
    case 1:
      _$jscoverage['handlebars/handlebars.js'][346]++;
      stack.push(symbol);
      _$jscoverage['handlebars/handlebars.js'][347]++;
      vstack.push(this.lexer.yytext);
      _$jscoverage['handlebars/handlebars.js'][348]++;
      lstack.push(this.lexer.yylloc);
      _$jscoverage['handlebars/handlebars.js'][349]++;
      stack.push(action[1]);
      _$jscoverage['handlebars/handlebars.js'][350]++;
      symbol = null;
      _$jscoverage['handlebars/handlebars.js'][351]++;
      if ((! preErrorSymbol)) {
        _$jscoverage['handlebars/handlebars.js'][352]++;
        yyleng = this.lexer.yyleng;
        _$jscoverage['handlebars/handlebars.js'][353]++;
        yytext = this.lexer.yytext;
        _$jscoverage['handlebars/handlebars.js'][354]++;
        yylineno = this.lexer.yylineno;
        _$jscoverage['handlebars/handlebars.js'][355]++;
        yyloc = this.lexer.yylloc;
        _$jscoverage['handlebars/handlebars.js'][356]++;
        if ((recovering > 0)) {
          _$jscoverage['handlebars/handlebars.js'][357]++;
          (recovering--);
        }
      }
      else {
        _$jscoverage['handlebars/handlebars.js'][359]++;
        symbol = preErrorSymbol;
        _$jscoverage['handlebars/handlebars.js'][360]++;
        preErrorSymbol = null;
      }
      _$jscoverage['handlebars/handlebars.js'][362]++;
      break;
    case 2:
      _$jscoverage['handlebars/handlebars.js'][364]++;
      len = this.productions_[action[1]][1];
      _$jscoverage['handlebars/handlebars.js'][365]++;
      yyval.$ = vstack[(vstack.length - len)];
      _$jscoverage['handlebars/handlebars.js'][366]++;
      yyval._$ = {first_line: lstack[(lstack.length - (len || 1))].first_line, last_line: lstack[(lstack.length - 1)].last_line, first_column: lstack[(lstack.length - (len || 1))].first_column, last_column: lstack[(lstack.length - 1)].last_column};
      _$jscoverage['handlebars/handlebars.js'][367]++;
      if (ranges) {
        _$jscoverage['handlebars/handlebars.js'][368]++;
        yyval._$.range = [lstack[(lstack.length - (len || 1))].range[0], lstack[(lstack.length - 1)].range[1]];
      }
      _$jscoverage['handlebars/handlebars.js'][370]++;
      r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
      _$jscoverage['handlebars/handlebars.js'][371]++;
      if (((typeof r) !== "undefined")) {
        _$jscoverage['handlebars/handlebars.js'][372]++;
        return r;
      }
      _$jscoverage['handlebars/handlebars.js'][374]++;
      if (len) {
        _$jscoverage['handlebars/handlebars.js'][375]++;
        stack = stack.slice(0, (-1 * len * 2));
        _$jscoverage['handlebars/handlebars.js'][376]++;
        vstack = vstack.slice(0, (-1 * len));
        _$jscoverage['handlebars/handlebars.js'][377]++;
        lstack = lstack.slice(0, (-1 * len));
      }
      _$jscoverage['handlebars/handlebars.js'][379]++;
      stack.push(this.productions_[action[1]][0]);
      _$jscoverage['handlebars/handlebars.js'][380]++;
      vstack.push(yyval.$);
      _$jscoverage['handlebars/handlebars.js'][381]++;
      lstack.push(yyval._$);
      _$jscoverage['handlebars/handlebars.js'][382]++;
      newState = table[stack[(stack.length - 2)]][stack[(stack.length - 1)]];
      _$jscoverage['handlebars/handlebars.js'][383]++;
      stack.push(newState);
      _$jscoverage['handlebars/handlebars.js'][384]++;
      break;
    case 3:
      _$jscoverage['handlebars/handlebars.js'][386]++;
      return true;
    }
}
  _$jscoverage['handlebars/handlebars.js'][389]++;
  return true;
})};
  _$jscoverage['handlebars/handlebars.js'][393]++;
  var lexer = (function () {
  _$jscoverage['handlebars/handlebars.js'][394]++;
  var lexer = {EOF: 1, parseError: (function parseError(str, hash) {
  _$jscoverage['handlebars/handlebars.js'][396]++;
  if (this.yy.parser) {
    _$jscoverage['handlebars/handlebars.js'][397]++;
    this.yy.parser.parseError(str, hash);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][399]++;
    throw new Error(str);
  }
}), setInput: (function (input) {
  _$jscoverage['handlebars/handlebars.js'][403]++;
  this._input = input;
  _$jscoverage['handlebars/handlebars.js'][404]++;
  this._more = (this._less = (this.done = false));
  _$jscoverage['handlebars/handlebars.js'][405]++;
  this.yylineno = (this.yyleng = 0);
  _$jscoverage['handlebars/handlebars.js'][406]++;
  this.yytext = (this.matched = (this.match = ""));
  _$jscoverage['handlebars/handlebars.js'][407]++;
  this.conditionStack = ["INITIAL"];
  _$jscoverage['handlebars/handlebars.js'][408]++;
  this.yylloc = {first_line: 1, first_column: 0, last_line: 1, last_column: 0};
  _$jscoverage['handlebars/handlebars.js'][409]++;
  if (this.options.ranges) {
    _$jscoverage['handlebars/handlebars.js'][409]++;
    this.yylloc.range = [0, 0];
  }
  _$jscoverage['handlebars/handlebars.js'][410]++;
  this.offset = 0;
  _$jscoverage['handlebars/handlebars.js'][411]++;
  return this;
}), input: (function () {
  _$jscoverage['handlebars/handlebars.js'][414]++;
  var ch = this._input[0];
  _$jscoverage['handlebars/handlebars.js'][415]++;
  this.yytext += ch;
  _$jscoverage['handlebars/handlebars.js'][416]++;
  (this.yyleng++);
  _$jscoverage['handlebars/handlebars.js'][417]++;
  (this.offset++);
  _$jscoverage['handlebars/handlebars.js'][418]++;
  this.match += ch;
  _$jscoverage['handlebars/handlebars.js'][419]++;
  this.matched += ch;
  _$jscoverage['handlebars/handlebars.js'][420]++;
  var lines = ch.match(/(?:\r\n?|\n).*/g);
  _$jscoverage['handlebars/handlebars.js'][421]++;
  if (lines) {
    _$jscoverage['handlebars/handlebars.js'][422]++;
    (this.yylineno++);
    _$jscoverage['handlebars/handlebars.js'][423]++;
    (this.yylloc.last_line++);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][425]++;
    (this.yylloc.last_column++);
  }
  _$jscoverage['handlebars/handlebars.js'][427]++;
  if (this.options.ranges) {
    _$jscoverage['handlebars/handlebars.js'][427]++;
    (this.yylloc.range[1]++);
  }
  _$jscoverage['handlebars/handlebars.js'][429]++;
  this._input = this._input.slice(1);
  _$jscoverage['handlebars/handlebars.js'][430]++;
  return ch;
}), unput: (function (ch) {
  _$jscoverage['handlebars/handlebars.js'][433]++;
  var len = ch.length;
  _$jscoverage['handlebars/handlebars.js'][434]++;
  var lines = ch.split(/(?:\r\n?|\n)/g);
  _$jscoverage['handlebars/handlebars.js'][436]++;
  this._input = (ch + this._input);
  _$jscoverage['handlebars/handlebars.js'][437]++;
  this.yytext = this.yytext.substr(0, (this.yytext.length - len - 1));
  _$jscoverage['handlebars/handlebars.js'][439]++;
  this.offset -= len;
  _$jscoverage['handlebars/handlebars.js'][440]++;
  var oldLines = this.match.split(/(?:\r\n?|\n)/g);
  _$jscoverage['handlebars/handlebars.js'][441]++;
  this.match = this.match.substr(0, (this.match.length - 1));
  _$jscoverage['handlebars/handlebars.js'][442]++;
  this.matched = this.matched.substr(0, (this.matched.length - 1));
  _$jscoverage['handlebars/handlebars.js'][444]++;
  if ((lines.length - 1)) {
    _$jscoverage['handlebars/handlebars.js'][444]++;
    this.yylineno -= (lines.length - 1);
  }
  _$jscoverage['handlebars/handlebars.js'][445]++;
  var r = this.yylloc.range;
  _$jscoverage['handlebars/handlebars.js'][447]++;
  this.yylloc = {first_line: this.yylloc.first_line, last_line: (this.yylineno + 1), first_column: this.yylloc.first_column, last_column: (lines? ((((lines.length === oldLines.length)? this.yylloc.first_column: 0) + oldLines[(oldLines.length - lines.length)].length) - lines[0].length): (this.yylloc.first_column - len))};
  _$jscoverage['handlebars/handlebars.js'][455]++;
  if (this.options.ranges) {
    _$jscoverage['handlebars/handlebars.js'][456]++;
    this.yylloc.range = [r[0], ((r[0] + this.yyleng) - len)];
  }
  _$jscoverage['handlebars/handlebars.js'][458]++;
  return this;
}), more: (function () {
  _$jscoverage['handlebars/handlebars.js'][461]++;
  this._more = true;
  _$jscoverage['handlebars/handlebars.js'][462]++;
  return this;
}), less: (function (n) {
  _$jscoverage['handlebars/handlebars.js'][465]++;
  this.unput(this.match.slice(n));
}), pastInput: (function () {
  _$jscoverage['handlebars/handlebars.js'][468]++;
  var past = this.matched.substr(0, (this.matched.length - this.match.length));
  _$jscoverage['handlebars/handlebars.js'][469]++;
  return (((past.length > 20)? "...": "") + past.substr(-20).replace(/\n/g, ""));
}), upcomingInput: (function () {
  _$jscoverage['handlebars/handlebars.js'][472]++;
  var next = this.match;
  _$jscoverage['handlebars/handlebars.js'][473]++;
  if ((next.length < 20)) {
    _$jscoverage['handlebars/handlebars.js'][474]++;
    next += this._input.substr(0, (20 - next.length));
  }
  _$jscoverage['handlebars/handlebars.js'][476]++;
  return (next.substr(0, 20) + ((next.length > 20)? "...": "")).replace(/\n/g, "");
}), showPosition: (function () {
  _$jscoverage['handlebars/handlebars.js'][479]++;
  var pre = this.pastInput();
  _$jscoverage['handlebars/handlebars.js'][480]++;
  var c = new Array((pre.length + 1)).join("-");
  _$jscoverage['handlebars/handlebars.js'][481]++;
  return (pre + this.upcomingInput() + "\n" + c + "^");
}), next: (function () {
  _$jscoverage['handlebars/handlebars.js'][484]++;
  if (this.done) {
    _$jscoverage['handlebars/handlebars.js'][485]++;
    return this.EOF;
  }
  _$jscoverage['handlebars/handlebars.js'][487]++;
  if ((! this._input)) {
    _$jscoverage['handlebars/handlebars.js'][487]++;
    this.done = true;
  }
  _$jscoverage['handlebars/handlebars.js'][489]++;
  var token, match, tempMatch, index, col, lines;
  _$jscoverage['handlebars/handlebars.js'][495]++;
  if ((! this._more)) {
    _$jscoverage['handlebars/handlebars.js'][496]++;
    this.yytext = "";
    _$jscoverage['handlebars/handlebars.js'][497]++;
    this.match = "";
  }
  _$jscoverage['handlebars/handlebars.js'][499]++;
  var rules = this._currentRules();
  _$jscoverage['handlebars/handlebars.js'][500]++;
  for (var i = 0; (i < rules.length); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][501]++;
    tempMatch = this._input.match(this.rules[rules[i]]);
    _$jscoverage['handlebars/handlebars.js'][502]++;
    if ((tempMatch && ((! match) || (tempMatch[0].length > match[0].length)))) {
      _$jscoverage['handlebars/handlebars.js'][503]++;
      match = tempMatch;
      _$jscoverage['handlebars/handlebars.js'][504]++;
      index = i;
      _$jscoverage['handlebars/handlebars.js'][505]++;
      if ((! this.options.flex)) {
        _$jscoverage['handlebars/handlebars.js'][505]++;
        break;
      }
    }
}
  _$jscoverage['handlebars/handlebars.js'][508]++;
  if (match) {
    _$jscoverage['handlebars/handlebars.js'][509]++;
    lines = match[0].match(/(?:\r\n?|\n).*/g);
    _$jscoverage['handlebars/handlebars.js'][510]++;
    if (lines) {
      _$jscoverage['handlebars/handlebars.js'][510]++;
      this.yylineno += lines.length;
    }
    _$jscoverage['handlebars/handlebars.js'][511]++;
    this.yylloc = {first_line: this.yylloc.last_line, last_line: (this.yylineno + 1), first_column: this.yylloc.last_column, last_column: (lines? (lines[(lines.length - 1)].length - lines[(lines.length - 1)].match(/\r?\n?/)[0].length): (this.yylloc.last_column + match[0].length))};
    _$jscoverage['handlebars/handlebars.js'][515]++;
    this.yytext += match[0];
    _$jscoverage['handlebars/handlebars.js'][516]++;
    this.match += match[0];
    _$jscoverage['handlebars/handlebars.js'][517]++;
    this.matches = match;
    _$jscoverage['handlebars/handlebars.js'][518]++;
    this.yyleng = this.yytext.length;
    _$jscoverage['handlebars/handlebars.js'][519]++;
    if (this.options.ranges) {
      _$jscoverage['handlebars/handlebars.js'][520]++;
      this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
    }
    _$jscoverage['handlebars/handlebars.js'][522]++;
    this._more = false;
    _$jscoverage['handlebars/handlebars.js'][523]++;
    this._input = this._input.slice(match[0].length);
    _$jscoverage['handlebars/handlebars.js'][524]++;
    this.matched += match[0];
    _$jscoverage['handlebars/handlebars.js'][525]++;
    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[(this.conditionStack.length - 1)]);
    _$jscoverage['handlebars/handlebars.js'][526]++;
    if ((this.done && this._input)) {
      _$jscoverage['handlebars/handlebars.js'][526]++;
      this.done = false;
    }
    _$jscoverage['handlebars/handlebars.js'][527]++;
    if (token) {
      _$jscoverage['handlebars/handlebars.js'][527]++;
      return token;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][528]++;
      return;
    }
  }
  _$jscoverage['handlebars/handlebars.js'][530]++;
  if ((this._input === "")) {
    _$jscoverage['handlebars/handlebars.js'][531]++;
    return this.EOF;
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][533]++;
    return this.parseError(("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition()), {text: "", token: null, line: this.yylineno});
  }
}), lex: (function lex() {
  _$jscoverage['handlebars/handlebars.js'][538]++;
  var r = this.next();
  _$jscoverage['handlebars/handlebars.js'][539]++;
  if (((typeof r) !== "undefined")) {
    _$jscoverage['handlebars/handlebars.js'][540]++;
    return r;
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][542]++;
    return this.lex();
  }
}), begin: (function begin(condition) {
  _$jscoverage['handlebars/handlebars.js'][546]++;
  this.conditionStack.push(condition);
}), popState: (function popState() {
  _$jscoverage['handlebars/handlebars.js'][549]++;
  return this.conditionStack.pop();
}), _currentRules: (function _currentRules() {
  _$jscoverage['handlebars/handlebars.js'][552]++;
  return this.conditions[this.conditionStack[(this.conditionStack.length - 1)]].rules;
}), topState: (function () {
  _$jscoverage['handlebars/handlebars.js'][555]++;
  return this.conditionStack[(this.conditionStack.length - 2)];
}), pushState: (function begin(condition) {
  _$jscoverage['handlebars/handlebars.js'][558]++;
  this.begin(condition);
})};
  _$jscoverage['handlebars/handlebars.js'][560]++;
  lexer.options = {};
  _$jscoverage['handlebars/handlebars.js'][561]++;
  lexer.performAction = (function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
  _$jscoverage['handlebars/handlebars.js'][563]++;
  var YYSTATE = YY_START;
  _$jscoverage['handlebars/handlebars.js'][564]++;
  switch ($avoiding_name_collisions) {
  case 0:
    _$jscoverage['handlebars/handlebars.js'][566]++;
    if ((yy_.yytext.slice(-1) !== "\\")) {
      _$jscoverage['handlebars/handlebars.js'][566]++;
      this.begin("mu");
    }
    _$jscoverage['handlebars/handlebars.js'][567]++;
    if ((yy_.yytext.slice(-1) === "\\")) {
      _$jscoverage['handlebars/handlebars.js'][567]++;
      ((yy_.yytext = yy_.yytext.substr(0, (yy_.yyleng - 1))), this.begin("emu"));
    }
    _$jscoverage['handlebars/handlebars.js'][568]++;
    if (yy_.yytext) {
      _$jscoverage['handlebars/handlebars.js'][568]++;
      return 14;
    }
    _$jscoverage['handlebars/handlebars.js'][570]++;
    break;
  case 1:
    _$jscoverage['handlebars/handlebars.js'][571]++;
    return 14;
    _$jscoverage['handlebars/handlebars.js'][572]++;
    break;
  case 2:
    _$jscoverage['handlebars/handlebars.js'][574]++;
    if ((yy_.yytext.slice(-1) !== "\\")) {
      _$jscoverage['handlebars/handlebars.js'][574]++;
      this.popState();
    }
    _$jscoverage['handlebars/handlebars.js'][575]++;
    if ((yy_.yytext.slice(-1) === "\\")) {
      _$jscoverage['handlebars/handlebars.js'][575]++;
      yy_.yytext = yy_.yytext.substr(0, (yy_.yyleng - 1));
    }
    _$jscoverage['handlebars/handlebars.js'][576]++;
    return 14;
    _$jscoverage['handlebars/handlebars.js'][578]++;
    break;
  case 3:
    _$jscoverage['handlebars/handlebars.js'][579]++;
    yy_.yytext = yy_.yytext.substr(0, (yy_.yyleng - 4));
    _$jscoverage['handlebars/handlebars.js'][579]++;
    this.popState();
    _$jscoverage['handlebars/handlebars.js'][579]++;
    return 15;
    _$jscoverage['handlebars/handlebars.js'][580]++;
    break;
  case 4:
    _$jscoverage['handlebars/handlebars.js'][581]++;
    this.begin("par");
    _$jscoverage['handlebars/handlebars.js'][581]++;
    return 24;
    _$jscoverage['handlebars/handlebars.js'][582]++;
    break;
  case 5:
    _$jscoverage['handlebars/handlebars.js'][583]++;
    return 16;
    _$jscoverage['handlebars/handlebars.js'][584]++;
    break;
  case 6:
    _$jscoverage['handlebars/handlebars.js'][585]++;
    return 20;
    _$jscoverage['handlebars/handlebars.js'][586]++;
    break;
  case 7:
    _$jscoverage['handlebars/handlebars.js'][587]++;
    return 19;
    _$jscoverage['handlebars/handlebars.js'][588]++;
    break;
  case 8:
    _$jscoverage['handlebars/handlebars.js'][589]++;
    return 19;
    _$jscoverage['handlebars/handlebars.js'][590]++;
    break;
  case 9:
    _$jscoverage['handlebars/handlebars.js'][591]++;
    return 23;
    _$jscoverage['handlebars/handlebars.js'][592]++;
    break;
  case 10:
    _$jscoverage['handlebars/handlebars.js'][593]++;
    return 23;
    _$jscoverage['handlebars/handlebars.js'][594]++;
    break;
  case 11:
    _$jscoverage['handlebars/handlebars.js'][595]++;
    this.popState();
    _$jscoverage['handlebars/handlebars.js'][595]++;
    this.begin("com");
    _$jscoverage['handlebars/handlebars.js'][596]++;
    break;
  case 12:
    _$jscoverage['handlebars/handlebars.js'][597]++;
    yy_.yytext = yy_.yytext.substr(3, (yy_.yyleng - 5));
    _$jscoverage['handlebars/handlebars.js'][597]++;
    this.popState();
    _$jscoverage['handlebars/handlebars.js'][597]++;
    return 15;
    _$jscoverage['handlebars/handlebars.js'][598]++;
    break;
  case 13:
    _$jscoverage['handlebars/handlebars.js'][599]++;
    return 22;
    _$jscoverage['handlebars/handlebars.js'][600]++;
    break;
  case 14:
    _$jscoverage['handlebars/handlebars.js'][601]++;
    return 36;
    _$jscoverage['handlebars/handlebars.js'][602]++;
    break;
  case 15:
    _$jscoverage['handlebars/handlebars.js'][603]++;
    return 35;
    _$jscoverage['handlebars/handlebars.js'][604]++;
    break;
  case 16:
    _$jscoverage['handlebars/handlebars.js'][605]++;
    return 35;
    _$jscoverage['handlebars/handlebars.js'][606]++;
    break;
  case 17:
    _$jscoverage['handlebars/handlebars.js'][607]++;
    return 39;
    _$jscoverage['handlebars/handlebars.js'][608]++;
    break;
  case 18:
    _$jscoverage['handlebars/handlebars.js'][610]++;
    break;
  case 19:
    _$jscoverage['handlebars/handlebars.js'][611]++;
    this.popState();
    _$jscoverage['handlebars/handlebars.js'][611]++;
    return 18;
    _$jscoverage['handlebars/handlebars.js'][612]++;
    break;
  case 20:
    _$jscoverage['handlebars/handlebars.js'][613]++;
    this.popState();
    _$jscoverage['handlebars/handlebars.js'][613]++;
    return 18;
    _$jscoverage['handlebars/handlebars.js'][614]++;
    break;
  case 21:
    _$jscoverage['handlebars/handlebars.js'][615]++;
    yy_.yytext = yy_.yytext.substr(1, (yy_.yyleng - 2)).replace(/\\"/g, "\"");
    _$jscoverage['handlebars/handlebars.js'][615]++;
    return 30;
    _$jscoverage['handlebars/handlebars.js'][616]++;
    break;
  case 22:
    _$jscoverage['handlebars/handlebars.js'][617]++;
    yy_.yytext = yy_.yytext.substr(1, (yy_.yyleng - 2)).replace(/\\'/g, "'");
    _$jscoverage['handlebars/handlebars.js'][617]++;
    return 30;
    _$jscoverage['handlebars/handlebars.js'][618]++;
    break;
  case 23:
    _$jscoverage['handlebars/handlebars.js'][619]++;
    yy_.yytext = yy_.yytext.substr(1);
    _$jscoverage['handlebars/handlebars.js'][619]++;
    return 28;
    _$jscoverage['handlebars/handlebars.js'][620]++;
    break;
  case 24:
    _$jscoverage['handlebars/handlebars.js'][621]++;
    return 32;
    _$jscoverage['handlebars/handlebars.js'][622]++;
    break;
  case 25:
    _$jscoverage['handlebars/handlebars.js'][623]++;
    return 32;
    _$jscoverage['handlebars/handlebars.js'][624]++;
    break;
  case 26:
    _$jscoverage['handlebars/handlebars.js'][625]++;
    return 31;
    _$jscoverage['handlebars/handlebars.js'][626]++;
    break;
  case 27:
    _$jscoverage['handlebars/handlebars.js'][627]++;
    return 35;
    _$jscoverage['handlebars/handlebars.js'][628]++;
    break;
  case 28:
    _$jscoverage['handlebars/handlebars.js'][629]++;
    yy_.yytext = yy_.yytext.substr(1, (yy_.yyleng - 2));
    _$jscoverage['handlebars/handlebars.js'][629]++;
    return 35;
    _$jscoverage['handlebars/handlebars.js'][630]++;
    break;
  case 29:
    _$jscoverage['handlebars/handlebars.js'][631]++;
    return "INVALID";
    _$jscoverage['handlebars/handlebars.js'][632]++;
    break;
  case 30:
    _$jscoverage['handlebars/handlebars.js'][634]++;
    break;
  case 31:
    _$jscoverage['handlebars/handlebars.js'][635]++;
    this.popState();
    _$jscoverage['handlebars/handlebars.js'][635]++;
    return 37;
    _$jscoverage['handlebars/handlebars.js'][636]++;
    break;
  case 32:
    _$jscoverage['handlebars/handlebars.js'][637]++;
    return 5;
    _$jscoverage['handlebars/handlebars.js'][638]++;
    break;
  }
});
  _$jscoverage['handlebars/handlebars.js'][641]++;
  lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|$)))/, /^(?:[\s\S]*?--\}\})/, /^(?:\{\{>)/, /^(?:\{\{#)/, /^(?:\{\{\/)/, /^(?:\{\{\^)/, /^(?:\{\{\s*else\b)/, /^(?:\{\{\{)/, /^(?:\{\{&)/, /^(?:\{\{!--)/, /^(?:\{\{![\s\S]*?\}\})/, /^(?:\{\{)/, /^(?:=)/, /^(?:\.(?=[} ]))/, /^(?:\.\.)/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}\}\})/, /^(?:\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@[a-zA-Z]+)/, /^(?:true(?=[}\s]))/, /^(?:false(?=[}\s]))/, /^(?:[0-9]+(?=[}\s]))/, /^(?:[a-zA-Z0-9_$-]+(?=[=}\s\/.]))/, /^(?:\[[^\]]*\])/, /^(?:.)/, /^(?:\s+)/, /^(?:[a-zA-Z0-9_$-/]+)/, /^(?:$)/];
  _$jscoverage['handlebars/handlebars.js'][642]++;
  lexer.conditions = {"mu": {"rules": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32], "inclusive": false}, "emu": {"rules": [2], "inclusive": false}, "com": {"rules": [3], "inclusive": false}, "par": {"rules": [30, 31], "inclusive": false}, "INITIAL": {"rules": [0, 1, 32], "inclusive": true}};
  _$jscoverage['handlebars/handlebars.js'][643]++;
  return lexer;
})();
  _$jscoverage['handlebars/handlebars.js'][644]++;
  parser.lexer = lexer;
  _$jscoverage['handlebars/handlebars.js'][645]++;
  function Parser() {
    _$jscoverage['handlebars/handlebars.js'][645]++;
    this.yy = {};
}
  _$jscoverage['handlebars/handlebars.js'][645]++;
  Parser.prototype = parser;
  _$jscoverage['handlebars/handlebars.js'][645]++;
  parser.Parser = Parser;
  _$jscoverage['handlebars/handlebars.js'][646]++;
  return new Parser();
})();
_$jscoverage['handlebars/handlebars.js'][647]++;
;
_$jscoverage['handlebars/handlebars.js'][649]++;
Handlebars.Parser = handlebars;
_$jscoverage['handlebars/handlebars.js'][651]++;
Handlebars.parse = (function (input) {
  _$jscoverage['handlebars/handlebars.js'][654]++;
  if ((input.constructor === Handlebars.AST.ProgramNode)) {
    _$jscoverage['handlebars/handlebars.js'][654]++;
    return input;
  }
  _$jscoverage['handlebars/handlebars.js'][656]++;
  Handlebars.Parser.yy = Handlebars.AST;
  _$jscoverage['handlebars/handlebars.js'][657]++;
  return Handlebars.Parser.parse(input);
});
_$jscoverage['handlebars/handlebars.js'][660]++;
Handlebars.print = (function (ast) {
  _$jscoverage['handlebars/handlebars.js'][661]++;
  return new (Handlebars.PrintVisitor)().accept(ast);
});
_$jscoverage['handlebars/handlebars.js'][662]++;
;
_$jscoverage['handlebars/handlebars.js'][664]++;
(function () {
  _$jscoverage['handlebars/handlebars.js'][666]++;
  Handlebars.AST = {};
  _$jscoverage['handlebars/handlebars.js'][668]++;
  Handlebars.AST.ProgramNode = (function (statements, inverse) {
  _$jscoverage['handlebars/handlebars.js'][669]++;
  this.type = "program";
  _$jscoverage['handlebars/handlebars.js'][670]++;
  this.statements = statements;
  _$jscoverage['handlebars/handlebars.js'][671]++;
  if (inverse) {
    _$jscoverage['handlebars/handlebars.js'][671]++;
    this.inverse = new (Handlebars.AST.ProgramNode)(inverse);
  }
});
  _$jscoverage['handlebars/handlebars.js'][674]++;
  Handlebars.AST.MustacheNode = (function (rawParams, hash, unescaped) {
  _$jscoverage['handlebars/handlebars.js'][675]++;
  this.type = "mustache";
  _$jscoverage['handlebars/handlebars.js'][676]++;
  this.escaped = (! unescaped);
  _$jscoverage['handlebars/handlebars.js'][677]++;
  this.hash = hash;
  _$jscoverage['handlebars/handlebars.js'][679]++;
  var id = (this.id = rawParams[0]);
  _$jscoverage['handlebars/handlebars.js'][680]++;
  var params = (this.params = rawParams.slice(1));
  _$jscoverage['handlebars/handlebars.js'][684]++;
  var eligibleHelper = (this.eligibleHelper = id.isSimple);
  _$jscoverage['handlebars/handlebars.js'][689]++;
  this.isHelper = (eligibleHelper && (params.length || hash));
});
  _$jscoverage['handlebars/handlebars.js'][696]++;
  Handlebars.AST.PartialNode = (function (partialName, context) {
  _$jscoverage['handlebars/handlebars.js'][697]++;
  this.type = "partial";
  _$jscoverage['handlebars/handlebars.js'][698]++;
  this.partialName = partialName;
  _$jscoverage['handlebars/handlebars.js'][699]++;
  this.context = context;
});
  _$jscoverage['handlebars/handlebars.js'][702]++;
  var verifyMatch = (function (open, close) {
  _$jscoverage['handlebars/handlebars.js'][703]++;
  if ((open.original !== close.original)) {
    _$jscoverage['handlebars/handlebars.js'][704]++;
    throw new (Handlebars.Exception)((open.original + " doesn't match " + close.original));
  }
});
  _$jscoverage['handlebars/handlebars.js'][708]++;
  Handlebars.AST.BlockNode = (function (mustache, program, inverse, close) {
  _$jscoverage['handlebars/handlebars.js'][709]++;
  verifyMatch(mustache.id, close);
  _$jscoverage['handlebars/handlebars.js'][710]++;
  this.type = "block";
  _$jscoverage['handlebars/handlebars.js'][711]++;
  this.mustache = mustache;
  _$jscoverage['handlebars/handlebars.js'][712]++;
  this.program = program;
  _$jscoverage['handlebars/handlebars.js'][713]++;
  this.inverse = inverse;
  _$jscoverage['handlebars/handlebars.js'][715]++;
  if ((this.inverse && (! this.program))) {
    _$jscoverage['handlebars/handlebars.js'][716]++;
    this.isInverse = true;
  }
});
  _$jscoverage['handlebars/handlebars.js'][720]++;
  Handlebars.AST.ContentNode = (function (string) {
  _$jscoverage['handlebars/handlebars.js'][721]++;
  this.type = "content";
  _$jscoverage['handlebars/handlebars.js'][722]++;
  this.string = string;
});
  _$jscoverage['handlebars/handlebars.js'][725]++;
  Handlebars.AST.HashNode = (function (pairs) {
  _$jscoverage['handlebars/handlebars.js'][726]++;
  this.type = "hash";
  _$jscoverage['handlebars/handlebars.js'][727]++;
  this.pairs = pairs;
});
  _$jscoverage['handlebars/handlebars.js'][730]++;
  Handlebars.AST.IdNode = (function (parts) {
  _$jscoverage['handlebars/handlebars.js'][731]++;
  this.type = "ID";
  _$jscoverage['handlebars/handlebars.js'][732]++;
  this.original = parts.join(".");
  _$jscoverage['handlebars/handlebars.js'][734]++;
  var dig = [], depth = 0;
  _$jscoverage['handlebars/handlebars.js'][736]++;
  for (var i = 0, l = parts.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][737]++;
    var part = parts[i];
    _$jscoverage['handlebars/handlebars.js'][739]++;
    if (((part === "..") || (part === ".") || (part === "this"))) {
      _$jscoverage['handlebars/handlebars.js'][740]++;
      if ((dig.length > 0)) {
        _$jscoverage['handlebars/handlebars.js'][740]++;
        throw new (Handlebars.Exception)(("Invalid path: " + this.original));
      }
      else {
        _$jscoverage['handlebars/handlebars.js'][741]++;
        if ((part === "..")) {
          _$jscoverage['handlebars/handlebars.js'][741]++;
          (depth++);
        }
        else {
          _$jscoverage['handlebars/handlebars.js'][742]++;
          this.isScoped = true;
        }
      }
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][744]++;
      dig.push(part);
    }
}
  _$jscoverage['handlebars/handlebars.js'][747]++;
  this.parts = dig;
  _$jscoverage['handlebars/handlebars.js'][748]++;
  this.string = dig.join(".");
  _$jscoverage['handlebars/handlebars.js'][749]++;
  this.depth = depth;
  _$jscoverage['handlebars/handlebars.js'][753]++;
  this.isSimple = ((parts.length === 1) && (! this.isScoped) && (depth === 0));
  _$jscoverage['handlebars/handlebars.js'][755]++;
  this.stringModeValue = this.string;
});
  _$jscoverage['handlebars/handlebars.js'][758]++;
  Handlebars.AST.PartialNameNode = (function (name) {
  _$jscoverage['handlebars/handlebars.js'][759]++;
  this.type = "PARTIAL_NAME";
  _$jscoverage['handlebars/handlebars.js'][760]++;
  this.name = name;
});
  _$jscoverage['handlebars/handlebars.js'][763]++;
  Handlebars.AST.DataNode = (function (id) {
  _$jscoverage['handlebars/handlebars.js'][764]++;
  this.type = "DATA";
  _$jscoverage['handlebars/handlebars.js'][765]++;
  this.id = id;
});
  _$jscoverage['handlebars/handlebars.js'][768]++;
  Handlebars.AST.StringNode = (function (string) {
  _$jscoverage['handlebars/handlebars.js'][769]++;
  this.type = "STRING";
  _$jscoverage['handlebars/handlebars.js'][770]++;
  this.string = string;
  _$jscoverage['handlebars/handlebars.js'][771]++;
  this.stringModeValue = string;
});
  _$jscoverage['handlebars/handlebars.js'][774]++;
  Handlebars.AST.IntegerNode = (function (integer) {
  _$jscoverage['handlebars/handlebars.js'][775]++;
  this.type = "INTEGER";
  _$jscoverage['handlebars/handlebars.js'][776]++;
  this.integer = integer;
  _$jscoverage['handlebars/handlebars.js'][777]++;
  this.stringModeValue = Number(integer);
});
  _$jscoverage['handlebars/handlebars.js'][780]++;
  Handlebars.AST.BooleanNode = (function (bool) {
  _$jscoverage['handlebars/handlebars.js'][781]++;
  this.type = "BOOLEAN";
  _$jscoverage['handlebars/handlebars.js'][782]++;
  this.bool = bool;
  _$jscoverage['handlebars/handlebars.js'][783]++;
  this.stringModeValue = (bool === "true");
});
  _$jscoverage['handlebars/handlebars.js'][786]++;
  Handlebars.AST.CommentNode = (function (comment) {
  _$jscoverage['handlebars/handlebars.js'][787]++;
  this.type = "comment";
  _$jscoverage['handlebars/handlebars.js'][788]++;
  this.comment = comment;
});
})();
_$jscoverage['handlebars/handlebars.js'][791]++;
;
_$jscoverage['handlebars/handlebars.js'][794]++;
var errorProps = ["description", "fileName", "lineNumber", "message", "name", "number", "stack"];
_$jscoverage['handlebars/handlebars.js'][796]++;
Handlebars.Exception = (function (message) {
  _$jscoverage['handlebars/handlebars.js'][797]++;
  var tmp = Error.prototype.constructor.apply(this, arguments);
  _$jscoverage['handlebars/handlebars.js'][800]++;
  for (var idx = 0; (idx < errorProps.length); (idx++)) {
    _$jscoverage['handlebars/handlebars.js'][801]++;
    this[errorProps[idx]] = tmp[errorProps[idx]];
}
});
_$jscoverage['handlebars/handlebars.js'][804]++;
Handlebars.Exception.prototype = new Error();
_$jscoverage['handlebars/handlebars.js'][807]++;
Handlebars.SafeString = (function (string) {
  _$jscoverage['handlebars/handlebars.js'][808]++;
  this.string = string;
});
_$jscoverage['handlebars/handlebars.js'][810]++;
Handlebars.SafeString.prototype.toString = (function () {
  _$jscoverage['handlebars/handlebars.js'][811]++;
  return this.string.toString();
});
_$jscoverage['handlebars/handlebars.js'][814]++;
(function () {
  _$jscoverage['handlebars/handlebars.js'][815]++;
  var escape = {"&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#x27;", "`": "&#x60;"};
  _$jscoverage['handlebars/handlebars.js'][824]++;
  var badChars = /[&<>"'`]/g;
  _$jscoverage['handlebars/handlebars.js'][825]++;
  var possible = /[&<>"'`]/;
  _$jscoverage['handlebars/handlebars.js'][827]++;
  var escapeChar = (function (chr) {
  _$jscoverage['handlebars/handlebars.js'][828]++;
  return (escape[chr] || "&amp;");
});
  _$jscoverage['handlebars/handlebars.js'][831]++;
  Handlebars.Utils = {escapeExpression: (function (string) {
  _$jscoverage['handlebars/handlebars.js'][834]++;
  if ((string instanceof Handlebars.SafeString)) {
    _$jscoverage['handlebars/handlebars.js'][835]++;
    return string.toString();
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][836]++;
    if (((string == null) || (string === false))) {
      _$jscoverage['handlebars/handlebars.js'][837]++;
      return "";
    }
  }
  _$jscoverage['handlebars/handlebars.js'][840]++;
  if ((! possible.test(string))) {
    _$jscoverage['handlebars/handlebars.js'][840]++;
    return string;
  }
  _$jscoverage['handlebars/handlebars.js'][841]++;
  return string.replace(badChars, escapeChar);
}), isEmpty: (function (value) {
  _$jscoverage['handlebars/handlebars.js'][845]++;
  if (((! value) && (value !== 0))) {
    _$jscoverage['handlebars/handlebars.js'][846]++;
    return true;
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][847]++;
    if (((Object.prototype.toString.call(value) === "[object Array]") && (value.length === 0))) {
      _$jscoverage['handlebars/handlebars.js'][848]++;
      return true;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][850]++;
      return false;
    }
  }
})};
})();
_$jscoverage['handlebars/handlebars.js'][854]++;
;
_$jscoverage['handlebars/handlebars.js'][858]++;
Handlebars.Compiler = (function () {
});
_$jscoverage['handlebars/handlebars.js'][859]++;
Handlebars.JavaScriptCompiler = (function () {
});
_$jscoverage['handlebars/handlebars.js'][861]++;
(function (Compiler, JavaScriptCompiler) {
  _$jscoverage['handlebars/handlebars.js'][867]++;
  Compiler.prototype = {compiler: Compiler, disassemble: (function () {
  _$jscoverage['handlebars/handlebars.js'][871]++;
  var opcodes = this.opcodes, opcode, out = [], params, param;
  _$jscoverage['handlebars/handlebars.js'][873]++;
  for (var i = 0, l = opcodes.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][874]++;
    opcode = opcodes[i];
    _$jscoverage['handlebars/handlebars.js'][876]++;
    if ((opcode.opcode === "DECLARE")) {
      _$jscoverage['handlebars/handlebars.js'][877]++;
      out.push(("DECLARE " + opcode.name + "=" + opcode.value));
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][879]++;
      params = [];
      _$jscoverage['handlebars/handlebars.js'][880]++;
      for (var j = 0; (j < opcode.args.length); (j++)) {
        _$jscoverage['handlebars/handlebars.js'][881]++;
        param = opcode.args[j];
        _$jscoverage['handlebars/handlebars.js'][882]++;
        if (((typeof param) === "string")) {
          _$jscoverage['handlebars/handlebars.js'][883]++;
          param = ("\"" + param.replace("\n", "\\n") + "\"");
        }
        _$jscoverage['handlebars/handlebars.js'][885]++;
        params.push(param);
}
      _$jscoverage['handlebars/handlebars.js'][887]++;
      out.push((opcode.opcode + " " + params.join(" ")));
    }
}
  _$jscoverage['handlebars/handlebars.js'][891]++;
  return out.join("\n");
}), equals: (function (other) {
  _$jscoverage['handlebars/handlebars.js'][894]++;
  var len = this.opcodes.length;
  _$jscoverage['handlebars/handlebars.js'][895]++;
  if ((other.opcodes.length !== len)) {
    _$jscoverage['handlebars/handlebars.js'][896]++;
    return false;
  }
  _$jscoverage['handlebars/handlebars.js'][899]++;
  for (var i = 0; (i < len); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][900]++;
    var opcode = this.opcodes[i], otherOpcode = other.opcodes[i];
    _$jscoverage['handlebars/handlebars.js'][902]++;
    if (((opcode.opcode !== otherOpcode.opcode) || (opcode.args.length !== otherOpcode.args.length))) {
      _$jscoverage['handlebars/handlebars.js'][903]++;
      return false;
    }
    _$jscoverage['handlebars/handlebars.js'][905]++;
    for (var j = 0; (j < opcode.args.length); (j++)) {
      _$jscoverage['handlebars/handlebars.js'][906]++;
      if ((opcode.args[j] !== otherOpcode.args[j])) {
        _$jscoverage['handlebars/handlebars.js'][907]++;
        return false;
      }
}
}
  _$jscoverage['handlebars/handlebars.js'][911]++;
  return true;
}), guid: 0, compile: (function (program, options) {
  _$jscoverage['handlebars/handlebars.js'][917]++;
  this.children = [];
  _$jscoverage['handlebars/handlebars.js'][918]++;
  this.depths = {list: []};
  _$jscoverage['handlebars/handlebars.js'][919]++;
  this.options = options;
  _$jscoverage['handlebars/handlebars.js'][922]++;
  var knownHelpers = this.options.knownHelpers;
  _$jscoverage['handlebars/handlebars.js'][923]++;
  this.options.knownHelpers = {"helperMissing": true, "blockHelperMissing": true, "each": true, "if": true, "unless": true, "with": true, "log": true};
  _$jscoverage['handlebars/handlebars.js'][932]++;
  if (knownHelpers) {
    _$jscoverage['handlebars/handlebars.js'][933]++;
    for (var name in knownHelpers) {
      _$jscoverage['handlebars/handlebars.js'][934]++;
      this.options.knownHelpers[name] = knownHelpers[name];
}
  }
  _$jscoverage['handlebars/handlebars.js'][938]++;
  return this.program(program);
}), accept: (function (node) {
  _$jscoverage['handlebars/handlebars.js'][942]++;
  return (this[node.type])(node);
}), program: (function (program) {
  _$jscoverage['handlebars/handlebars.js'][946]++;
  var statements = program.statements, statement;
  _$jscoverage['handlebars/handlebars.js'][947]++;
  this.opcodes = [];
  _$jscoverage['handlebars/handlebars.js'][949]++;
  for (var i = 0, l = statements.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][950]++;
    statement = statements[i];
    _$jscoverage['handlebars/handlebars.js'][951]++;
    (this[statement.type])(statement);
}
  _$jscoverage['handlebars/handlebars.js'][953]++;
  this.isSimple = (l === 1);
  _$jscoverage['handlebars/handlebars.js'][955]++;
  this.depths.list = this.depths.list.sort((function (a, b) {
  _$jscoverage['handlebars/handlebars.js'][956]++;
  return (a - b);
}));
  _$jscoverage['handlebars/handlebars.js'][959]++;
  return this;
}), compileProgram: (function (program) {
  _$jscoverage['handlebars/handlebars.js'][963]++;
  var result = new (this.compiler)().compile(program, this.options);
  _$jscoverage['handlebars/handlebars.js'][964]++;
  var guid = (this.guid++), depth;
  _$jscoverage['handlebars/handlebars.js'][966]++;
  this.usePartial = (this.usePartial || result.usePartial);
  _$jscoverage['handlebars/handlebars.js'][968]++;
  this.children[guid] = result;
  _$jscoverage['handlebars/handlebars.js'][970]++;
  for (var i = 0, l = result.depths.list.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][971]++;
    depth = result.depths.list[i];
    _$jscoverage['handlebars/handlebars.js'][973]++;
    if ((depth < 2)) {
      _$jscoverage['handlebars/handlebars.js'][973]++;
      continue;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][974]++;
      this.addDepth((depth - 1));
    }
}
  _$jscoverage['handlebars/handlebars.js'][977]++;
  return guid;
}), block: (function (block) {
  _$jscoverage['handlebars/handlebars.js'][981]++;
  var mustache = block.mustache, program = block.program, inverse = block.inverse;
  _$jscoverage['handlebars/handlebars.js'][985]++;
  if (program) {
    _$jscoverage['handlebars/handlebars.js'][986]++;
    program = this.compileProgram(program);
  }
  _$jscoverage['handlebars/handlebars.js'][989]++;
  if (inverse) {
    _$jscoverage['handlebars/handlebars.js'][990]++;
    inverse = this.compileProgram(inverse);
  }
  _$jscoverage['handlebars/handlebars.js'][993]++;
  var type = this.classifyMustache(mustache);
  _$jscoverage['handlebars/handlebars.js'][995]++;
  if ((type === "helper")) {
    _$jscoverage['handlebars/handlebars.js'][996]++;
    this.helperMustache(mustache, program, inverse);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][997]++;
    if ((type === "simple")) {
      _$jscoverage['handlebars/handlebars.js'][998]++;
      this.simpleMustache(mustache);
      _$jscoverage['handlebars/handlebars.js'][1002]++;
      this.opcode("pushProgram", program);
      _$jscoverage['handlebars/handlebars.js'][1003]++;
      this.opcode("pushProgram", inverse);
      _$jscoverage['handlebars/handlebars.js'][1004]++;
      this.opcode("emptyHash");
      _$jscoverage['handlebars/handlebars.js'][1005]++;
      this.opcode("blockValue");
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1007]++;
      this.ambiguousMustache(mustache, program, inverse);
      _$jscoverage['handlebars/handlebars.js'][1011]++;
      this.opcode("pushProgram", program);
      _$jscoverage['handlebars/handlebars.js'][1012]++;
      this.opcode("pushProgram", inverse);
      _$jscoverage['handlebars/handlebars.js'][1013]++;
      this.opcode("emptyHash");
      _$jscoverage['handlebars/handlebars.js'][1014]++;
      this.opcode("ambiguousBlockValue");
    }
  }
  _$jscoverage['handlebars/handlebars.js'][1017]++;
  this.opcode("append");
}), hash: (function (hash) {
  _$jscoverage['handlebars/handlebars.js'][1021]++;
  var pairs = hash.pairs, pair, val;
  _$jscoverage['handlebars/handlebars.js'][1023]++;
  this.opcode("pushHash");
  _$jscoverage['handlebars/handlebars.js'][1025]++;
  for (var i = 0, l = pairs.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][1026]++;
    pair = pairs[i];
    _$jscoverage['handlebars/handlebars.js'][1027]++;
    val = pair[1];
    _$jscoverage['handlebars/handlebars.js'][1029]++;
    if (this.options.stringParams) {
      _$jscoverage['handlebars/handlebars.js'][1030]++;
      this.opcode("pushStringParam", val.stringModeValue, val.type);
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1032]++;
      this.accept(val);
    }
    _$jscoverage['handlebars/handlebars.js'][1035]++;
    this.opcode("assignToHash", pair[0]);
}
  _$jscoverage['handlebars/handlebars.js'][1037]++;
  this.opcode("popHash");
}), partial: (function (partial) {
  _$jscoverage['handlebars/handlebars.js'][1041]++;
  var partialName = partial.partialName;
  _$jscoverage['handlebars/handlebars.js'][1042]++;
  this.usePartial = true;
  _$jscoverage['handlebars/handlebars.js'][1044]++;
  if (partial.context) {
    _$jscoverage['handlebars/handlebars.js'][1045]++;
    this.ID(partial.context);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1047]++;
    this.opcode("push", "depth0");
  }
  _$jscoverage['handlebars/handlebars.js'][1050]++;
  this.opcode("invokePartial", partialName.name);
  _$jscoverage['handlebars/handlebars.js'][1051]++;
  this.opcode("append");
}), content: (function (content) {
  _$jscoverage['handlebars/handlebars.js'][1055]++;
  this.opcode("appendContent", content.string);
}), mustache: (function (mustache) {
  _$jscoverage['handlebars/handlebars.js'][1059]++;
  var options = this.options;
  _$jscoverage['handlebars/handlebars.js'][1060]++;
  var type = this.classifyMustache(mustache);
  _$jscoverage['handlebars/handlebars.js'][1062]++;
  if ((type === "simple")) {
    _$jscoverage['handlebars/handlebars.js'][1063]++;
    this.simpleMustache(mustache);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1064]++;
    if ((type === "helper")) {
      _$jscoverage['handlebars/handlebars.js'][1065]++;
      this.helperMustache(mustache);
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1067]++;
      this.ambiguousMustache(mustache);
    }
  }
  _$jscoverage['handlebars/handlebars.js'][1070]++;
  if ((mustache.escaped && (! options.noEscape))) {
    _$jscoverage['handlebars/handlebars.js'][1071]++;
    this.opcode("appendEscaped");
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1073]++;
    this.opcode("append");
  }
}), ambiguousMustache: (function (mustache, program, inverse) {
  _$jscoverage['handlebars/handlebars.js'][1078]++;
  var id = mustache.id, name = id.parts[0], isBlock = ((program != null) || (inverse != null));
  _$jscoverage['handlebars/handlebars.js'][1082]++;
  this.opcode("getContext", id.depth);
  _$jscoverage['handlebars/handlebars.js'][1084]++;
  this.opcode("pushProgram", program);
  _$jscoverage['handlebars/handlebars.js'][1085]++;
  this.opcode("pushProgram", inverse);
  _$jscoverage['handlebars/handlebars.js'][1087]++;
  this.opcode("invokeAmbiguous", name, isBlock);
}), simpleMustache: (function (mustache) {
  _$jscoverage['handlebars/handlebars.js'][1091]++;
  var id = mustache.id;
  _$jscoverage['handlebars/handlebars.js'][1093]++;
  if ((id.type === "DATA")) {
    _$jscoverage['handlebars/handlebars.js'][1094]++;
    this.DATA(id);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1095]++;
    if (id.parts.length) {
      _$jscoverage['handlebars/handlebars.js'][1096]++;
      this.ID(id);
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1099]++;
      this.addDepth(id.depth);
      _$jscoverage['handlebars/handlebars.js'][1100]++;
      this.opcode("getContext", id.depth);
      _$jscoverage['handlebars/handlebars.js'][1101]++;
      this.opcode("pushContext");
    }
  }
  _$jscoverage['handlebars/handlebars.js'][1104]++;
  this.opcode("resolvePossibleLambda");
}), helperMustache: (function (mustache, program, inverse) {
  _$jscoverage['handlebars/handlebars.js'][1108]++;
  var params = this.setupFullMustacheParams(mustache, program, inverse), name = mustache.id.parts[0];
  _$jscoverage['handlebars/handlebars.js'][1111]++;
  if (this.options.knownHelpers[name]) {
    _$jscoverage['handlebars/handlebars.js'][1112]++;
    this.opcode("invokeKnownHelper", params.length, name);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1113]++;
    if (this.knownHelpersOnly) {
      _$jscoverage['handlebars/handlebars.js'][1114]++;
      throw new Error(("You specified knownHelpersOnly, but used the unknown helper " + name));
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1116]++;
      this.opcode("invokeHelper", params.length, name);
    }
  }
}), ID: (function (id) {
  _$jscoverage['handlebars/handlebars.js'][1121]++;
  this.addDepth(id.depth);
  _$jscoverage['handlebars/handlebars.js'][1122]++;
  this.opcode("getContext", id.depth);
  _$jscoverage['handlebars/handlebars.js'][1124]++;
  var name = id.parts[0];
  _$jscoverage['handlebars/handlebars.js'][1125]++;
  if ((! name)) {
    _$jscoverage['handlebars/handlebars.js'][1126]++;
    this.opcode("pushContext");
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1128]++;
    this.opcode("lookupOnContext", id.parts[0]);
  }
  _$jscoverage['handlebars/handlebars.js'][1131]++;
  for (var i = 1, l = id.parts.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][1132]++;
    this.opcode("lookup", id.parts[i]);
}
}), DATA: (function (data) {
  _$jscoverage['handlebars/handlebars.js'][1137]++;
  this.options.data = true;
  _$jscoverage['handlebars/handlebars.js'][1138]++;
  this.opcode("lookupData", data.id);
}), STRING: (function (string) {
  _$jscoverage['handlebars/handlebars.js'][1142]++;
  this.opcode("pushString", string.string);
}), INTEGER: (function (integer) {
  _$jscoverage['handlebars/handlebars.js'][1146]++;
  this.opcode("pushLiteral", integer.integer);
}), BOOLEAN: (function (bool) {
  _$jscoverage['handlebars/handlebars.js'][1150]++;
  this.opcode("pushLiteral", bool.bool);
}), comment: (function () {
}), opcode: (function (name) {
  _$jscoverage['handlebars/handlebars.js'][1157]++;
  this.opcodes.push({opcode: name, args: [].slice.call(arguments, 1)});
}), declare: (function (name, value) {
  _$jscoverage['handlebars/handlebars.js'][1161]++;
  this.opcodes.push({opcode: "DECLARE", name: name, value: value});
}), addDepth: (function (depth) {
  _$jscoverage['handlebars/handlebars.js'][1165]++;
  if (isNaN(depth)) {
    _$jscoverage['handlebars/handlebars.js'][1165]++;
    throw new Error("EWOT");
  }
  _$jscoverage['handlebars/handlebars.js'][1166]++;
  if ((depth === 0)) {
    _$jscoverage['handlebars/handlebars.js'][1166]++;
    return;
  }
  _$jscoverage['handlebars/handlebars.js'][1168]++;
  if ((! this.depths[depth])) {
    _$jscoverage['handlebars/handlebars.js'][1169]++;
    this.depths[depth] = true;
    _$jscoverage['handlebars/handlebars.js'][1170]++;
    this.depths.list.push(depth);
  }
}), classifyMustache: (function (mustache) {
  _$jscoverage['handlebars/handlebars.js'][1175]++;
  var isHelper = mustache.isHelper;
  _$jscoverage['handlebars/handlebars.js'][1176]++;
  var isEligible = mustache.eligibleHelper;
  _$jscoverage['handlebars/handlebars.js'][1177]++;
  var options = this.options;
  _$jscoverage['handlebars/handlebars.js'][1180]++;
  if ((isEligible && (! isHelper))) {
    _$jscoverage['handlebars/handlebars.js'][1181]++;
    var name = mustache.id.parts[0];
    _$jscoverage['handlebars/handlebars.js'][1183]++;
    if (options.knownHelpers[name]) {
      _$jscoverage['handlebars/handlebars.js'][1184]++;
      isHelper = true;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1185]++;
      if (options.knownHelpersOnly) {
        _$jscoverage['handlebars/handlebars.js'][1186]++;
        isEligible = false;
      }
    }
  }
  _$jscoverage['handlebars/handlebars.js'][1190]++;
  if (isHelper) {
    _$jscoverage['handlebars/handlebars.js'][1190]++;
    return "helper";
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1191]++;
    if (isEligible) {
      _$jscoverage['handlebars/handlebars.js'][1191]++;
      return "ambiguous";
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1192]++;
      return "simple";
    }
  }
}), pushParams: (function (params) {
  _$jscoverage['handlebars/handlebars.js'][1196]++;
  var i = params.length, param;
  _$jscoverage['handlebars/handlebars.js'][1198]++;
  while ((i--)) {
    _$jscoverage['handlebars/handlebars.js'][1199]++;
    param = params[i];
    _$jscoverage['handlebars/handlebars.js'][1201]++;
    if (this.options.stringParams) {
      _$jscoverage['handlebars/handlebars.js'][1202]++;
      if (param.depth) {
        _$jscoverage['handlebars/handlebars.js'][1203]++;
        this.addDepth(param.depth);
      }
      _$jscoverage['handlebars/handlebars.js'][1206]++;
      this.opcode("getContext", (param.depth || 0));
      _$jscoverage['handlebars/handlebars.js'][1207]++;
      this.opcode("pushStringParam", param.stringModeValue, param.type);
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1209]++;
      (this[param.type])(param);
    }
}
}), setupMustacheParams: (function (mustache) {
  _$jscoverage['handlebars/handlebars.js'][1215]++;
  var params = mustache.params;
  _$jscoverage['handlebars/handlebars.js'][1216]++;
  this.pushParams(params);
  _$jscoverage['handlebars/handlebars.js'][1218]++;
  if (mustache.hash) {
    _$jscoverage['handlebars/handlebars.js'][1219]++;
    this.hash(mustache.hash);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1221]++;
    this.opcode("emptyHash");
  }
  _$jscoverage['handlebars/handlebars.js'][1224]++;
  return params;
}), setupFullMustacheParams: (function (mustache, program, inverse) {
  _$jscoverage['handlebars/handlebars.js'][1229]++;
  var params = mustache.params;
  _$jscoverage['handlebars/handlebars.js'][1230]++;
  this.pushParams(params);
  _$jscoverage['handlebars/handlebars.js'][1232]++;
  this.opcode("pushProgram", program);
  _$jscoverage['handlebars/handlebars.js'][1233]++;
  this.opcode("pushProgram", inverse);
  _$jscoverage['handlebars/handlebars.js'][1235]++;
  if (mustache.hash) {
    _$jscoverage['handlebars/handlebars.js'][1236]++;
    this.hash(mustache.hash);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1238]++;
    this.opcode("emptyHash");
  }
  _$jscoverage['handlebars/handlebars.js'][1241]++;
  return params;
})};
  _$jscoverage['handlebars/handlebars.js'][1245]++;
  var Literal = (function (value) {
  _$jscoverage['handlebars/handlebars.js'][1246]++;
  this.value = value;
});
  _$jscoverage['handlebars/handlebars.js'][1249]++;
  JavaScriptCompiler.prototype = {nameLookup: (function (parent, name) {
  _$jscoverage['handlebars/handlebars.js'][1253]++;
  if (/^[0-9]+$/.test(name)) {
    _$jscoverage['handlebars/handlebars.js'][1254]++;
    return (parent + "[" + name + "]");
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1255]++;
    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
      _$jscoverage['handlebars/handlebars.js'][1256]++;
      return (parent + "." + name);
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1259]++;
      return (parent + "['" + name + "']");
    }
  }
}), appendToBuffer: (function (string) {
  _$jscoverage['handlebars/handlebars.js'][1264]++;
  if (this.environment.isSimple) {
    _$jscoverage['handlebars/handlebars.js'][1265]++;
    return ("return " + string + ";");
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1267]++;
    return ({appendToBuffer: true, content: string, toString: (function () {
  _$jscoverage['handlebars/handlebars.js'][1270]++;
  return ("buffer += " + string + ";");
})});
  }
}), initializeBuffer: (function () {
  _$jscoverage['handlebars/handlebars.js'][1276]++;
  return this.quotedString("");
}), namespace: "Handlebars", compile: (function (environment, options, context, asObject) {
  _$jscoverage['handlebars/handlebars.js'][1283]++;
  this.environment = environment;
  _$jscoverage['handlebars/handlebars.js'][1284]++;
  this.options = (options || {});
  _$jscoverage['handlebars/handlebars.js'][1286]++;
  Handlebars.log(Handlebars.logger.DEBUG, (this.environment.disassemble() + "\n\n"));
  _$jscoverage['handlebars/handlebars.js'][1288]++;
  this.name = this.environment.name;
  _$jscoverage['handlebars/handlebars.js'][1289]++;
  this.isChild = (! (! context));
  _$jscoverage['handlebars/handlebars.js'][1290]++;
  this.context = (context || {programs: [], environments: [], aliases: {}});
  _$jscoverage['handlebars/handlebars.js'][1296]++;
  this.preamble();
  _$jscoverage['handlebars/handlebars.js'][1298]++;
  this.stackSlot = 0;
  _$jscoverage['handlebars/handlebars.js'][1299]++;
  this.stackVars = [];
  _$jscoverage['handlebars/handlebars.js'][1300]++;
  this.registers = {list: []};
  _$jscoverage['handlebars/handlebars.js'][1301]++;
  this.compileStack = [];
  _$jscoverage['handlebars/handlebars.js'][1302]++;
  this.inlineStack = [];
  _$jscoverage['handlebars/handlebars.js'][1304]++;
  this.compileChildren(environment, options);
  _$jscoverage['handlebars/handlebars.js'][1306]++;
  var opcodes = environment.opcodes, opcode;
  _$jscoverage['handlebars/handlebars.js'][1308]++;
  this.i = 0;
  _$jscoverage['handlebars/handlebars.js'][1310]++;
  for (l = opcodes.length; (this.i < l); (this.i++)) {
    _$jscoverage['handlebars/handlebars.js'][1311]++;
    opcode = opcodes[this.i];
    _$jscoverage['handlebars/handlebars.js'][1313]++;
    if ((opcode.opcode === "DECLARE")) {
      _$jscoverage['handlebars/handlebars.js'][1314]++;
      this[opcode.name] = opcode.value;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1316]++;
      this[opcode.opcode].apply(this, opcode.args);
    }
}
  _$jscoverage['handlebars/handlebars.js'][1320]++;
  return this.createFunctionContext(asObject);
}), nextOpcode: (function () {
  _$jscoverage['handlebars/handlebars.js'][1324]++;
  var opcodes = this.environment.opcodes;
  _$jscoverage['handlebars/handlebars.js'][1325]++;
  return opcodes[(this.i + 1)];
}), eat: (function () {
  _$jscoverage['handlebars/handlebars.js'][1329]++;
  this.i = (this.i + 1);
}), preamble: (function () {
  _$jscoverage['handlebars/handlebars.js'][1333]++;
  var out = [];
  _$jscoverage['handlebars/handlebars.js'][1335]++;
  if ((! this.isChild)) {
    _$jscoverage['handlebars/handlebars.js'][1336]++;
    var namespace = this.namespace;
    _$jscoverage['handlebars/handlebars.js'][1337]++;
    var copies = ("helpers = helpers || " + namespace + ".helpers;");
    _$jscoverage['handlebars/handlebars.js'][1338]++;
    if (this.environment.usePartial) {
      _$jscoverage['handlebars/handlebars.js'][1338]++;
      copies = (copies + " partials = partials || " + namespace + ".partials;");
    }
    _$jscoverage['handlebars/handlebars.js'][1339]++;
    if (this.options.data) {
      _$jscoverage['handlebars/handlebars.js'][1339]++;
      copies = (copies + " data = data || {};");
    }
    _$jscoverage['handlebars/handlebars.js'][1340]++;
    out.push(copies);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1342]++;
    out.push("");
  }
  _$jscoverage['handlebars/handlebars.js'][1345]++;
  if ((! this.environment.isSimple)) {
    _$jscoverage['handlebars/handlebars.js'][1346]++;
    out.push((", buffer = " + this.initializeBuffer()));
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1348]++;
    out.push("");
  }
  _$jscoverage['handlebars/handlebars.js'][1353]++;
  this.lastContext = 0;
  _$jscoverage['handlebars/handlebars.js'][1354]++;
  this.source = out;
}), createFunctionContext: (function (asObject) {
  _$jscoverage['handlebars/handlebars.js'][1358]++;
  var locals = this.stackVars.concat(this.registers.list);
  _$jscoverage['handlebars/handlebars.js'][1360]++;
  if ((locals.length > 0)) {
    _$jscoverage['handlebars/handlebars.js'][1361]++;
    this.source[1] = (this.source[1] + ", " + locals.join(", "));
  }
  _$jscoverage['handlebars/handlebars.js'][1365]++;
  if ((! this.isChild)) {
    _$jscoverage['handlebars/handlebars.js'][1366]++;
    for (var alias in this.context.aliases) {
      _$jscoverage['handlebars/handlebars.js'][1367]++;
      this.source[1] = (this.source[1] + ", " + alias + "=" + this.context.aliases[alias]);
}
  }
  _$jscoverage['handlebars/handlebars.js'][1371]++;
  if (this.source[1]) {
    _$jscoverage['handlebars/handlebars.js'][1372]++;
    this.source[1] = ("var " + this.source[1].substring(2) + ";");
  }
  _$jscoverage['handlebars/handlebars.js'][1376]++;
  if ((! this.isChild)) {
    _$jscoverage['handlebars/handlebars.js'][1377]++;
    this.source[1] += ("\n" + this.context.programs.join("\n") + "\n");
  }
  _$jscoverage['handlebars/handlebars.js'][1380]++;
  if ((! this.environment.isSimple)) {
    _$jscoverage['handlebars/handlebars.js'][1381]++;
    this.source.push("return buffer;");
  }
  _$jscoverage['handlebars/handlebars.js'][1384]++;
  var params = (this.isChild? ["depth0", "data"]: ["Handlebars", "depth0", "helpers", "partials", "data"]);
  _$jscoverage['handlebars/handlebars.js'][1386]++;
  for (var i = 0, l = this.environment.depths.list.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][1387]++;
    params.push(("depth" + this.environment.depths.list[i]));
}
  _$jscoverage['handlebars/handlebars.js'][1391]++;
  var source = this.mergeSource();
  _$jscoverage['handlebars/handlebars.js'][1393]++;
  if ((! this.isChild)) {
    _$jscoverage['handlebars/handlebars.js'][1394]++;
    var revision = Handlebars.COMPILER_REVISION, versions = Handlebars.REVISION_CHANGES[revision];
    _$jscoverage['handlebars/handlebars.js'][1396]++;
    source = ("this.compilerInfo = [" + revision + ",'" + versions + "'];\n" + source);
  }
  _$jscoverage['handlebars/handlebars.js'][1399]++;
  if (asObject) {
    _$jscoverage['handlebars/handlebars.js'][1400]++;
    params.push(source);
    _$jscoverage['handlebars/handlebars.js'][1402]++;
    return Function.apply(this, params);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1404]++;
    var functionSource = ("function " + (this.name || "") + "(" + params.join(",") + ") {\n  " + source + "}");
    _$jscoverage['handlebars/handlebars.js'][1405]++;
    Handlebars.log(Handlebars.logger.DEBUG, (functionSource + "\n\n"));
    _$jscoverage['handlebars/handlebars.js'][1406]++;
    return functionSource;
  }
}), mergeSource: (function () {
  _$jscoverage['handlebars/handlebars.js'][1412]++;
  var source = "", buffer;
  _$jscoverage['handlebars/handlebars.js'][1414]++;
  for (var i = 0, len = this.source.length; (i < len); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][1415]++;
    var line = this.source[i];
    _$jscoverage['handlebars/handlebars.js'][1416]++;
    if (line.appendToBuffer) {
      _$jscoverage['handlebars/handlebars.js'][1417]++;
      if (buffer) {
        _$jscoverage['handlebars/handlebars.js'][1418]++;
        buffer = (buffer + "\n    + " + line.content);
      }
      else {
        _$jscoverage['handlebars/handlebars.js'][1420]++;
        buffer = line.content;
      }
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1423]++;
      if (buffer) {
        _$jscoverage['handlebars/handlebars.js'][1424]++;
        source += ("buffer += " + buffer + ";\n  ");
        _$jscoverage['handlebars/handlebars.js'][1425]++;
        buffer = undefined;
      }
      _$jscoverage['handlebars/handlebars.js'][1427]++;
      source += (line + "\n  ");
    }
}
  _$jscoverage['handlebars/handlebars.js'][1430]++;
  return source;
}), blockValue: (function () {
  _$jscoverage['handlebars/handlebars.js'][1443]++;
  this.context.aliases.blockHelperMissing = "helpers.blockHelperMissing";
  _$jscoverage['handlebars/handlebars.js'][1445]++;
  var params = ["depth0"];
  _$jscoverage['handlebars/handlebars.js'][1446]++;
  this.setupParams(0, params);
  _$jscoverage['handlebars/handlebars.js'][1448]++;
  this.replaceStack((function (current) {
  _$jscoverage['handlebars/handlebars.js'][1449]++;
  params.splice(1, 0, current);
  _$jscoverage['handlebars/handlebars.js'][1450]++;
  return ("blockHelperMissing.call(" + params.join(", ") + ")");
}));
}), ambiguousBlockValue: (function () {
  _$jscoverage['handlebars/handlebars.js'][1461]++;
  this.context.aliases.blockHelperMissing = "helpers.blockHelperMissing";
  _$jscoverage['handlebars/handlebars.js'][1463]++;
  var params = ["depth0"];
  _$jscoverage['handlebars/handlebars.js'][1464]++;
  this.setupParams(0, params);
  _$jscoverage['handlebars/handlebars.js'][1466]++;
  var current = this.topStack();
  _$jscoverage['handlebars/handlebars.js'][1467]++;
  params.splice(1, 0, current);
  _$jscoverage['handlebars/handlebars.js'][1470]++;
  params[(params.length - 1)] = "options";
  _$jscoverage['handlebars/handlebars.js'][1472]++;
  this.source.push(("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }"));
}), appendContent: (function (content) {
  _$jscoverage['handlebars/handlebars.js'][1482]++;
  this.source.push(this.appendToBuffer(this.quotedString(content)));
}), append: (function () {
  _$jscoverage['handlebars/handlebars.js'][1497]++;
  this.flushInline();
  _$jscoverage['handlebars/handlebars.js'][1498]++;
  var local = this.popStack();
  _$jscoverage['handlebars/handlebars.js'][1499]++;
  this.source.push(("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }"));
  _$jscoverage['handlebars/handlebars.js'][1500]++;
  if (this.environment.isSimple) {
    _$jscoverage['handlebars/handlebars.js'][1501]++;
    this.source.push(("else { " + this.appendToBuffer("''") + " }"));
  }
}), appendEscaped: (function () {
  _$jscoverage['handlebars/handlebars.js'][1512]++;
  this.context.aliases.escapeExpression = "this.escapeExpression";
  _$jscoverage['handlebars/handlebars.js'][1514]++;
  this.source.push(this.appendToBuffer(("escapeExpression(" + this.popStack() + ")")));
}), getContext: (function (depth) {
  _$jscoverage['handlebars/handlebars.js'][1525]++;
  if ((this.lastContext !== depth)) {
    _$jscoverage['handlebars/handlebars.js'][1526]++;
    this.lastContext = depth;
  }
}), lookupOnContext: (function (name) {
  _$jscoverage['handlebars/handlebars.js'][1538]++;
  this.push(this.nameLookup(("depth" + this.lastContext), name, "context"));
}), pushContext: (function () {
  _$jscoverage['handlebars/handlebars.js'][1548]++;
  this.pushStackLiteral(("depth" + this.lastContext));
}), resolvePossibleLambda: (function () {
  _$jscoverage['handlebars/handlebars.js'][1559]++;
  this.context.aliases.functionType = "\"function\"";
  _$jscoverage['handlebars/handlebars.js'][1561]++;
  this.replaceStack((function (current) {
  _$jscoverage['handlebars/handlebars.js'][1562]++;
  return ("typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current);
}));
}), lookup: (function (name) {
  _$jscoverage['handlebars/handlebars.js'][1574]++;
  this.replaceStack((function (current) {
  _$jscoverage['handlebars/handlebars.js'][1575]++;
  return (current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, "context"));
}));
}), lookupData: (function (id) {
  _$jscoverage['handlebars/handlebars.js'][1586]++;
  this.push(this.nameLookup("data", id, "data"));
}), pushStringParam: (function (string, type) {
  _$jscoverage['handlebars/handlebars.js'][1598]++;
  this.pushStackLiteral(("depth" + this.lastContext));
  _$jscoverage['handlebars/handlebars.js'][1600]++;
  this.pushString(type);
  _$jscoverage['handlebars/handlebars.js'][1602]++;
  if (((typeof string) === "string")) {
    _$jscoverage['handlebars/handlebars.js'][1603]++;
    this.pushString(string);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1605]++;
    this.pushStackLiteral(string);
  }
}), emptyHash: (function () {
  _$jscoverage['handlebars/handlebars.js'][1610]++;
  this.pushStackLiteral("{}");
  _$jscoverage['handlebars/handlebars.js'][1612]++;
  if (this.options.stringParams) {
    _$jscoverage['handlebars/handlebars.js'][1613]++;
    this.register("hashTypes", "{}");
  }
}), pushHash: (function () {
  _$jscoverage['handlebars/handlebars.js'][1617]++;
  this.hash = {values: [], types: []};
}), popHash: (function () {
  _$jscoverage['handlebars/handlebars.js'][1620]++;
  var hash = this.hash;
  _$jscoverage['handlebars/handlebars.js'][1621]++;
  this.hash = undefined;
  _$jscoverage['handlebars/handlebars.js'][1623]++;
  if (this.options.stringParams) {
    _$jscoverage['handlebars/handlebars.js'][1624]++;
    this.register("hashTypes", ("{" + hash.types.join(",") + "}"));
  }
  _$jscoverage['handlebars/handlebars.js'][1626]++;
  this.push(("{\n    " + hash.values.join(",\n    ") + "\n  }"));
}), pushString: (function (string) {
  _$jscoverage['handlebars/handlebars.js'][1636]++;
  this.pushStackLiteral(this.quotedString(string));
}), push: (function (expr) {
  _$jscoverage['handlebars/handlebars.js'][1646]++;
  this.inlineStack.push(expr);
  _$jscoverage['handlebars/handlebars.js'][1647]++;
  return expr;
}), pushLiteral: (function (value) {
  _$jscoverage['handlebars/handlebars.js'][1659]++;
  this.pushStackLiteral(value);
}), pushProgram: (function (guid) {
  _$jscoverage['handlebars/handlebars.js'][1671]++;
  if ((guid != null)) {
    _$jscoverage['handlebars/handlebars.js'][1672]++;
    this.pushStackLiteral(this.programExpression(guid));
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1674]++;
    this.pushStackLiteral(null);
  }
}), invokeHelper: (function (paramSize, name) {
  _$jscoverage['handlebars/handlebars.js'][1688]++;
  this.context.aliases.helperMissing = "helpers.helperMissing";
  _$jscoverage['handlebars/handlebars.js'][1690]++;
  var helper = (this.lastHelper = this.setupHelper(paramSize, name, true));
  _$jscoverage['handlebars/handlebars.js'][1692]++;
  this.push(helper.name);
  _$jscoverage['handlebars/handlebars.js'][1693]++;
  this.replaceStack((function (name) {
  _$jscoverage['handlebars/handlebars.js'][1694]++;
  return (name + " ? " + name + ".call(" + helper.callParams + ") " + ": helperMissing.call(" + helper.helperMissingParams + ")");
}));
}), invokeKnownHelper: (function (paramSize, name) {
  _$jscoverage['handlebars/handlebars.js'][1708]++;
  var helper = this.setupHelper(paramSize, name);
  _$jscoverage['handlebars/handlebars.js'][1709]++;
  this.push((helper.name + ".call(" + helper.callParams + ")"));
}), invokeAmbiguous: (function (name, helperCall) {
  _$jscoverage['handlebars/handlebars.js'][1725]++;
  this.context.aliases.functionType = "\"function\"";
  _$jscoverage['handlebars/handlebars.js'][1727]++;
  this.pushStackLiteral("{}");
  _$jscoverage['handlebars/handlebars.js'][1728]++;
  var helper = this.setupHelper(0, name, helperCall);
  _$jscoverage['handlebars/handlebars.js'][1730]++;
  var helperName = (this.lastHelper = this.nameLookup("helpers", name, "helper"));
  _$jscoverage['handlebars/handlebars.js'][1732]++;
  var nonHelper = this.nameLookup(("depth" + this.lastContext), name, "context");
  _$jscoverage['handlebars/handlebars.js'][1733]++;
  var nextStack = this.nextStack();
  _$jscoverage['handlebars/handlebars.js'][1735]++;
  this.source.push(("if (" + nextStack + " = " + helperName + ") { " + nextStack + " = " + nextStack + ".call(" + helper.callParams + "); }"));
  _$jscoverage['handlebars/handlebars.js'][1736]++;
  this.source.push(("else { " + nextStack + " = " + nonHelper + "; " + nextStack + " = typeof " + nextStack + " === functionType ? " + nextStack + ".apply(depth0) : " + nextStack + "; }"));
}), invokePartial: (function (name) {
  _$jscoverage['handlebars/handlebars.js'][1747]++;
  var params = [this.nameLookup("partials", name, "partial"), ("'" + name + "'"), this.popStack(), "helpers", "partials"];
  _$jscoverage['handlebars/handlebars.js'][1749]++;
  if (this.options.data) {
    _$jscoverage['handlebars/handlebars.js'][1750]++;
    params.push("data");
  }
  _$jscoverage['handlebars/handlebars.js'][1753]++;
  this.context.aliases.self = "this";
  _$jscoverage['handlebars/handlebars.js'][1754]++;
  this.push(("self.invokePartial(" + params.join(", ") + ")"));
}), assignToHash: (function (key) {
  _$jscoverage['handlebars/handlebars.js'][1765]++;
  var value = this.popStack(), type;
  _$jscoverage['handlebars/handlebars.js'][1768]++;
  if (this.options.stringParams) {
    _$jscoverage['handlebars/handlebars.js'][1769]++;
    type = this.popStack();
    _$jscoverage['handlebars/handlebars.js'][1770]++;
    this.popStack();
  }
  _$jscoverage['handlebars/handlebars.js'][1773]++;
  var hash = this.hash;
  _$jscoverage['handlebars/handlebars.js'][1774]++;
  if (type) {
    _$jscoverage['handlebars/handlebars.js'][1775]++;
    hash.types.push(("'" + key + "': " + type));
  }
  _$jscoverage['handlebars/handlebars.js'][1777]++;
  hash.values.push(("'" + key + "': (" + value + ")"));
}), compiler: JavaScriptCompiler, compileChildren: (function (environment, options) {
  _$jscoverage['handlebars/handlebars.js'][1785]++;
  var children = environment.children, child, compiler;
  _$jscoverage['handlebars/handlebars.js'][1787]++;
  for (var i = 0, l = children.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][1788]++;
    child = children[i];
    _$jscoverage['handlebars/handlebars.js'][1789]++;
    compiler = new (this.compiler)();
    _$jscoverage['handlebars/handlebars.js'][1791]++;
    var index = this.matchExistingProgram(child);
    _$jscoverage['handlebars/handlebars.js'][1793]++;
    if ((index == null)) {
      _$jscoverage['handlebars/handlebars.js'][1794]++;
      this.context.programs.push("");
      _$jscoverage['handlebars/handlebars.js'][1795]++;
      index = this.context.programs.length;
      _$jscoverage['handlebars/handlebars.js'][1796]++;
      child.index = index;
      _$jscoverage['handlebars/handlebars.js'][1797]++;
      child.name = ("program" + index);
      _$jscoverage['handlebars/handlebars.js'][1798]++;
      this.context.programs[index] = compiler.compile(child, options, this.context);
      _$jscoverage['handlebars/handlebars.js'][1799]++;
      this.context.environments[index] = child;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1801]++;
      child.index = index;
      _$jscoverage['handlebars/handlebars.js'][1802]++;
      child.name = ("program" + index);
    }
}
}), matchExistingProgram: (function (child) {
  _$jscoverage['handlebars/handlebars.js'][1807]++;
  for (var i = 0, len = this.context.environments.length; (i < len); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][1808]++;
    var environment = this.context.environments[i];
    _$jscoverage['handlebars/handlebars.js'][1809]++;
    if ((environment && environment.equals(child))) {
      _$jscoverage['handlebars/handlebars.js'][1810]++;
      return i;
    }
}
}), programExpression: (function (guid) {
  _$jscoverage['handlebars/handlebars.js'][1816]++;
  this.context.aliases.self = "this";
  _$jscoverage['handlebars/handlebars.js'][1818]++;
  if ((guid == null)) {
    _$jscoverage['handlebars/handlebars.js'][1819]++;
    return "self.noop";
  }
  _$jscoverage['handlebars/handlebars.js'][1822]++;
  var child = this.environment.children[guid], depths = child.depths.list, depth;
  _$jscoverage['handlebars/handlebars.js'][1825]++;
  var programParams = [child.index, child.name, "data"];
  _$jscoverage['handlebars/handlebars.js'][1827]++;
  for (var i = 0, l = depths.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][1828]++;
    depth = depths[i];
    _$jscoverage['handlebars/handlebars.js'][1830]++;
    if ((depth === 1)) {
      _$jscoverage['handlebars/handlebars.js'][1830]++;
      programParams.push("depth0");
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1831]++;
      programParams.push(("depth" + (depth - 1)));
    }
}
  _$jscoverage['handlebars/handlebars.js'][1834]++;
  if ((depths.length === 0)) {
    _$jscoverage['handlebars/handlebars.js'][1835]++;
    return ("self.program(" + programParams.join(", ") + ")");
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1837]++;
    programParams.shift();
    _$jscoverage['handlebars/handlebars.js'][1838]++;
    return ("self.programWithDepth(" + programParams.join(", ") + ")");
  }
}), register: (function (name, val) {
  _$jscoverage['handlebars/handlebars.js'][1843]++;
  this.useRegister(name);
  _$jscoverage['handlebars/handlebars.js'][1844]++;
  this.source.push((name + " = " + val + ";"));
}), useRegister: (function (name) {
  _$jscoverage['handlebars/handlebars.js'][1848]++;
  if ((! this.registers[name])) {
    _$jscoverage['handlebars/handlebars.js'][1849]++;
    this.registers[name] = true;
    _$jscoverage['handlebars/handlebars.js'][1850]++;
    this.registers.list.push(name);
  }
}), pushStackLiteral: (function (item) {
  _$jscoverage['handlebars/handlebars.js'][1855]++;
  return this.push(new Literal(item));
}), pushStack: (function (item) {
  _$jscoverage['handlebars/handlebars.js'][1859]++;
  this.flushInline();
  _$jscoverage['handlebars/handlebars.js'][1861]++;
  var stack = this.incrStack();
  _$jscoverage['handlebars/handlebars.js'][1862]++;
  if (item) {
    _$jscoverage['handlebars/handlebars.js'][1863]++;
    this.source.push((stack + " = " + item + ";"));
  }
  _$jscoverage['handlebars/handlebars.js'][1865]++;
  this.compileStack.push(stack);
  _$jscoverage['handlebars/handlebars.js'][1866]++;
  return stack;
}), replaceStack: (function (callback) {
  _$jscoverage['handlebars/handlebars.js'][1870]++;
  var prefix = "", inline = this.isInline(), stack;
  _$jscoverage['handlebars/handlebars.js'][1876]++;
  if (inline) {
    _$jscoverage['handlebars/handlebars.js'][1877]++;
    var top = this.popStack(true);
    _$jscoverage['handlebars/handlebars.js'][1879]++;
    if ((top instanceof Literal)) {
      _$jscoverage['handlebars/handlebars.js'][1881]++;
      stack = top.value;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][1884]++;
      var name = (this.stackSlot? this.topStackName(): this.incrStack());
      _$jscoverage['handlebars/handlebars.js'][1886]++;
      prefix = ("(" + this.push(name) + " = " + top + "),");
      _$jscoverage['handlebars/handlebars.js'][1887]++;
      stack = this.topStack();
    }
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1890]++;
    stack = this.topStack();
  }
  _$jscoverage['handlebars/handlebars.js'][1893]++;
  var item = callback.call(this, stack);
  _$jscoverage['handlebars/handlebars.js'][1895]++;
  if (inline) {
    _$jscoverage['handlebars/handlebars.js'][1896]++;
    if ((this.inlineStack.length || this.compileStack.length)) {
      _$jscoverage['handlebars/handlebars.js'][1897]++;
      this.popStack();
    }
    _$jscoverage['handlebars/handlebars.js'][1899]++;
    this.push(("(" + prefix + item + ")"));
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1902]++;
    if ((! /^stack/.test(stack))) {
      _$jscoverage['handlebars/handlebars.js'][1903]++;
      stack = this.nextStack();
    }
    _$jscoverage['handlebars/handlebars.js'][1906]++;
    this.source.push((stack + " = (" + prefix + item + ");"));
  }
  _$jscoverage['handlebars/handlebars.js'][1908]++;
  return stack;
}), nextStack: (function () {
  _$jscoverage['handlebars/handlebars.js'][1912]++;
  return this.pushStack();
}), incrStack: (function () {
  _$jscoverage['handlebars/handlebars.js'][1916]++;
  (this.stackSlot++);
  _$jscoverage['handlebars/handlebars.js'][1917]++;
  if ((this.stackSlot > this.stackVars.length)) {
    _$jscoverage['handlebars/handlebars.js'][1917]++;
    this.stackVars.push(("stack" + this.stackSlot));
  }
  _$jscoverage['handlebars/handlebars.js'][1918]++;
  return this.topStackName();
}), topStackName: (function () {
  _$jscoverage['handlebars/handlebars.js'][1921]++;
  return ("stack" + this.stackSlot);
}), flushInline: (function () {
  _$jscoverage['handlebars/handlebars.js'][1924]++;
  var inlineStack = this.inlineStack;
  _$jscoverage['handlebars/handlebars.js'][1925]++;
  if (inlineStack.length) {
    _$jscoverage['handlebars/handlebars.js'][1926]++;
    this.inlineStack = [];
    _$jscoverage['handlebars/handlebars.js'][1927]++;
    for (var i = 0, len = inlineStack.length; (i < len); (i++)) {
      _$jscoverage['handlebars/handlebars.js'][1928]++;
      var entry = inlineStack[i];
      _$jscoverage['handlebars/handlebars.js'][1929]++;
      if ((entry instanceof Literal)) {
        _$jscoverage['handlebars/handlebars.js'][1930]++;
        this.compileStack.push(entry);
      }
      else {
        _$jscoverage['handlebars/handlebars.js'][1932]++;
        this.pushStack(entry);
      }
}
  }
}), isInline: (function () {
  _$jscoverage['handlebars/handlebars.js'][1938]++;
  return this.inlineStack.length;
}), popStack: (function (wrapped) {
  _$jscoverage['handlebars/handlebars.js'][1942]++;
  var inline = this.isInline(), item = (inline? this.inlineStack: this.compileStack).pop();
  _$jscoverage['handlebars/handlebars.js'][1945]++;
  if (((! wrapped) && (item instanceof Literal))) {
    _$jscoverage['handlebars/handlebars.js'][1946]++;
    return item.value;
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1948]++;
    if ((! inline)) {
      _$jscoverage['handlebars/handlebars.js'][1949]++;
      (this.stackSlot--);
    }
    _$jscoverage['handlebars/handlebars.js'][1951]++;
    return item;
  }
}), topStack: (function (wrapped) {
  _$jscoverage['handlebars/handlebars.js'][1956]++;
  var stack = (this.isInline()? this.inlineStack: this.compileStack), item = stack[(stack.length - 1)];
  _$jscoverage['handlebars/handlebars.js'][1959]++;
  if (((! wrapped) && (item instanceof Literal))) {
    _$jscoverage['handlebars/handlebars.js'][1960]++;
    return item.value;
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][1962]++;
    return item;
  }
}), quotedString: (function (str) {
  _$jscoverage['handlebars/handlebars.js'][1967]++;
  return ("\"" + str.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\n/g, "\\n").replace(/\r/g, "\\r") + "\"");
}), setupHelper: (function (paramSize, name, missingParams) {
  _$jscoverage['handlebars/handlebars.js'][1975]++;
  var params = [];
  _$jscoverage['handlebars/handlebars.js'][1976]++;
  this.setupParams(paramSize, params, missingParams);
  _$jscoverage['handlebars/handlebars.js'][1977]++;
  var foundHelper = this.nameLookup("helpers", name, "helper");
  _$jscoverage['handlebars/handlebars.js'][1979]++;
  return ({params: params, name: foundHelper, callParams: ["depth0"].concat(params).join(", "), helperMissingParams: (missingParams && ["depth0", this.quotedString(name)].concat(params).join(", "))});
}), setupParams: (function (paramSize, params, useRegister) {
  _$jscoverage['handlebars/handlebars.js'][1990]++;
  var options = [], contexts = [], types = [], param, inverse, program;
  _$jscoverage['handlebars/handlebars.js'][1992]++;
  options.push(("hash:" + this.popStack()));
  _$jscoverage['handlebars/handlebars.js'][1994]++;
  inverse = this.popStack();
  _$jscoverage['handlebars/handlebars.js'][1995]++;
  program = this.popStack();
  _$jscoverage['handlebars/handlebars.js'][1999]++;
  if ((program || inverse)) {
    _$jscoverage['handlebars/handlebars.js'][2000]++;
    if ((! program)) {
      _$jscoverage['handlebars/handlebars.js'][2001]++;
      this.context.aliases.self = "this";
      _$jscoverage['handlebars/handlebars.js'][2002]++;
      program = "self.noop";
    }
    _$jscoverage['handlebars/handlebars.js'][2005]++;
    if ((! inverse)) {
      _$jscoverage['handlebars/handlebars.js'][2006]++;
      this.context.aliases.self = "this";
      _$jscoverage['handlebars/handlebars.js'][2007]++;
      inverse = "self.noop";
    }
    _$jscoverage['handlebars/handlebars.js'][2010]++;
    options.push(("inverse:" + inverse));
    _$jscoverage['handlebars/handlebars.js'][2011]++;
    options.push(("fn:" + program));
  }
  _$jscoverage['handlebars/handlebars.js'][2014]++;
  for (var i = 0; (i < paramSize); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][2015]++;
    param = this.popStack();
    _$jscoverage['handlebars/handlebars.js'][2016]++;
    params.push(param);
    _$jscoverage['handlebars/handlebars.js'][2018]++;
    if (this.options.stringParams) {
      _$jscoverage['handlebars/handlebars.js'][2019]++;
      types.push(this.popStack());
      _$jscoverage['handlebars/handlebars.js'][2020]++;
      contexts.push(this.popStack());
    }
}
  _$jscoverage['handlebars/handlebars.js'][2024]++;
  if (this.options.stringParams) {
    _$jscoverage['handlebars/handlebars.js'][2025]++;
    options.push(("contexts:[" + contexts.join(",") + "]"));
    _$jscoverage['handlebars/handlebars.js'][2026]++;
    options.push(("types:[" + types.join(",") + "]"));
    _$jscoverage['handlebars/handlebars.js'][2027]++;
    options.push("hashTypes:hashTypes");
  }
  _$jscoverage['handlebars/handlebars.js'][2030]++;
  if (this.options.data) {
    _$jscoverage['handlebars/handlebars.js'][2031]++;
    options.push("data:data");
  }
  _$jscoverage['handlebars/handlebars.js'][2034]++;
  options = ("{" + options.join(",") + "}");
  _$jscoverage['handlebars/handlebars.js'][2035]++;
  if (useRegister) {
    _$jscoverage['handlebars/handlebars.js'][2036]++;
    this.register("options", options);
    _$jscoverage['handlebars/handlebars.js'][2037]++;
    params.push("options");
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][2039]++;
    params.push(options);
  }
  _$jscoverage['handlebars/handlebars.js'][2041]++;
  return params.join(", ");
})};
  _$jscoverage['handlebars/handlebars.js'][2045]++;
  var reservedWords = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" ");
  _$jscoverage['handlebars/handlebars.js'][2063]++;
  var compilerWords = (JavaScriptCompiler.RESERVED_WORDS = {});
  _$jscoverage['handlebars/handlebars.js'][2065]++;
  for (var i = 0, l = reservedWords.length; (i < l); (i++)) {
    _$jscoverage['handlebars/handlebars.js'][2066]++;
    compilerWords[reservedWords[i]] = true;
}
  _$jscoverage['handlebars/handlebars.js'][2069]++;
  JavaScriptCompiler.isValidJavaScriptVariableName = (function (name) {
  _$jscoverage['handlebars/handlebars.js'][2070]++;
  if (((! JavaScriptCompiler.RESERVED_WORDS[name]) && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name))) {
    _$jscoverage['handlebars/handlebars.js'][2071]++;
    return true;
  }
  _$jscoverage['handlebars/handlebars.js'][2073]++;
  return false;
});
})(Handlebars.Compiler, Handlebars.JavaScriptCompiler);
_$jscoverage['handlebars/handlebars.js'][2078]++;
Handlebars.precompile = (function (input, options) {
  _$jscoverage['handlebars/handlebars.js'][2079]++;
  if (((! input) || (((typeof input) !== "string") && (input.constructor !== Handlebars.AST.ProgramNode)))) {
    _$jscoverage['handlebars/handlebars.js'][2080]++;
    throw new (Handlebars.Exception)(("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input));
  }
  _$jscoverage['handlebars/handlebars.js'][2083]++;
  options = (options || {});
  _$jscoverage['handlebars/handlebars.js'][2084]++;
  if ((! ("data" in options))) {
    _$jscoverage['handlebars/handlebars.js'][2085]++;
    options.data = true;
  }
  _$jscoverage['handlebars/handlebars.js'][2087]++;
  var ast = Handlebars.parse(input);
  _$jscoverage['handlebars/handlebars.js'][2088]++;
  var environment = new (Handlebars.Compiler)().compile(ast, options);
  _$jscoverage['handlebars/handlebars.js'][2089]++;
  return new (Handlebars.JavaScriptCompiler)().compile(environment, options);
});
_$jscoverage['handlebars/handlebars.js'][2092]++;
Handlebars.compile = (function (input, options) {
  _$jscoverage['handlebars/handlebars.js'][2093]++;
  if (((! input) || (((typeof input) !== "string") && (input.constructor !== Handlebars.AST.ProgramNode)))) {
    _$jscoverage['handlebars/handlebars.js'][2094]++;
    throw new (Handlebars.Exception)(("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input));
  }
  _$jscoverage['handlebars/handlebars.js'][2097]++;
  options = (options || {});
  _$jscoverage['handlebars/handlebars.js'][2098]++;
  if ((! ("data" in options))) {
    _$jscoverage['handlebars/handlebars.js'][2099]++;
    options.data = true;
  }
  _$jscoverage['handlebars/handlebars.js'][2101]++;
  var compiled;
  _$jscoverage['handlebars/handlebars.js'][2102]++;
  function compile() {
    _$jscoverage['handlebars/handlebars.js'][2103]++;
    var ast = Handlebars.parse(input);
    _$jscoverage['handlebars/handlebars.js'][2104]++;
    var environment = new (Handlebars.Compiler)().compile(ast, options);
    _$jscoverage['handlebars/handlebars.js'][2105]++;
    var templateSpec = new (Handlebars.JavaScriptCompiler)().compile(environment, options, undefined, true);
    _$jscoverage['handlebars/handlebars.js'][2106]++;
    return Handlebars.template(templateSpec);
}
  _$jscoverage['handlebars/handlebars.js'][2110]++;
  return (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][2111]++;
  if ((! compiled)) {
    _$jscoverage['handlebars/handlebars.js'][2112]++;
    compiled = compile();
  }
  _$jscoverage['handlebars/handlebars.js'][2114]++;
  return compiled.call(this, context, options);
});
});
_$jscoverage['handlebars/handlebars.js'][2117]++;
;
_$jscoverage['handlebars/handlebars.js'][2119]++;
Handlebars.VM = {template: (function (templateSpec) {
  _$jscoverage['handlebars/handlebars.js'][2122]++;
  var container = {escapeExpression: Handlebars.Utils.escapeExpression, invokePartial: Handlebars.VM.invokePartial, programs: [], program: (function (i, fn, data) {
  _$jscoverage['handlebars/handlebars.js'][2127]++;
  var programWrapper = this.programs[i];
  _$jscoverage['handlebars/handlebars.js'][2128]++;
  if (data) {
    _$jscoverage['handlebars/handlebars.js'][2129]++;
    return Handlebars.VM.program(fn, data);
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][2130]++;
    if (programWrapper) {
      _$jscoverage['handlebars/handlebars.js'][2131]++;
      return programWrapper;
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][2133]++;
      programWrapper = (this.programs[i] = Handlebars.VM.program(fn));
      _$jscoverage['handlebars/handlebars.js'][2134]++;
      return programWrapper;
    }
  }
}), programWithDepth: Handlebars.VM.programWithDepth, noop: Handlebars.VM.noop, compilerInfo: null};
  _$jscoverage['handlebars/handlebars.js'][2142]++;
  return (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][2143]++;
  options = (options || {});
  _$jscoverage['handlebars/handlebars.js'][2144]++;
  var result = templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);
  _$jscoverage['handlebars/handlebars.js'][2146]++;
  var compilerInfo = (container.compilerInfo || []), compilerRevision = (compilerInfo[0] || 1), currentRevision = Handlebars.COMPILER_REVISION;
  _$jscoverage['handlebars/handlebars.js'][2150]++;
  if ((compilerRevision !== currentRevision)) {
    _$jscoverage['handlebars/handlebars.js'][2151]++;
    if ((compilerRevision < currentRevision)) {
      _$jscoverage['handlebars/handlebars.js'][2152]++;
      var runtimeVersions = Handlebars.REVISION_CHANGES[currentRevision], compilerVersions = Handlebars.REVISION_CHANGES[compilerRevision];
      _$jscoverage['handlebars/handlebars.js'][2154]++;
      throw ("Template was precompiled with an older version of Handlebars than the current runtime. " + "Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][2158]++;
      throw ("Template was precompiled with a newer version of Handlebars than the current runtime. " + "Please update your runtime to a newer version (" + compilerInfo[1] + ").");
    }
  }
  _$jscoverage['handlebars/handlebars.js'][2163]++;
  return result;
});
}), programWithDepth: (function (fn, data, $depth) {
  _$jscoverage['handlebars/handlebars.js'][2168]++;
  var args = Array.prototype.slice.call(arguments, 2);
  _$jscoverage['handlebars/handlebars.js'][2170]++;
  return (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][2171]++;
  options = (options || {});
  _$jscoverage['handlebars/handlebars.js'][2173]++;
  return fn.apply(this, [context, (options.data || data)].concat(args));
});
}), program: (function (fn, data) {
  _$jscoverage['handlebars/handlebars.js'][2177]++;
  return (function (context, options) {
  _$jscoverage['handlebars/handlebars.js'][2178]++;
  options = (options || {});
  _$jscoverage['handlebars/handlebars.js'][2180]++;
  return fn(context, (options.data || data));
});
}), noop: (function () {
  _$jscoverage['handlebars/handlebars.js'][2183]++;
  return "";
}), invokePartial: (function (partial, name, context, helpers, partials, data) {
  _$jscoverage['handlebars/handlebars.js'][2185]++;
  var options = {helpers: helpers, partials: partials, data: data};
  _$jscoverage['handlebars/handlebars.js'][2187]++;
  if ((partial === undefined)) {
    _$jscoverage['handlebars/handlebars.js'][2188]++;
    throw new (Handlebars.Exception)(("The partial " + name + " could not be found"));
  }
  else {
    _$jscoverage['handlebars/handlebars.js'][2189]++;
    if ((partial instanceof Function)) {
      _$jscoverage['handlebars/handlebars.js'][2190]++;
      return partial(context, options);
    }
    else {
      _$jscoverage['handlebars/handlebars.js'][2191]++;
      if ((! Handlebars.compile)) {
        _$jscoverage['handlebars/handlebars.js'][2192]++;
        throw new (Handlebars.Exception)(("The partial " + name + " could not be compiled when running in runtime-only mode"));
      }
      else {
        _$jscoverage['handlebars/handlebars.js'][2194]++;
        partials[name] = Handlebars.compile(partial, {data: (data !== undefined)});
        _$jscoverage['handlebars/handlebars.js'][2195]++;
        return (partials[name])(context, options);
      }
    }
  }
})};
_$jscoverage['handlebars/handlebars.js'][2200]++;
Handlebars.template = Handlebars.VM.template;
_$jscoverage['handlebars/handlebars.js'][2201]++;
;
