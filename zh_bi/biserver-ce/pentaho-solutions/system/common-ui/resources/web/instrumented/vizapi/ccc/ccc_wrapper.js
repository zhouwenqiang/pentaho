/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['vizapi/ccc/ccc_wrapper.js']) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'] = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][12] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][15] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][17] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][19] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][20] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][23] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][28] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][29] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][31] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][36] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][37] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][55] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][70] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][86] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][101] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][116] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][131] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][157] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][172] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][236] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][269] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][283] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][337] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][353] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][410] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][436] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][476] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][478] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][480] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][481] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][486] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][487] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][490] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][491] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][502] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][503] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][513] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][514] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][525] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][526] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][536] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][537] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][538] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][539] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][542] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][544] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][549] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][557] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][558] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][571] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][572] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][573] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][579] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][606] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][607] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][613] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][621] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][622] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][628] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][636] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][637] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][648] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][649] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][661] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][662] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][664] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][665] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][668] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][669] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][672] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][673] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][676] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][677] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][680] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][681] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][684] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][690] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][693] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][694] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][697] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][698] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][701] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][705] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][707] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][708] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][709] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][711] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][714] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][716] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][717] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][719] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][720] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][721] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][723] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][724] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][727] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][728] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][729] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][731] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][734] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][741] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][742] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][743] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][745] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][750] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][751] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][763] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][766] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][767] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][768] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][770] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][775] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][776] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][780] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][785] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][786] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][787] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][788] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][791] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][795] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][796] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][797] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][802] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][803] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][806] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][810] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][814] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][823] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][824] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][825] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][827] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][842] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][846] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][853] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][854] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][856] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][857] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][858] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][859] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][860] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][863] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][868] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][872] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][874] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][875] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][877] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][884] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][885] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][890] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][900] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][902] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][905] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][906] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][911] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][915] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][918] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][919] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][928] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][929] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][934] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][938] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][942] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][944] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][945] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][946] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][947] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][950] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][951] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][953] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][955] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][956] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][957] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][962] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][963] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][966] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][968] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][975] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][976] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][979] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][981] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][989] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][990] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][991] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][994] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][995] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][997] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][998] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1006] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1007] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1008] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1011] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1013] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1022] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1027] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1028] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1036] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1037] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1038] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1042] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1044] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1047] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1048] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1049] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1050] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1051] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1053] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1054] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1055] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1056] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1057] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1061] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1068] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1069] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1070] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1071] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1074] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1075] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1083] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1084] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1087] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1089] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1093] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1094] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1095] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1096] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1098] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1099] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1100] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1101] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1102] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1106] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1114] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1131] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1132] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1133] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1136] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1139] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1140] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1147] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1152] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1155] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1156] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1164] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1168] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1170] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1174] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1177] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1179] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1181] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1190] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1192] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1193] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1202] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1206] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1209] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1212] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1213] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1214] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1218] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1224] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1227] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1230] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1235] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1238] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1240] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1241] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1250] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1254] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1256] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1264] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1268] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1270] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1272] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1273] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1274] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1275] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1276] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1277] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1292] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1294] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1296] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1297] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1300] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1301] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1303] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1307] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1311] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1312] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1314] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1317] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1327] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1328] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1331] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1335] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1336] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1337] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1338] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1340] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1343] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1344] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1347] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1349] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1350] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1351] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1352] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1356] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1357] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1358] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1359] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1362] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1365] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1366] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1369] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1375] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1376] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1382] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1383] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1385] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1386] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1389] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1392] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1402] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1404] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1405] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1406] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1418] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1419] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1431] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1433] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1434] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1435] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1437] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1438] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1443] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1444] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1445] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1446] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1448] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1452] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1453] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1461] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1462] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1464] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1465] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1466] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1469] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1552] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1562] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1565] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1566] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1568] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1630] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1631] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1634] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1656] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1658] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1660] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1664] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1665] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1667] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1671] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1675] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1677] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1679] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1681] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1687] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1688] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1691] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1692] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1694] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1700] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1701] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1703] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1705] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1707] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1713] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1715] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1716] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1718] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1719] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1720] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1722] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1731] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1732] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1733] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1739] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1740] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1748] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1755] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1757] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1759] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1763] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1766] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1767] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1779] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1785] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1787] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1788] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1789] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1790] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1791] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1793] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1794] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1800] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1802] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1807] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1810] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1813] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1814] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1815] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1819] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1820] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1821] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1822] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1823] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1824] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1830] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1831] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1832] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1835] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1836] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1837] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1841] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1842] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1846] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1847] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1848] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1849] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1850] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1852] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1853] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1856] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1857] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1858] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1861] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1862] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1863] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1864] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1865] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1866] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1869] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1872] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1873] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1874] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1875] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1876] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1879] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1883] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1884] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1886] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1889] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1890] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1891] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1892] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1896] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1897] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1918] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1919] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1920] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1921] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1922] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1930] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1931] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1936] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1937] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1939] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1940] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1942] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1943] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1948] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1949] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1950] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1952] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1954] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1958] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1962] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1969] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1974] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1975] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1978] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1979] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1982] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1983] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1988] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1989] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1995] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1996] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2000] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2001] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2002] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2003] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2005] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2014] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2015] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2017] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2027] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2030] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2039] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2044] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2045] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2046] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2047] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2049] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2050] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2051] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2063] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2065] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2068] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2070] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2074] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2084] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2085] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2089] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2090] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2091] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2098] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2099] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2101] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2105] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2106] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2107] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2108] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2118] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2119] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2121] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2122] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2129] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2132] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2135] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2137] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2138] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2141] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2143] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2144] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2145] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2146] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2150] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2152] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2154] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2156] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2158] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2159] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2160] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2161] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2162] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2168] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2169] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2176] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2177] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2180] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2181] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2184] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2185] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2188] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2189] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2194] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2203] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2208] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2209] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2215] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2216] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2217] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2219] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2220] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2223] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2228] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2229] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2234] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2236] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2237] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2238] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2241] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2242] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2245] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2246] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2249] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2251] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2252] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2254] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2255] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2257] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2258] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2261] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2262] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2265] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2269] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2272] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2273] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2275] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2277] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2278] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2281] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2282] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2283] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2288] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2289] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2290] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2293] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2296] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2297] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2302] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2303] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2304] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2307] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2308] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2310] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2315] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2317] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2320] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2321] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2322] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2323] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2325] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2326] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2328] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2331] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2332] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2333] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2338] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2339] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2343] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2344] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2347] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2351] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2352] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2353] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2354] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2355] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2356] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2357] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2361] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2362] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2370] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2371] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2373] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2374] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2377] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2379] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2382] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2383] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2384] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2385] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2386] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2389] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2391] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2392] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2393] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2395] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2396] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2397] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2403] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2406] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2407] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2408] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2413] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2414] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2415] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2418] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2420] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2421] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2422] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2427] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2428] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2429] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2434] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2435] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2439] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2440] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2443] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2447] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2448] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2449] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2451] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2452] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2457] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2458] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2459] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2462] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2463] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2464] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2465] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2471] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2472] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2475] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2476] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2479] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2482] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2483] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2486] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2490] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2492] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2494] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2497] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2498] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2499] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2505] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2506] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2507] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2508] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2511] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2512] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2513] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2516] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2519] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2521] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2522] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2524] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2531] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2533] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2538] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2539] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2542] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2544] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2545] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2550] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2556] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2558] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2559] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2562] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2563] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2565] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2567] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2570] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2571] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2572] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2573] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2578] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2582] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2583] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2584] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2589] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2598] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2599] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2600] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2601] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2605] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2607] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2610] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2616] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2620] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2621] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2622] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2624] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2625] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2626] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2627] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2630] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2631] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2632] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2635] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2638] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2642] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2647] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2648] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2652] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2654] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2655] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2657] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2658] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2659] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2660] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2662] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2670] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2672] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2673] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2674] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2676] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2677] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2679] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2686] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2687] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2688] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2692] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2693] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2694] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2695] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2697] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2698] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2704] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2712] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2713] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2715] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2721] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2727] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2728] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2729] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2730] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2731] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2733] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2734] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2736] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2737] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2738] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2739] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2740] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2741] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2742] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2743] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2745] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2746] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2750] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2751] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2753] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2754] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2755] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2756] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2758] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2761] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2766] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2769] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2771] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2779] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2782] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2787] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2801] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2846] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2847] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2849] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2850] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2855] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2856] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2859] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2860] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2863] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2864] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2868] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2869] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2871] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2873] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2875] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2878] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2882] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2886] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2887] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2888] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2892] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2895] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2897] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2899] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2900] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2903] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2904] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2907] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2910] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2912] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2916] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2923] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2924] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2925] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2929] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2930] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2931] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2932] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2936] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2937] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2938] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2939] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2942] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2947] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2951] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2955] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2964] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2965] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2972] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2976] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2979] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2988] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2998] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3000] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3001] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3003] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3007] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3013] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3018] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3022] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3023] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3024] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3025] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3026] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3027] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3034] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3035] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3044] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3045] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3046] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3047] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3048] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3049] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3053] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3059] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3061] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3071] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3073] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3103] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3106] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3107] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3110] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3117] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3121] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3122] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3123] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3124] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3128] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3133] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3134] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3136] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3137] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3139] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3142] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3143] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3144] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3147] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3151] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3160] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3161] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3162] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3165] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3166] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3167] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3170] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3177] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3178] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3182] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3191] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3193] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3195] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3196] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3199] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3200] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3211] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3213] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3215] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3216] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3217] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3222] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3224] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3225] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3226] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3227] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3228] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3231] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3232] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3233] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3237] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3238] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3241] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3245] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3248] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3249] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3250] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3251] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3252] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3255] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3256] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3257] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3265] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3269] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3270] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3273] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3274] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3275] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3277] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3281] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3284] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3289] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3300] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3304] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3308] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3312] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3314] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3316] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3317] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3319] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3324] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3326] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3332] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3339] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3341] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3342] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3343] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3350] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3356] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3366] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3374] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3385] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3392] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3394] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3399] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3402] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3413] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3430] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3434] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3436] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3438] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3439] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3440] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3441] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3444] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3447] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3450] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3454] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3461] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3463] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3464] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3465] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3467] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3468] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3474] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3476] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3481] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3483] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3485] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3487] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3495] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3503] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3521] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3523] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3524] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3525] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3527] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3528] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3533] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3538] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3540] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3541] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3543] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3544] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3545] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3546] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3551] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3566] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3570] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3594] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3599] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3605] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3635] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3637] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3640] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3644] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3646] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3652] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3653] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3656] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3662] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3667] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3672] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3674] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3675] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3677] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3679] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3680] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3681] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3682] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3684] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3686] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3687] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3692] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3693] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3706] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3710] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3711] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3713] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3718] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3719] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3722] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3723] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3726] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3728] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3730] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3732] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3734] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3736] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3737] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3739] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3743] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3747] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3750] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3753] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3755] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3757] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3761] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3763] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3768] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3773] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3775] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3785] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3786] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3790] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3798] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3802] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3808] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3809] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3811] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3812] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3814] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3815] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3816] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3817] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3818] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3823] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3824] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3825] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3827] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3829] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3831] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3834] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3837] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3841] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3877] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3884] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3886] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3888] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3889] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3892] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3894] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3896] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3902] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3904] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3906] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3908] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3925] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3927] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3930] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3934] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3938] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3943] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3945] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3946] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3951] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3992] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3995] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3996] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4001] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4005] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4007] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4011] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4013] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4021] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4022] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4023] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4024] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4026] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4030] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4031] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4032] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4033] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4036] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4047] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4068] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4070] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4077] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4082] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4084] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4088] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4126] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4149] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4151] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4153] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4154] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4155] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4156] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4157] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4158] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4159] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4161] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4162] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4165] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4169] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4170] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4171] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4172] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4174] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4177] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4178] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4179] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4181] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4196] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4197] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4198] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4204] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4206] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4207] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4208] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4209] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4211] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4212] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4213] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4217] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4220] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4222] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4224] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4231] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4232] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4237] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4239] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4252] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4253] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4254] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4255] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4259] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4265] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4267] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4268] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4271] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4278] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4315] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4316] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4317] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4318] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4321] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4326] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4327] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4331] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4332] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4335] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4343] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4344] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4345] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4348] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4353] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4354] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4356] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4357] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4358] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4359] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4361] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4364] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4368] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4369] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4372] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4373] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4377] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4378] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4379] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4380] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4381] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4382] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4384] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4387] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4392] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4393] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4394] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4395] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4397] = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4398] = 0;
}
_$jscoverage['vizapi/ccc/ccc_wrapper.js'].source = ["pen<span class=\"k\">.</span>define<span class=\"k\">([</span>","        <span class=\"s\">\"cdf/lib/CCC/def\"</span><span class=\"k\">,</span> ","        <span class=\"s\">\"cdf/lib/CCC/pvc-d1.0\"</span><span class=\"k\">,</span> ","        <span class=\"s\">\"cdf/lib/CCC/protovis\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"common-ui/vizapi/VizController\"</span><span class=\"k\">,</span>","        <span class=\"s\">\"common-ui/vizapi/ccc/ccc_analyzer_plugin\"</span> <span class=\"c\">// TODO: temporary dependency due to debug loading time problems</span>","    <span class=\"k\">],</span>","<span class=\"k\">function</span><span class=\"k\">(</span>def<span class=\"k\">,</span> pvc<span class=\"k\">,</span> pv<span class=\"k\">)</span><span class=\"k\">{</span>","","    <span class=\"c\">// TODO: with requireJS is this still needed?</span>","    <span class=\"c\">// Declare **global** pentaho namespace variable</span>","    pentaho <span class=\"k\">=</span> <span class=\"k\">typeof</span> pentaho <span class=\"k\">!=</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> pentaho <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// This allows def.types below not installing 'pentaho' on the global space...</span>","    def<span class=\"k\">.</span>globalSpace<span class=\"k\">(</span><span class=\"s\">'pentaho'</span><span class=\"k\">,</span> pentaho<span class=\"k\">);</span>","    ","    pentaho<span class=\"k\">.</span>visualizations <span class=\"k\">||</span> <span class=\"k\">(</span>pentaho<span class=\"k\">.</span>visualizations <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","    ","    <span class=\"k\">function</span> defVisualization<span class=\"k\">(</span>viz<span class=\"k\">)</span><span class=\"k\">{</span>","        pentaho<span class=\"k\">.</span>visualizations<span class=\"k\">.</span>push<span class=\"k\">(</span>viz<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    defCCCVisualizations<span class=\"k\">();</span>","    ","    <span class=\"c\">// --------------</span>","    ","    <span class=\"c\">// Install pentaho trends on CCC trends</span>","    pentaho<span class=\"k\">.</span>trends<span class=\"k\">.</span>types<span class=\"k\">().</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>trendType<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> trendInfo <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>trends<span class=\"k\">.</span>get<span class=\"k\">(</span>trendType<span class=\"k\">);</span>","        ","        pvc<span class=\"k\">.</span>trends<span class=\"k\">.</span>define<span class=\"k\">(</span>trendType<span class=\"k\">,</span> trendInfo<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// --------------</span>","    ","    <span class=\"k\">function</span> defCCCVisualizations<span class=\"k\">()</span><span class=\"k\">{</span>","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_bar'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'barchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.BarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> def<span class=\"k\">.</span>array<span class=\"k\">.</span>appendMany<span class=\"k\">(</span>","                    createDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR'</span><span class=\"k\">,</span> <span class=\"k\">{</span>options<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span>","                    createTrendsDataReqs<span class=\"k\">(</span><span class=\"k\">{</span>separator<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span>","                    <span class=\"k\">[</span> createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">])</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">100</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_barstacked'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'barchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'STACKED_VERTICAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.StackedBarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'STACKED_VERTICAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">110</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_horzbar'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'horzbarchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'HORIZONTAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.HorizontalBarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'HORIZONTAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">130</span><span class=\"k\">,</span>","            menuSeparator<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_horzbarstacked'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'horzbarchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'STACKED_HORIZONTAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.HorizontalStackedBarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'STACKED_HORIZONTAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">140</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_barnormalized'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'barchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_VERTICAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.NormalizedBarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_VERTICAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">120</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_horzbarnormalized'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'horzbarchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_HORIZONTAL_BAR'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.HorizontalNormalizedBarChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'PCT_STACKED_HORIZONTAL_BAR'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">150</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_line'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'linechart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'LINE'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.LineChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span> <span class=\"k\">{</span>","                <span class=\"c\">// Default value for 'shape' data request</span>","                shape<span class=\"k\">:</span> <span class=\"s\">'circle'</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> def<span class=\"k\">.</span>array<span class=\"k\">.</span>appendMany<span class=\"k\">(</span>","                    createDataReq<span class=\"k\">(</span><span class=\"s\">'LINE'</span><span class=\"k\">,</span> <span class=\"k\">{</span>options<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span>","                    <span class=\"k\">[</span>","                     createShapeDataReq<span class=\"k\">(),</span>","                     createLineWidthDataReq<span class=\"k\">(),</span>","                    <span class=\"k\">],</span>","                    createTrendsDataReqs<span class=\"k\">(),</span>","                    <span class=\"k\">[</span> createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">])</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">160</span><span class=\"k\">,</span>","            menuSeparator<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_area'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'areachart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'STACKED_AREA'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.StackedAreaChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'STACKED_AREA'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">180</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>        <span class=\"s\">'ccc_scatter'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>      <span class=\"s\">'scatter'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>    <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>      vizLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>   <span class=\"s\">'pentaho.ccc.MetricDotChart'</span><span class=\"k\">,</span>","            maxValues<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">1000</span><span class=\"k\">,</span> <span class=\"s\">2500</span><span class=\"k\">,</span> <span class=\"s\">5000</span><span class=\"k\">,</span> <span class=\"s\">10000</span><span class=\"k\">],</span>","            args<span class=\"k\">:</span>      <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>   <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span>  <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span>  def<span class=\"k\">.</span>array<span class=\"k\">.</span>appendMany<span class=\"k\">([</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'x'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_X'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'y'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_Y'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_ROW'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'color'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number, string'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_COL'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'size'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'SCATTER_Z'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    createMultiDataReq<span class=\"k\">(),</span>","                    createPatternDataReq<span class=\"k\">(),</span>","                    createColorSetDataReq<span class=\"k\">(),</span>","                    createReverseColorsDataReq<span class=\"k\">()</span>","                <span class=\"k\">],</span>","                createTrendsDataReqs<span class=\"k\">(),</span>","                <span class=\"k\">[</span> createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)])</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">190</span><span class=\"k\">,</span>","            menuSeparator<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_barline'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'barchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BarLineChart'</span><span class=\"k\">,</span> <span class=\"c\">// </span>","            args<span class=\"k\">:</span>  <span class=\"k\">{</span>","                <span class=\"c\">// Default value for 'shape' data request</span>","                shape<span class=\"k\">:</span> <span class=\"s\">'circle'</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span> <span class=\"k\">[],</span>","            <span class=\"c\">// dataReqs describes the data requirements of this visualization</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> <span class=\"k\">[</span>","                    createRowDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_ROW'</span><span class=\"k\">),</span>","                    createColDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_COL'</span><span class=\"k\">),</span>","                    def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                        createMeaDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_NUMCOL'</span><span class=\"k\">),</span> ","                        <span class=\"s\">'required'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">),</span>","                    def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                         createMeaDataReq<span class=\"k\">(</span><span class=\"s\">'VERTICAL_BAR_LINE_NUMLINE'</span><span class=\"k\">),</span>","                         <span class=\"s\">'id'</span><span class=\"k\">,</span> <span class=\"s\">'measuresLine'</span><span class=\"k\">,</span>","                         <span class=\"s\">'required'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">),</span>","                    createMultiDataReq<span class=\"k\">(),</span>","                    createShapeDataReq<span class=\"k\">(),</span>","                    createLineWidthDataReq<span class=\"k\">(),</span>","                    createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","               <span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">125</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_waterfall'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'waterfallchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'WATERFALL'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.WaterfallChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">'WATERFALL'</span><span class=\"k\">)</span>","            <span class=\"k\">}</span><span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_boxplot'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'boxplotchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.BoxplotChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> <span class=\"k\">[</span>","                    createRowDataReq<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_ROW'</span><span class=\"k\">),</span>","                    ","                    def<span class=\"k\">.</span>set<span class=\"k\">(</span>createMeaDataReq<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT50'</span><span class=\"k\">),</span> ","                                <span class=\"s\">'allowMultiple'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                                <span class=\"s\">'required'</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">),</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil25'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT25'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil75'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT75'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil5'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT05'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'percentil95'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BOXPLOT_PCT95'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    createMultiDataReq<span class=\"k\">(),</span>","                    createChartOptionsDataReq<span class=\"k\">()</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>       <span class=\"s\">'ccc_pie'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>     <span class=\"s\">'piechart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>   <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>     vizLabel<span class=\"k\">(</span><span class=\"s\">'MULTIPLE_PIE'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>  <span class=\"s\">'pentaho.ccc.PieChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:</span> createDataReq<span class=\"k\">(</span><span class=\"s\">\"MULTIPLE_PIE\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>multi<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">)</span>","                   ","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">180</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span>        <span class=\"s\">'ccc_heatgrid'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span>      <span class=\"s\">'heatgrid'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span>    <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span>      vizLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span>   <span class=\"s\">'pentaho.ccc.HeatGridChart'</span><span class=\"k\">,</span>","            maxValues<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">500</span><span class=\"k\">,</span> <span class=\"s\">1000</span><span class=\"k\">,</span> <span class=\"s\">2000</span><span class=\"k\">,</span> <span class=\"s\">5000</span><span class=\"k\">],</span>","            args<span class=\"k\">:</span>      <span class=\"k\">{</span>","                <span class=\"c\">// Default value for 'shape' data request</span>","                shape<span class=\"k\">:</span><span class=\"s\">'square'</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>   <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span>  <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:[</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'row'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span>  dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_ROW'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_COL'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'color'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_COLOR'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'size'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'HEATGRID_SIZE'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    createPatternDataReq<span class=\"k\">(),</span>","                    createColorSetDataReq<span class=\"k\">(),</span>","                    createReverseColorsDataReq<span class=\"k\">(),</span>","                    createShapeDataReq<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"square\"</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">\"circle\"</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">),</span>","                    createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">],</span>","            menuOrdinal<span class=\"k\">:</span> <span class=\"s\">200</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_treemap'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'treemapchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> vizLabel<span class=\"k\">(</span><span class=\"s\">'TREEMAP'</span><span class=\"k\">),</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.TreemapChart'</span><span class=\"k\">,</span>","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs<span class=\"k\">:</span> <span class=\"k\">[</span> ","                    def<span class=\"k\">.</span>set<span class=\"k\">(</span>createRowDataReq<span class=\"k\">(</span><span class=\"s\">\"TREEMAP_ROW\"</span><span class=\"k\">),</span> <span class=\"s\">'required'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span>","                    <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> <span class=\"s\">'size'</span><span class=\"k\">,</span>","                        dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                        dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'TREEMAP_SIZE'</span><span class=\"k\">),</span>","                        required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        allowMultiple<span class=\"k\">:</span> <span class=\"k\">false</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    createMultiDataReq<span class=\"k\">(),</span>","                    createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">)</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span><span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        defVisualization<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">'ccc_bulletchart'</span><span class=\"k\">,</span>","            type<span class=\"k\">:</span> <span class=\"s\">'bulletchart'</span><span class=\"k\">,</span>","            source<span class=\"k\">:</span> <span class=\"s\">'CCC'</span><span class=\"k\">,</span>","            name<span class=\"k\">:</span> <span class=\"s\">'Bullet Chart'</span><span class=\"k\">,</span>","            <span class=\"s\">'class'</span><span class=\"k\">:</span> <span class=\"s\">'pentaho.ccc.BulletChart'</span><span class=\"k\">,</span>","","            args<span class=\"k\">:</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","            propMap<span class=\"k\">:</span>  <span class=\"k\">[],</span>","            dataReqs<span class=\"k\">:</span> <span class=\"k\">[</span>","            <span class=\"k\">{</span>","                name<span class=\"k\">:</span> <span class=\"s\">'Default'</span><span class=\"k\">,</span>","                reqs <span class=\"k\">:[</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'row'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> <span class=\"s\">'Across'</span><span class=\"k\">,</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> <span class=\"s\">'Down'</span><span class=\"k\">,</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'measures'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                    dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> <span class=\"s\">'Values'</span><span class=\"k\">,</span>","                    required<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                createChartOptionsDataReq<span class=\"k\">()</span>","                <span class=\"k\">]</span>","            <span class=\"k\">}</span>","            <span class=\"k\">]</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","        ","        <span class=\"k\">function</span> label<span class=\"k\">(</span>prefix<span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">(</span>id <span class=\"k\">&amp;&amp;</span> cvCatalog<span class=\"k\">[(</span>prefix <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> id<span class=\"k\">])</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> vizLabel<span class=\"k\">(</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> label<span class=\"k\">(</span><span class=\"s\">'VIZ_'</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span> id<span class=\"k\">;</span> <span class=\"k\">}</span>","","        <span class=\"k\">function</span> dropZoneLabel<span class=\"k\">(</span>id<span class=\"k\">,</span> defaultLabel<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> label<span class=\"k\">(</span><span class=\"s\">\"dropZoneLabels_\"</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span>","                   label<span class=\"k\">(</span><span class=\"s\">\"ropZoneLabels_\"</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span> ","                   defaultLabel <span class=\"k\">||</span> id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> chartPropsLabel<span class=\"k\">(</span>id<span class=\"k\">,</span> defaultLabel<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> label<span class=\"k\">(</span><span class=\"s\">\"dlgChartProps\"</span><span class=\"k\">,</span> id<span class=\"k\">)</span> <span class=\"k\">||</span> defaultLabel <span class=\"k\">||</span> id<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createRowDataReq<span class=\"k\">(</span>rowLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span>rowLabel<span class=\"k\">),</span>","                required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                defaultAppend<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> createColDataReq<span class=\"k\">(</span>columnLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span>columnLabel<span class=\"k\">),</span>","                required<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> createMeaDataReq<span class=\"k\">(</span>measureLabel<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'measures'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'number'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span>measureLabel<span class=\"k\">),</span>","                required<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                defaultAppend<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> createMultiDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'multi'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                dataStructure<span class=\"k\">:</span> <span class=\"s\">'column'</span><span class=\"k\">,</span>","                caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'MULTI_CHART'</span><span class=\"k\">),</span>","                allowMultiple<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                required<span class=\"k\">:</span> <span class=\"k\">false</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createShapeDataReq<span class=\"k\">(</span>valuesSet<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'circle'</span><span class=\"k\">,</span> <span class=\"s\">'cross'</span><span class=\"k\">,</span> <span class=\"s\">'diamond'</span><span class=\"k\">,</span> <span class=\"s\">'square'</span><span class=\"k\">,</span> <span class=\"s\">'triangle'</span><span class=\"k\">];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>valuesSet<span class=\"k\">)</span><span class=\"k\">{</span>","                values <span class=\"k\">=</span> values<span class=\"k\">.</span>filter<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>valuesSet<span class=\"k\">,</span> value<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            values<span class=\"k\">.</span>unshift<span class=\"k\">(</span><span class=\"s\">'none'</span><span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'shape'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> values<span class=\"k\">,</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span>  values<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> dropZoneLabel<span class=\"k\">(</span>option<span class=\"k\">.</span>toUpperCase<span class=\"k\">());</span> <span class=\"k\">}</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span>   <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>    <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'BULLET_STYLE'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createLineWidthDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'lineWidth'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"1\"</span><span class=\"k\">,</span> <span class=\"s\">\"2\"</span><span class=\"k\">,</span> <span class=\"s\">\"3\"</span><span class=\"k\">,</span> <span class=\"s\">\"4\"</span><span class=\"k\">,</span> <span class=\"s\">\"5\"</span><span class=\"k\">,</span> <span class=\"s\">\"6\"</span><span class=\"k\">,</span> <span class=\"s\">\"7\"</span><span class=\"k\">,</span> <span class=\"s\">\"8\"</span><span class=\"k\">],</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"1\"</span><span class=\"k\">,</span> <span class=\"s\">\"2\"</span><span class=\"k\">,</span> <span class=\"s\">\"3\"</span><span class=\"k\">,</span> <span class=\"s\">\"4\"</span><span class=\"k\">,</span> <span class=\"s\">\"5\"</span><span class=\"k\">,</span> <span class=\"s\">\"6\"</span><span class=\"k\">,</span> <span class=\"s\">\"7\"</span><span class=\"k\">,</span> <span class=\"s\">\"8\"</span><span class=\"k\">],</span>","                    group<span class=\"k\">:</span> <span class=\"s\">\"options\"</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>  <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> chartPropsLabel<span class=\"k\">(</span><span class=\"s\">'LineWidth'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createTrendsDataReqs<span class=\"k\">(</span>keyArgs<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> types <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'none'</span><span class=\"k\">,</span> <span class=\"s\">'linear'</span><span class=\"k\">];</span>","            <span class=\"k\">return</span> <span class=\"k\">[</span>","                <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'trendType'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    values<span class=\"k\">:</span> types<span class=\"k\">,</span>","                    ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                        labels<span class=\"k\">:</span>  types<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'TREND_TYPE_'</span> <span class=\"k\">+</span> option<span class=\"k\">.</span>toUpperCase<span class=\"k\">());</span> <span class=\"k\">}</span><span class=\"k\">),</span>","                        group<span class=\"k\">:</span> <span class=\"s\">\"options\"</span><span class=\"k\">,</span>","                        type<span class=\"k\">:</span>  <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'TREND_TYPE'</span><span class=\"k\">),</span>","                        seperator<span class=\"k\">:</span> def<span class=\"k\">.</span>get<span class=\"k\">(</span>keyArgs<span class=\"k\">,</span> <span class=\"s\">'separator'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'trendName'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                        group<span class=\"k\">:</span> <span class=\"s\">'options'</span><span class=\"k\">,</span>","                        type<span class=\"k\">:</span>  <span class=\"s\">'textbox'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'TREND_NAME'</span><span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                    id<span class=\"k\">:</span> <span class=\"s\">'trendLineWidth'</span><span class=\"k\">,</span>","                    dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                    values<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"1\"</span><span class=\"k\">,</span> <span class=\"s\">\"2\"</span><span class=\"k\">,</span> <span class=\"s\">\"3\"</span><span class=\"k\">,</span> <span class=\"s\">\"4\"</span><span class=\"k\">,</span> <span class=\"s\">\"5\"</span><span class=\"k\">,</span> <span class=\"s\">\"6\"</span><span class=\"k\">,</span> <span class=\"s\">\"7\"</span><span class=\"k\">,</span> <span class=\"s\">\"8\"</span><span class=\"k\">],</span>","                    ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                        labels<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"1\"</span><span class=\"k\">,</span> <span class=\"s\">\"2\"</span><span class=\"k\">,</span> <span class=\"s\">\"3\"</span><span class=\"k\">,</span> <span class=\"s\">\"4\"</span><span class=\"k\">,</span> <span class=\"s\">\"5\"</span><span class=\"k\">,</span> <span class=\"s\">\"6\"</span><span class=\"k\">,</span> <span class=\"s\">\"7\"</span><span class=\"k\">,</span> <span class=\"s\">\"8\"</span><span class=\"k\">],</span>","                        group<span class=\"k\">:</span> <span class=\"s\">\"options\"</span><span class=\"k\">,</span>","                        type<span class=\"k\">:</span>  <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                        caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'TREND_LINEWIDTH'</span><span class=\"k\">)</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createPatternDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'pattern'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"GRADIENT\"</span><span class=\"k\">,</span> <span class=\"s\">\"3-COLOR\"</span><span class=\"k\">,</span> <span class=\"s\">\"5-COLOR\"</span><span class=\"k\">],</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"GRADIENT\"</span><span class=\"k\">,</span> <span class=\"s\">\"3_STEP\"</span><span class=\"k\">,</span> <span class=\"s\">\"5_STEP\"</span><span class=\"k\">].</span>","                            map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> dropZoneLabel<span class=\"k\">(</span>option<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span> <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>  <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'PATTERN'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createColorSetDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'colorSet'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'string'</span><span class=\"k\">,</span>","                values<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"ryg\"</span><span class=\"k\">,</span> <span class=\"s\">\"ryb\"</span><span class=\"k\">,</span> <span class=\"s\">\"blue\"</span><span class=\"k\">,</span> <span class=\"s\">\"gray\"</span><span class=\"k\">],</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    labels<span class=\"k\">:</span>  <span class=\"k\">[</span><span class=\"s\">\"RYG\"</span><span class=\"k\">,</span> <span class=\"s\">\"RYB\"</span><span class=\"k\">,</span> <span class=\"s\">\"BLUE\"</span><span class=\"k\">,</span> <span class=\"s\">\"GRAY\"</span><span class=\"k\">].</span>","                             map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>option<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">\"GRAD_\"</span> <span class=\"k\">+</span> option<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span>   <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>    <span class=\"s\">'combo'</span><span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'COLORSET'</span><span class=\"k\">)</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createReverseColorsDataReq<span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">'reverseColors'</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'boolean'</span><span class=\"k\">,</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    label<span class=\"k\">:</span> dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'COLORSET_REVERSE'</span><span class=\"k\">),</span>","                    group<span class=\"k\">:</span> <span class=\"s\">'options'</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>  <span class=\"s\">'checkbox'</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span> ","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createChartOptionsDataReq<span class=\"k\">(</span>hasSeparator<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                id<span class=\"k\">:</span> <span class=\"s\">\"optionsBtn\"</span><span class=\"k\">,</span>","                dataType<span class=\"k\">:</span> <span class=\"s\">'none'</span><span class=\"k\">,</span>","                ui<span class=\"k\">:</span> <span class=\"k\">{</span>","                    group<span class=\"k\">:</span>     <span class=\"s\">\"options\"</span><span class=\"k\">,</span>","                    type<span class=\"k\">:</span>      <span class=\"s\">\"button\"</span><span class=\"k\">,</span>","                    label<span class=\"k\">:</span>     dropZoneLabel<span class=\"k\">(</span><span class=\"s\">'CHART_OPTIONS'</span><span class=\"k\">),</span>","                    seperator<span class=\"k\">:</span> hasSeparator <span class=\"k\">||</span> <span class=\"k\">false</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">function</span> createDataReq<span class=\"k\">(</span>chartId<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> json <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createRowDataReq<span class=\"k\">(</span>chartId <span class=\"k\">+</span> <span class=\"s\">\"_ROW\"</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createColDataReq<span class=\"k\">(</span>chartId <span class=\"k\">+</span> <span class=\"s\">\"_COL\"</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createMeaDataReq<span class=\"k\">(</span>chartId <span class=\"k\">+</span> <span class=\"s\">\"_NUM\"</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'multi'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createMultiDataReq<span class=\"k\">());</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>get<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'options'</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">))</span><span class=\"k\">{</span>","                json<span class=\"k\">.</span>push<span class=\"k\">(</span>createChartOptionsDataReq<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> json<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// -------------</span>","    <span class=\"c\">// Axes are: row, column and measure.</span>","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.Axis'</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>chart <span class=\"k\">=</span> chart<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>id <span class=\"k\">=</span> axisId<span class=\"k\">;</span>","","        <span class=\"c\">// Every role, bound or not may have an entry here</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole    <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// roleId -&gt; [gem, ...]</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>indexesByRole <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// roleId -&gt; [number, ...]</span>","        ","        <span class=\"c\">// Only bound roles will have an entry in this set</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>boundRoles <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// roleId -&gt; true</span>","","        <span class=\"c\">// Bound roles will have an entry here,</span>","        <span class=\"c\">// in order of appearence in gems.</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>boundRolesIdList <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// [i] -&gt; roleId</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>gems  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getGems<span class=\"k\">();</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>depth <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>formulas <span class=\"k\">=</span> <span class=\"k\">[];</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span>initGem<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","        <span class=\"c\">/** @instance */</span>","        <span class=\"k\">function</span> initGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Overwrite axis id with corresponding Axis instance</span>","            gem<span class=\"k\">.</span>axis  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            gem<span class=\"k\">.</span>index <span class=\"k\">=</span> index<span class=\"k\">;</span>","","            <span class=\"k\">var</span> roleId <span class=\"k\">=</span> gem<span class=\"k\">.</span>role<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>roleId <span class=\"k\">&amp;&amp;</span> roleId <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span>roleId<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">/* New role */</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>boundRoles<span class=\"k\">[</span>roleId<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>boundRolesIdList<span class=\"k\">.</span>push<span class=\"k\">(</span>roleId<span class=\"k\">);</span>","                <span class=\"k\">}</span>","    ","                <span class=\"k\">var</span> roleGems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>roleId<span class=\"k\">];</span>","                gem<span class=\"k\">.</span>roleLevel <span class=\"k\">=</span> roleGems<span class=\"k\">.</span>length<span class=\"k\">;</span>","                roleGems<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">);</span>","    ","                <span class=\"k\">this</span><span class=\"k\">.</span>indexesByRole<span class=\"k\">[</span>roleId<span class=\"k\">].</span>push<span class=\"k\">(</span>index<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>formulas<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">.</span>formula<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","        _ensureRole<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>roleId<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>roleId<span class=\"k\">])</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>roleId<span class=\"k\">]</span>    <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>indexesByRole<span class=\"k\">[</span>roleId<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>virtualItemStartIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>configureDimensionGroups<span class=\"k\">();</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>configureReaders<span class=\"k\">(</span>virtualItemStartIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        configureDimensionGroups<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">// We need to specify readers with indexes only because of unmapped</span>","        <span class=\"c\">// gems that reach the dataTable.</span>","        <span class=\"c\">// Because this is probably an analyzer bug,</span>","        <span class=\"c\">// we fix this adjusting the readers' indexes,</span>","        <span class=\"c\">// (and not filtering the table columns, which is more difficult to do).</span>","        configureReaders<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>virtualItemStartIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> readers <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>options<span class=\"k\">.</span>readers<span class=\"k\">,</span>","                index   <span class=\"k\">=</span> virtualItemStartIndex<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>cccDimList<span class=\"k\">().</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>dimName<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>cccDimNamesSet<span class=\"k\">,</span> dimName<span class=\"k\">))</span><span class=\"k\">{</span>","                    cccDimNamesSet<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    ","                    <span class=\"k\">var</span> reader <span class=\"k\">=</span> <span class=\"k\">{</span>","                        names<span class=\"k\">:</span>   dimName<span class=\"k\">,</span> <span class=\"c\">// when null, the reader simply consumes the index, and prevents a default reader</span>","                        indexes<span class=\"k\">:</span> index","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","                    readers<span class=\"k\">.</span>push<span class=\"k\">(</span>reader<span class=\"k\">);</span>","                    index<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"k\">return</span> index<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Note this is called during base constructor. */</span>","        _getGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_axesGemsInfo<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">];</span>","            <span class=\"k\">var</span> vizHelper <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_vizHelper<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>vizHelper<span class=\"k\">.</span>completeAxisGemsMetadata<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// available on the client</span>","                vizHelper<span class=\"k\">.</span>completeAxisGemsMetadata<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">,</span> gems<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> gems<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getAxisLabel<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> labels <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_getAxisLabelGems<span class=\"k\">())</span>","                            <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                            <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>label<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                            <span class=\"k\">.</span>array<span class=\"k\">(),</span>","                last   <span class=\"k\">=</span> labels<span class=\"k\">.</span>pop<span class=\"k\">(),</span>","                first  <span class=\"k\">=</span> labels<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>first <span class=\"k\">&amp;&amp;</span> last<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartAxisTitleMultipleDimText'</span><span class=\"k\">,</span> <span class=\"k\">[</span>first<span class=\"k\">,</span> last<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> first <span class=\"k\">||</span> last<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getAxisLabelGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        buildHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_buildGemHtmlTooltip<span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _buildGemHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">,</span> gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/*</span>","<span class=\"c\">             * Multi-chart formulas are not shown in the tooltip</span>","<span class=\"c\">             * They're on the small chart's title</span>","<span class=\"c\">             */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>cccDimName <span class=\"k\">&amp;&amp;</span> gem<span class=\"k\">.</span>role <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_multiRole<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>atom<span class=\"k\">.</span>dimension<span class=\"k\">.</span>type<span class=\"k\">.</span>isHidden <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>complex<span class=\"k\">.</span>isTrend <span class=\"k\">||</span> atom<span class=\"k\">.</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">// ex: \"Line: Ships\"</span>","                    lines<span class=\"k\">.</span>push<span class=\"k\">(</span>def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>gem<span class=\"k\">.</span>label<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">': '</span> <span class=\"k\">+</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>atom<span class=\"k\">.</span>label<span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Obtains the ccc dimensions that this axis uses,</span>","<span class=\"c\">         * in the order they are laid out in</span>","<span class=\"c\">         * the CCC's virtual item.</span>","<span class=\"c\">         */</span>","       cccDimList<span class=\"k\">:</span> def<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"k\">{</span>isAbstract<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">),</span>","","       fillCellSelection<span class=\"k\">:</span> def<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"k\">{</span>isAbstract<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">),</span>","","       getDrillDownInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","       <span class=\"k\">}</span><span class=\"k\">,</span>","","       getDeepestInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","       <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// --------------------------</span>","","    <span class=\"c\">/* Axis static factory method */</span>","    pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">.</span>create <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> funClass<span class=\"k\">;</span>","","        <span class=\"k\">switch</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">'row'</span><span class=\"k\">:</span>     funClass <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>RowAxis<span class=\"k\">;</span>     <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'column'</span><span class=\"k\">:</span>  funClass <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>ColumnAxis<span class=\"k\">;</span>  <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'measure'</span><span class=\"k\">:</span> funClass <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>MeasureAxis<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">default</span><span class=\"k\">:</span> <span class=\"k\">throw</span> def<span class=\"k\">.</span>error<span class=\"k\">.</span>argumentInvalid<span class=\"k\">(</span><span class=\"s\">\"Undefined axis value '{0}'.\"</span><span class=\"k\">,</span> <span class=\"k\">[</span>axisId<span class=\"k\">]);</span>","        <span class=\"k\">}</span>","        ","        <span class=\"k\">return</span> <span class=\"k\">new</span> funClass<span class=\"k\">(</span>chart<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.DiscreteAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">)</span><span class=\"k\">{</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> axisId<span class=\"k\">);</span>","        ","        <span class=\"k\">var</span> multiGems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_multiRole<span class=\"k\">];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>hasMulti <span class=\"k\">=</span> <span class=\"k\">!!</span>multiGems <span class=\"k\">&amp;&amp;</span> ","                        def<span class=\"k\">.</span>query<span class=\"k\">(</span>multiGems<span class=\"k\">)</span>","                           <span class=\"k\">.</span>any<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>postInit<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","        <span class=\"c\">// Done here just to allow  more specific roles to be ensured first</span>","        ","        <span class=\"c\">//this.base.apply(this, arguments);</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_multiRole<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _nonMultiGemFilter<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> ","            <span class=\"k\">return</span> gem<span class=\"k\">.</span>role <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_multiRole<span class=\"k\">;</span> ","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/**</span>","<span class=\"c\">         * The union of the ccc dimensions of the roles of this axis.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * CCC dimension names are inferred based on the name of the</span>","<span class=\"c\">         * dimension group that is assigned to each role (name, name2, name3, ...).</span>","<span class=\"c\">         */</span>","        cccDimList<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// One dimension per gem</span>","                <span class=\"k\">var</span> cccDimList <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>length<span class=\"k\">);</span>","","                <span class=\"c\">// Unmapped gems may appear</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    gem<span class=\"k\">.</span>cccDimName <span class=\"k\">=</span>","                    cccDimList<span class=\"k\">[</span>gem<span class=\"k\">.</span>index<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getGemDimName<span class=\"k\">(</span>gem<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getGemDimName<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> roleToCccDimMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_rolesToCccDimensionsMap<span class=\"k\">,</span>","                cccDimGroup <span class=\"k\">=</span> roleToCccDimMap<span class=\"k\">[</span>gem<span class=\"k\">.</span>role<span class=\"k\">];</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span> cccDimGroup <span class=\"k\">===</span> <span class=\"s\">'string'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                 <span class=\"k\">return</span> pvc<span class=\"k\">.</span>buildIndexedId<span class=\"k\">(</span>cccDimGroup<span class=\"k\">,</span> gem<span class=\"k\">.</span>roleLevel<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _buildGemHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">,</span> gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/*</span>","<span class=\"c\">             * Multi-chart formulas are not shown in the tooltip</span>","<span class=\"c\">             * They're on the small chart's title</span>","<span class=\"c\">             */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">(</span>gem<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getAxisLabelGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">).</span>where<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        fillCellSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">,</span> complex<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> forms  <span class=\"k\">=</span> <span class=\"k\">[],</span>","                values <span class=\"k\">=</span> <span class=\"k\">[],</span>","                label<span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>getSelectionGems<span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span>","                <span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                    forms<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">.</span>formula<span class=\"k\">);</span>","                    values<span class=\"k\">.</span>push<span class=\"k\">(</span>atom<span class=\"k\">.</span>value<span class=\"k\">);</span>","                    label <span class=\"k\">=</span> atom<span class=\"k\">.</span>label<span class=\"k\">;</span> <span class=\"c\">// TODO is this ok?</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>forms<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> axisId <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">;</span>","                <span class=\"c\">// Dummy property, just to force Analyzer to read the axis info</span>","                selection<span class=\"k\">[</span>axisId<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                ","                selection<span class=\"k\">[</span>axisId <span class=\"k\">+</span> <span class=\"s\">'Id'</span>   <span class=\"k\">]</span> <span class=\"k\">=</span> forms<span class=\"k\">;</span>","                selection<span class=\"k\">[</span>axisId <span class=\"k\">+</span> <span class=\"s\">'Item'</span> <span class=\"k\">]</span> <span class=\"k\">=</span> values<span class=\"k\">;</span>","                selection<span class=\"k\">[</span>axisId <span class=\"k\">+</span> <span class=\"s\">'Label'</span><span class=\"k\">]</span> <span class=\"k\">=</span> label<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getSelectionGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectionExcludesMulti <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                     <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">(!</span>selectionExcludesMulti <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">(</span>gem<span class=\"k\">))</span> <span class=\"k\">&amp;&amp;</span> ","                               <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> ","                               <span class=\"k\">!!</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span>","                     <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getKeepOrDrillGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>drillGem<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectionExcludesMulti <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                     <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> gem <span class=\"k\">===</span> drillGem <span class=\"k\">||</span>","                               <span class=\"k\">((!</span>selectionExcludesMulti <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nonMultiGemFilter<span class=\"k\">(</span>gem<span class=\"k\">))</span> <span class=\"k\">&amp;&amp;</span> ","                                <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> ","                                <span class=\"k\">!!</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">);</span>","                     <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        selectGemsWithLink<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>linkType<span class=\"k\">,</span> complex<span class=\"k\">,</span> reverse<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>reverse<span class=\"k\">)</span><span class=\"k\">{</span>","               gems <span class=\"k\">=</span> gems<span class=\"k\">.</span>reverse<span class=\"k\">();</span> ","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> isObjectLinkType <span class=\"k\">=</span> def<span class=\"k\">.</span>object<span class=\"k\">.</span>is<span class=\"k\">(</span>linkType<span class=\"k\">);</span>","            <span class=\"k\">return</span> gems","                <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> ","                    <span class=\"k\">var</span> atom<span class=\"k\">;</span>","                    <span class=\"k\">return</span> gem<span class=\"k\">.</span>hasLink <span class=\"k\">&amp;&amp;</span>","                          <span class=\"k\">(!</span>linkType <span class=\"k\">||</span> <span class=\"k\">(</span>isObjectLinkType <span class=\"k\">?</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>linkType<span class=\"k\">,</span> gem<span class=\"k\">.</span>linkType<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">(</span>gem<span class=\"k\">.</span>linkType <span class=\"k\">===</span> linkType<span class=\"k\">)))</span> <span class=\"k\">&amp;&amp;</span>","                          <span class=\"k\">(!</span>complex  <span class=\"k\">||</span> <span class=\"k\">(</span>gem<span class=\"k\">.</span>cccDimName <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> atom<span class=\"k\">.</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">));</span>","                <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        selectBoundGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> reverse<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>reverse<span class=\"k\">)</span><span class=\"k\">{</span>","               gems <span class=\"k\">=</span> gems<span class=\"k\">.</span>reverse<span class=\"k\">();</span> ","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> gems","                <span class=\"k\">.</span>where<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> ","                    <span class=\"k\">return</span> <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> ","                           gem<span class=\"k\">.</span>cccDimName <span class=\"k\">&amp;&amp;</span> ","                           complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span> ","                 <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getHyperlinkInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// The last formula of this axis that has a defined hyperlink</span>","            <span class=\"k\">var</span> lastGem <span class=\"k\">=</span> <span class=\"k\">this</span>","                <span class=\"k\">.</span>selectGemsWithLink<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_hyperlinkTypes<span class=\"k\">,</span> complex<span class=\"k\">,</span> <span class=\"c\">/* reverse */</span> <span class=\"k\">true</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>first<span class=\"k\">()</span>","                <span class=\"k\">;</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>lastGem<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">{</span>","                    gem<span class=\"k\">:</span>  lastGem<span class=\"k\">,</span>","                    atom<span class=\"k\">:</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>lastGem<span class=\"k\">.</span>cccDimName<span class=\"k\">]</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        getDrillDownInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> deepestInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getDeepestInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>deepestInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Get the child formula, if any, in the same hierarchy</span>","            <span class=\"k\">var</span> lastForm <span class=\"k\">=</span> deepestInfo<span class=\"k\">.</span>gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                childForm <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>getChildFormula<span class=\"k\">(</span>lastForm<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>childForm<span class=\"k\">)</span><span class=\"k\">{</span>","            ","                <span class=\"c\">// Let's try the other gems</span>","                <span class=\"k\">var</span> gemList <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">).</span>reverse<span class=\"k\">().</span>array<span class=\"k\">();</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> gemList<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> g <span class=\"k\">=</span> gemList<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>g<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> deepestGem <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getHierarchyDeepestGem<span class=\"k\">(</span>g<span class=\"k\">.</span>formula<span class=\"k\">),</span>","                        atom<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>deepestGem<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","                                atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>deepestGem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                                <span class=\"k\">if</span><span class=\"k\">(!</span>atom <span class=\"k\">||</span> atom<span class=\"k\">.</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                    deepestInfo <span class=\"k\">=</span>  <span class=\"k\">null</span><span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","","                            deepestInfo <span class=\"k\">=</span>  <span class=\"k\">{</span>","                                gem<span class=\"k\">:</span>  deepestGem<span class=\"k\">,</span>","                                atom<span class=\"k\">:</span> atom","                            <span class=\"k\">}</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>                    ","                    <span class=\"k\">}</span>","                ","                    lastForm <span class=\"k\">=</span> deepestInfo<span class=\"k\">.</span>gem<span class=\"k\">.</span>formula<span class=\"k\">;</span>","                    childForm <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>getChildFormula<span class=\"k\">(</span>lastForm<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>childForm<span class=\"k\">)</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>                ","                <span class=\"k\">}</span>","    ","                <span class=\"k\">if</span> <span class=\"k\">(!</span>childForm<span class=\"k\">)</span>","                    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">             * If the formula is already included in the chart</span>","<span class=\"c\">             * (surely in a different axis) then no drilling</span>","<span class=\"c\">             * (in this axis) is possible.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>gemsMap<span class=\"k\">,</span> childForm<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            deepestInfo<span class=\"k\">.</span>drillChild <span class=\"k\">=</span> childForm<span class=\"k\">;</span>","            ","            <span class=\"k\">return</span> deepestInfo<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getDeepestInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>depth<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> lastGem <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getLastProperGem<span class=\"k\">(</span>complex<span class=\"k\">,</span> hierarchy<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>lastGem<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> deepestGem <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getHierarchyDeepestGem<span class=\"k\">(</span>lastGem<span class=\"k\">.</span>formula<span class=\"k\">),</span>","                        atom<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>deepestGem<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","                            atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>deepestGem<span class=\"k\">.</span>cccDimName<span class=\"k\">];</span>","                            <span class=\"k\">if</span><span class=\"k\">(!</span>atom <span class=\"k\">||</span> atom<span class=\"k\">.</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","","                        <span class=\"k\">return</span> <span class=\"k\">{</span>","                            gem<span class=\"k\">:</span>  deepestGem<span class=\"k\">,</span>","                            atom<span class=\"k\">:</span> atom","                        <span class=\"k\">}</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getLastProperGem<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* Get the last gem that is not a measure discrim.</span>","<span class=\"c\">             * Optionally filter by the given hierarchy argument.</span>","<span class=\"c\">             */</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">             * NOTE: there's a \"problem\" with cv.getFieldHelp().getHierarchy:</span>","<span class=\"c\">             * it must receive a formula of a hierarchy, and not the hierarchy itself.</span>","<span class=\"c\">             *</span>","<span class=\"c\">             * Because of that and the use scenarios of this method,</span>","<span class=\"c\">             * the received argument 'hierarchy' may end up being a formula.</span>","<span class=\"c\">             * We guard against that extracting the hierarchy of it</span>","<span class=\"c\">             * so that the hierarchy comparison  does not fail.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> realHierarchy<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","                realHierarchy <span class=\"k\">=</span> hierarchy<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/^(\\[.*?\\])?.*$/</span><span class=\"k\">)[</span><span class=\"s\">1</span><span class=\"k\">];</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                        <span class=\"k\">.</span>reverse<span class=\"k\">()</span>","                        <span class=\"k\">.</span>first<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">var</span> atom<span class=\"k\">;</span>","                            <span class=\"k\">return</span> <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span>","                                   <span class=\"k\">(!</span>realHierarchy <span class=\"k\">||</span> gem<span class=\"k\">.</span>hierarchy <span class=\"k\">===</span> realHierarchy<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                                   <span class=\"k\">(!</span>complex <span class=\"k\">||</span> <span class=\"k\">(</span>gem<span class=\"k\">.</span>cccDimName <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> atom<span class=\"k\">.</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">));</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        getHierarchyDeepestGem<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hierarchy<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_getHierarchyFormulas<span class=\"k\">(</span>","                                    hierarchy<span class=\"k\">,</span>","                                    <span class=\"c\">/*includeHidden*/</span><span class=\"k\">false</span><span class=\"k\">,</span>","                                    <span class=\"c\">/*excludeChildren*/</span><span class=\"k\">false</span><span class=\"k\">);</span>","","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span>hForms<span class=\"k\">)</span>","                      <span class=\"k\">.</span>reverse<span class=\"k\">()</span> <span class=\"c\">// deepest first</span>","                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>hForm<span class=\"k\">)</span><span class=\"k\">{</span>","                          <span class=\"k\">var</span> gem <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>gemsMap<span class=\"k\">,</span> hForm<span class=\"k\">);</span>","                          <span class=\"k\">return</span> gem <span class=\"k\">&amp;&amp;</span> gem<span class=\"k\">.</span>axis <span class=\"k\">===</span> <span class=\"k\">this</span> <span class=\"k\">&amp;&amp;</span> gem<span class=\"k\">.</span>cccDimName <span class=\"k\">?</span> gem <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                      <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                      <span class=\"k\">.</span>first<span class=\"k\">(</span>def<span class=\"k\">.</span>notNully<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.ColumnAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>DiscreteAxis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">)</span><span class=\"k\">{</span>","","        <span class=\"k\">var</span> rolesToCccDimMap <span class=\"k\">=</span> chart<span class=\"k\">.</span>_rolesToCccDimensionsMap<span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim <span class=\"k\">=</span> <span class=\"k\">!</span>chart<span class=\"k\">.</span>options<span class=\"k\">.</span>dataOptions<span class=\"k\">.</span>measuresInColumns <span class=\"k\">&amp;&amp;</span>","                                 <span class=\"k\">!!(</span>rolesToCccDimMap<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">]</span> <span class=\"k\">||</span>","                                    rolesToCccDimMap<span class=\"k\">[</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>defaultRole<span class=\"k\">]);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>isHiddenMeasureDiscrim <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim <span class=\"k\">&amp;&amp;</span>","                                      <span class=\"k\">!(</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>realDepth <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim <span class=\"k\">?</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>depth <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>depth<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","        hiddenMeasureDiscrimDimName<span class=\"k\">:</span> <span class=\"s\">'measureDiscrim'</span><span class=\"k\">,</span>","        measureDiscrimName<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","        <span class=\"c\">/* Note this is called during base constructor. */</span>","        _getGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                gems<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    isMeasureDiscrim<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                    id<span class=\"k\">:</span>    <span class=\"s\">'__MeasureDiscrim__'</span><span class=\"k\">,</span>","                    label<span class=\"k\">:</span> <span class=\"s\">\"Measure discriminator\"</span><span class=\"k\">,</span>","                    axis<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>id<span class=\"k\">,</span>","                    role<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>defaultRole","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> gems<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getGemDimName<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>isMeasureDiscrim <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>isHiddenMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// When the measure discriminator should not be seen</span>","                <span class=\"c\">// it should be mapped to a different and hidden dimension group</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>hiddenMeasureDiscrimDimName<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> cccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>gem<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// columns role is not mapped to CCC...</span>","                    <span class=\"c\">// In this case, the discriminator goes as the last *row* dimension.</span>","                    <span class=\"c\">// Is the case, at least, in the PieChart, in which there is no \"series\" concept.</span>","                    <span class=\"k\">var</span> rolesToCccDimMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_rolesToCccDimensionsMap<span class=\"k\">,</span>","                        rowAxis          <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">,</span>","                        rowRole          <span class=\"k\">=</span> rowAxis<span class=\"k\">.</span>defaultRole<span class=\"k\">,</span>","                        rowCccDimGroup   <span class=\"k\">=</span> rolesToCccDimMap<span class=\"k\">[</span>rowRole<span class=\"k\">],</span>","                        rowNextLevel     <span class=\"k\">=</span> rowAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>rowRole<span class=\"k\">].</span>length<span class=\"k\">;</span>","","                    cccDimName <span class=\"k\">=</span> pvc<span class=\"k\">.</span>buildIndexedId<span class=\"k\">(</span>rowCccDimGroup<span class=\"k\">,</span> rowNextLevel<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName <span class=\"k\">=</span> cccDimName<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> cccDimName<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        configureDimensionGroups<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"c\">// Ensure measureDiscrimName is determined</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>cccDimList<span class=\"k\">();</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>options<span class=\"k\">.</span>dimensions<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>measureDiscrimName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","                    isHidden<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.RowAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>DiscreteAxis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">)</span><span class=\"k\">{</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"s\">'rows'</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// --------------------------</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.MeasureAxis'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>chart<span class=\"k\">)</span><span class=\"k\">{</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>chart<span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">);</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>_ensureRole<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>defaultRole<span class=\"k\">);</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasureRoles <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        def<span class=\"k\">.</span>eachOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gemsByRole<span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>gems<span class=\"k\">,</span> role<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>role<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'measures'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasureRoles<span class=\"k\">[</span>role<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">+=</span> gems<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        defaultRole<span class=\"k\">:</span> <span class=\"s\">'measures'</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Filters the report definition formulas</span>","<span class=\"c\">         * excluding those not returned in the data table.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * Note this is called during base constructor.</span>","<span class=\"c\">         */</span>","        _getGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">var</span> gems <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> filtered <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> meaId <span class=\"k\">=</span> gem<span class=\"k\">.</span>id<span class=\"k\">,</span>","                    measureInfo<span class=\"k\">;</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>meaId <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>measureInfo <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measuresInfo<span class=\"k\">,</span> meaId<span class=\"k\">)))</span><span class=\"k\">{</span>","                    gem<span class=\"k\">.</span>role <span class=\"k\">=</span> measureInfo<span class=\"k\">.</span>role<span class=\"k\">;</span>","","                    filtered<span class=\"k\">.</span>push<span class=\"k\">(</span>gem<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> filtered<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        cccDimList<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList <span class=\"k\">=</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measureRolesInfoList","                        <span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>role<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> role<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cccDimList<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _buildGemHtmlTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>lines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">,</span> gem<span class=\"c\">/*, index*/</span><span class=\"k\">)</span><span class=\"k\">{</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">             * When using measure discriminator column,</span>","<span class=\"c\">             * only the \"active\" measure in 'complex'</span>","<span class=\"c\">             * is placed in the tooltip.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> colAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>colAxis<span class=\"k\">.</span>measureDiscrimName    <span class=\"k\">&amp;&amp;</span>","               def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>genericMeasureRoles<span class=\"k\">,</span> gem<span class=\"k\">.</span>role<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","               gem<span class=\"k\">.</span>id <span class=\"k\">!==</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>colAxis<span class=\"k\">.</span>measureDiscrimName<span class=\"k\">].</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">/* Obtain the dimension assigned to the role */</span>","            <span class=\"k\">var</span> cccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measureRolesInfo<span class=\"k\">[</span>gem<span class=\"k\">.</span>role<span class=\"k\">].</span>cccDimName<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>atom<span class=\"k\">.</span>dimension<span class=\"k\">.</span>type<span class=\"k\">.</span>isHidden <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>complex<span class=\"k\">.</span>isTrend <span class=\"k\">||</span> atom<span class=\"k\">.</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">// ex: \"GemLabel (RoleDesc): 200 (10%)\"</span>","                    <span class=\"k\">var</span> tooltipLine <span class=\"k\">=</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>gem<span class=\"k\">.</span>label<span class=\"k\">);</span>","","                    <span class=\"c\">// Role description</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_noRoleInTooltipMeasureRoles<span class=\"k\">[</span>gem<span class=\"k\">.</span>role<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        tooltipLine <span class=\"k\">+=</span> <span class=\"s\">\" (\"</span> <span class=\"k\">+</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>gem<span class=\"k\">.</span>role<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    tooltipLine <span class=\"k\">+=</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>atom<span class=\"k\">.</span>label<span class=\"k\">);</span>","","                    <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_noPercentInTootltipForPercentGems <span class=\"k\">||</span> gem<span class=\"k\">.</span>measureType <span class=\"k\">!==</span> <span class=\"s\">'PCTOF'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> valuePct <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getAtomPercent<span class=\"k\">(</span>atom<span class=\"k\">,</span> context<span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>valuePct <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                            tooltipLine <span class=\"k\">+=</span> <span class=\"s\">\" (\"</span> <span class=\"k\">+</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">+</span>valuePct<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"%)\"</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">var</span> suffix<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>complex<span class=\"k\">.</span>isInterpolated<span class=\"k\">)</span><span class=\"k\">{</span>","                        suffix <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartTooltipGemInterp_'</span> <span class=\"k\">+</span> complex<span class=\"k\">.</span>interpolation<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>complex<span class=\"k\">.</span>isTrend<span class=\"c\">/* &amp;&amp; atom.label*/</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// TODO: \"atom.label\" -- is a weak test for trended measures, </span>","                        <span class=\"c\">// that relies on the fact that non-trended measures are left null</span>","                        suffix <span class=\"k\">=</span> <span class=\"s\">\"(\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>options<span class=\"k\">.</span>trendLabel <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span> <span class=\"c\">//this.chart._message('chartTooltipGemTrend_' + complex.trendType);</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>suffix<span class=\"k\">)</span><span class=\"k\">{</span>","                        tooltipLine <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> suffix<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    lines<span class=\"k\">.</span>push<span class=\"k\">(</span>tooltipLine<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getAtomPercent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>atom<span class=\"k\">,</span> context<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>context<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> cccChart <span class=\"k\">=</span> context<span class=\"k\">.</span>chart<span class=\"k\">,</span>","                    data <span class=\"k\">=</span> cccChart<span class=\"k\">.</span>data<span class=\"k\">,</span>","                    playingPercentMap <span class=\"k\">=</span> data<span class=\"k\">.</span>type<span class=\"k\">.</span>getPlayingPercentVisualRoleDimensionMap<span class=\"k\">(),</span>","                    cccDimName <span class=\"k\">=</span> atom<span class=\"k\">.</span>dimension<span class=\"k\">.</span>name","                    <span class=\"k\">;</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>playingPercentMap<span class=\"k\">.</span>has<span class=\"k\">(</span>cccDimName<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> group <span class=\"k\">=</span> context<span class=\"k\">.</span>scene<span class=\"k\">.</span>group<span class=\"k\">,</span>","                        pct<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>group<span class=\"k\">)</span> <span class=\"k\">{</span>","                        pct <span class=\"k\">=</span> group<span class=\"k\">.</span>dimensions<span class=\"k\">(</span>cccDimName<span class=\"k\">)</span>","                                   <span class=\"k\">.</span>percentOverParent<span class=\"k\">(</span><span class=\"k\">{</span> visible<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        pct <span class=\"k\">=</span> data<span class=\"k\">.</span>dimensions<span class=\"k\">(</span>cccDimName<span class=\"k\">).</span>percent<span class=\"k\">(</span>atom<span class=\"k\">.</span>value<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">return</span> cccChart<span class=\"k\">.</span>options<span class=\"k\">.</span>valueFormat<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> Math<span class=\"k\">.</span>round<span class=\"k\">(</span>pct <span class=\"k\">*</span> <span class=\"s\">10000</span><span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">100</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        fillCellSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">,</span> complex<span class=\"c\">/*, selectionExcludesMulti*/</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/*</span>","<span class=\"c\">             * Add a description of the selected values.</span>","<span class=\"c\">             * At the time of writing, analyzer discards selection.value</span>","<span class=\"c\">             */</span>","            selection<span class=\"k\">.</span>value <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>gems<span class=\"k\">)</span>","                <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> cccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>chart<span class=\"k\">.</span>_measureRolesInfo<span class=\"k\">[</span>gem<span class=\"k\">.</span>role<span class=\"k\">].</span>cccDimName<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">].</span>label<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>where<span class=\"k\">(</span>def<span class=\"k\">.</span>truthy<span class=\"k\">)</span>","                <span class=\"k\">.</span>array<span class=\"k\">()</span>","                <span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\" ~ \"</span><span class=\"k\">)</span>","                <span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// ------------------</span>","    ","    <span class=\"k\">var</span> installCccEventsShield<span class=\"k\">;</span>","    <span class=\"k\">if</span><span class=\"k\">(</span>pv<span class=\"k\">.</span>renderer<span class=\"k\">()</span> <span class=\"k\">===</span> <span class=\"s\">'vml'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">/*</span>","<span class=\"c\">         * Unhandled mouse events from protovis</span>","<span class=\"c\">         * bubble up and cause slowing down the UI.</span>","<span class=\"c\">         * So, we stop propagation of mouse events. </span>","<span class=\"c\">         * We can't use dojo or jQuery for this, </span>","<span class=\"c\">         * cause they try to \"fix\" the event object, </span>","<span class=\"c\">         * which is generally an expensive operation</span>","<span class=\"c\">         * that would defeat the initial purpose.</span>","<span class=\"c\">         * An unwanted side effect is that dragging </span>","<span class=\"c\">         * gems over the chart does not work.</span>","<span class=\"c\">         */</span>","        <span class=\"k\">var</span> _cccEventsShieldEvents <span class=\"k\">=</span>  <span class=\"k\">[</span><span class=\"s\">'mouseover'</span><span class=\"k\">,</span> <span class=\"s\">'mouseout'</span><span class=\"k\">,</span> <span class=\"s\">'mousemove'</span><span class=\"k\">];</span>","        ","        installCccEventsShield <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>element<span class=\"k\">.</span>_cccEventsShield<span class=\"k\">)</span><span class=\"k\">{</span>","                element<span class=\"k\">.</span>_cccEventsShield <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                ","                _cccEventsShieldEvents<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>evName<span class=\"k\">)</span><span class=\"k\">{</span>","                    addListener<span class=\"k\">(</span>element<span class=\"k\">,</span> evName<span class=\"k\">,</span> stopEventPropagation<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> stopEventPropagation <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>ev<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>ev<span class=\"k\">)</span><span class=\"k\">{</span> ev <span class=\"k\">=</span> window<span class=\"k\">.</span>event<span class=\"k\">;</span> <span class=\"k\">}</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>ev<span class=\"k\">.</span>stopPropagation<span class=\"k\">)</span> <span class=\"k\">{</span>","                ev<span class=\"k\">.</span>stopPropagation<span class=\"k\">();</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                ev<span class=\"k\">.</span>cancelBubble <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> addListener <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>elem<span class=\"k\">,</span> type<span class=\"k\">,</span> listener<span class=\"k\">)</span><span class=\"k\">{</span>","            elem<span class=\"k\">.</span>addEventListener","                <span class=\"k\">?</span> elem<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span>type<span class=\"k\">,</span> listener<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">)</span>","                <span class=\"k\">:</span> elem<span class=\"k\">.</span>attachEvent<span class=\"k\">(</span><span class=\"s\">\"on\"</span> <span class=\"k\">+</span> type<span class=\"k\">,</span> listener<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    ","    <span class=\"c\">/* CCC Charts Options */</span>","    <span class=\"k\">var</span> ruleStrokeStyle <span class=\"k\">=</span> <span class=\"s\">\"#808285\"</span><span class=\"k\">;</span>  <span class=\"c\">// #D8D8D8',  // #f0f0f0</span>","    <span class=\"k\">var</span> lineStrokeStyle <span class=\"k\">=</span> <span class=\"s\">\"#D1D3D4\"</span><span class=\"k\">;</span>  <span class=\"c\">// \"#D1D3D4\"; //'#A0A0A0'; // #D8D8D8',// #f0f0f0</span>","       ","    <span class=\"k\">function</span> legendShapeColorProp<span class=\"k\">(</span>scene<span class=\"k\">)</span><span class=\"k\">{</span>","       <span class=\"k\">var</span> color <span class=\"k\">=</span> scene<span class=\"k\">.</span>color<span class=\"k\">;</span>","       <span class=\"k\">return</span> scene<span class=\"k\">.</span>isOn<span class=\"k\">()</span> <span class=\"k\">?</span> color <span class=\"k\">:</span> pvc<span class=\"k\">.</span>toGrayScale<span class=\"k\">(</span>color<span class=\"k\">);</span>","    <span class=\"k\">}</span>","       ","    <span class=\"k\">var</span> baseOptions <span class=\"k\">=</span> <span class=\"k\">{</span>","        <span class=\"c\">/* Chart */</span>","        compatVersion<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"c\">// use CCCv2</span>","        ","        margins<span class=\"k\">:</span>  <span class=\"s\">0</span><span class=\"k\">,</span>","        paddings<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">,</span>","        plotFrameVisible<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Multichart */</span>","        multiChartMax<span class=\"k\">:</span> <span class=\"s\">50</span><span class=\"k\">,</span>","    ","        <span class=\"c\">/* Legend */</span>","        legend<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","        legendPosition<span class=\"k\">:</span>  <span class=\"s\">'right'</span><span class=\"k\">,</span>","        legendSizeMax<span class=\"k\">:</span>   <span class=\"s\">'60%'</span><span class=\"k\">,</span>","        legendPaddings<span class=\"k\">:</span>  <span class=\"s\">10</span><span class=\"k\">,</span>","        legendItemPadding<span class=\"k\">:</span> <span class=\"k\">{</span>left<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> right<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> top<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">,</span> bottom<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"c\">// width: 2, height: 4</span>","        legendClickMode<span class=\"k\">:</span> <span class=\"s\">'toggleSelected'</span><span class=\"k\">,</span>","        color2AxisLegendClickMode<span class=\"k\">:</span> <span class=\"s\">'toggleSelected'</span><span class=\"k\">,</span> <span class=\"c\">// for data part 2 (lines in column/line combo)</span>","        color3AxisLegendClickMode<span class=\"k\">:</span> <span class=\"s\">'toggleSelected'</span><span class=\"k\">,</span> <span class=\"c\">// for trends</span>","        ","        <span class=\"c\">/* Axes */</span>","        axisSizeMax<span class=\"k\">:</span>      <span class=\"s\">'50%'</span><span class=\"k\">,</span>","        axisTitleSizeMax<span class=\"k\">:</span> <span class=\"s\">'20%'</span><span class=\"k\">,</span>","        orthoAxisGrid<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Continuous axes */</span>","        continuousAxisLabelSpacingMin<span class=\"k\">:</span> <span class=\"s\">1.1</span><span class=\"k\">,</span> <span class=\"c\">// em</span>","        ","        <span class=\"c\">/* Title */</span>","        titlePosition<span class=\"k\">:</span> <span class=\"s\">'top'</span><span class=\"k\">,</span>","","        <span class=\"c\">/* Interactivity */</span>","        interactive<span class=\"k\">:</span>    <span class=\"k\">true</span><span class=\"k\">,</span>","        animate<span class=\"k\">:</span>        <span class=\"k\">false</span><span class=\"k\">,</span>","        tooltipEnabled<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        clickable<span class=\"k\">:</span>      <span class=\"k\">true</span><span class=\"k\">,</span>","        selectable<span class=\"k\">:</span>     <span class=\"k\">true</span><span class=\"k\">,</span>","        hoverable<span class=\"k\">:</span>      <span class=\"k\">false</span><span class=\"k\">,</span>","        ctrlSelectMode<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        clearSelectionMode<span class=\"k\">:</span> <span class=\"s\">'manual'</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Plot */</span>","        valuesVisible<span class=\"k\">:</span>  <span class=\"k\">false</span><span class=\"k\">,</span>","        ","        ignoreNulls<span class=\"k\">:</span>   <span class=\"k\">false</span><span class=\"k\">,</span>","        groupedLabelSep<span class=\"k\">:</span> <span class=\"s\">\"~\"</span><span class=\"k\">,</span>","        ","        crosstabMode<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","        isMultiValued<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        seriesInRows<span class=\"k\">:</span>  <span class=\"k\">false</span><span class=\"k\">,</span>","        dataOptions<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"c\">//categoriesCount:   1, set in code</span>","            measuresInColumns<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","            axisRule_strokeStyle<span class=\"k\">:</span>   ruleStrokeStyle<span class=\"k\">,</span>","            axisTicks_strokeStyle<span class=\"k\">:</span>  lineStrokeStyle<span class=\"k\">,</span>","            dot_lineWidth<span class=\"k\">:</span> <span class=\"s\">1.5</span><span class=\"k\">,</span>","            legendArea_lineWidth<span class=\"k\">:</span>       <span class=\"s\">1</span><span class=\"k\">,</span>","            legendArea_strokeStyle<span class=\"k\">:</span>     <span class=\"s\">'#c0c0c0'</span><span class=\"k\">,</span>","            legendLabel_textDecoration<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            legendDot_fillStyle<span class=\"k\">:</span>    legendShapeColorProp<span class=\"k\">,</span>","            legendDot_strokeStyle<span class=\"k\">:</span>  legendShapeColorProp<span class=\"k\">,</span>","            legend2Dot_fillStyle<span class=\"k\">:</span>   legendShapeColorProp<span class=\"k\">,</span>","            legend2Dot_strokeStyle<span class=\"k\">:</span> legendShapeColorProp","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        tooltip<span class=\"k\">:</span> <span class=\"k\">{</span>","            delayIn<span class=\"k\">:</span>      <span class=\"s\">200</span><span class=\"k\">,</span>","            delayOut<span class=\"k\">:</span>     <span class=\"s\">80</span><span class=\"k\">,</span>","            offset<span class=\"k\">:</span>       <span class=\"s\">2</span><span class=\"k\">,</span>","            html<span class=\"k\">:</span>         <span class=\"k\">true</span><span class=\"k\">,</span>","            gravity<span class=\"k\">:</span>      <span class=\"s\">'nw'</span><span class=\"k\">,</span>","            fade<span class=\"k\">:</span>         <span class=\"k\">false</span><span class=\"k\">,</span>","            followMouse<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","            useCorners<span class=\"k\">:</span>   <span class=\"k\">true</span><span class=\"k\">,</span>","            arrowVisible<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            opacity<span class=\"k\">:</span>      <span class=\"s\">1</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">var</span> mixinDiscreteXOptions <span class=\"k\">=</span> <span class=\"k\">{</span>","        extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","            xAxisLabel_textAngle<span class=\"k\">:</span>    <span class=\"k\">-</span>Math<span class=\"k\">.</span>PI<span class=\"k\">/</span><span class=\"s\">4</span><span class=\"k\">,</span>","            xAxisLabel_textAlign<span class=\"k\">:</span>    <span class=\"s\">'right'</span><span class=\"k\">,</span>","            xAxisLabel_textBaseline<span class=\"k\">:</span> <span class=\"s\">'top'</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// ------------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.Chart'</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>init<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>element<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_element <span class=\"k\">=</span> element<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_elementName <span class=\"k\">=</span> element<span class=\"k\">.</span>id<span class=\"k\">;</span>","        ","        <span class=\"k\">if</span><span class=\"k\">(</span>installCccEventsShield<span class=\"k\">)</span> <span class=\"k\">{</span> installCccEventsShield<span class=\"k\">(</span>element<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _options<span class=\"k\">:</span> baseOptions<span class=\"k\">,</span>","        ","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'columns'</span><span class=\"k\">:</span>  <span class=\"s\">'series'</span><span class=\"k\">,</span>","            <span class=\"s\">'rows'</span><span class=\"k\">:</span>     <span class=\"s\">'category'</span><span class=\"k\">,</span>","            <span class=\"s\">'multi'</span><span class=\"k\">:</span>    <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","            <span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"s\">'value'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _keyAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">],</span>","        _axesIds<span class=\"k\">:</span>    <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">],</span>","","        <span class=\"c\">/* This takes creation time dependencies into account.</span>","<span class=\"c\">         * It works right now. If it doesn't scale,</span>","<span class=\"c\">         * then some parts of axes initialization must me taken out</span>","<span class=\"c\">         * of the axes class or split into more initialization phases.</span>","<span class=\"c\">         */</span>","        _axesCreateOrderIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">],</span>","","        <span class=\"c\">/* This is the order in which fields</span>","<span class=\"c\">         * are laid out in the CCC's virtual item.</span>","<span class=\"c\">         * Indexes of readers are relative to this layout.</span>","<span class=\"c\">         */</span>","        _cccVirtualItemAxesLayout<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'measure'</span><span class=\"k\">],</span>","      ","        <span class=\"c\">/* The drilling axes.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * In the order to be tested</span>","<span class=\"c\">         * for being chosen as the drilling axis.</span>","<span class=\"c\">         */</span>","        _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">],</span>","        ","        <span class=\"c\">/* The linking axes.</span>","<span class=\"c\">        *</span>","<span class=\"c\">        * In the order to be tested</span>","<span class=\"c\">        * for being chosen as the link axis.</span>","<span class=\"c\">        */</span>","        _linkAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'column'</span><span class=\"k\">,</span> <span class=\"s\">'row'</span><span class=\"k\">],</span>","        ","        <span class=\"c\">/* Measure roles that do not show the role in the tooltip.</span>","<span class=\"c\">         */</span>","        _noRoleInTooltipMeasureRoles<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* Do not show percent in front of an analyzer \"percent measure\" gem.</span>","<span class=\"c\">         */</span>","        _noPercentInTootltipForPercentGems<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        ","        _multiRole<span class=\"k\">:</span> <span class=\"s\">'multi'</span><span class=\"k\">,</span>","        ","        _discreteColorRole<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* PLUGIN INTERFACE  */</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Instructs the visualization to draw itself with</span>","<span class=\"c\">         * supplied data and options.</span>","<span class=\"c\">         */</span>","        draw<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>dataTable<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// CDA table</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_metadata  <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_resultset <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            ","            <span class=\"c\">// Pentaho/Google data table</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable <span class=\"k\">=</span> dataTable<span class=\"k\">;</span>","            ","            <span class=\"c\">/* TEST</span>","<span class=\"c\">            if(!vizOptions.memberPalette){</span>","<span class=\"c\">                vizOptions.memberPalette = {</span>","<span class=\"c\">                    \"[Markets].[Territory]\": {</span>","<span class=\"c\">                        \"[Markets].[APAC]\":   \"red\",</span>","<span class=\"c\">                        \"[Markets].[EMEA]\":   \"green\",</span>","<span class=\"c\">                        \"[Markets].[Japan]\":  \"blue\",</span>","<span class=\"c\">                        \"[Markets].[NA]\":     \"pink\"</span>","<span class=\"c\">                    },</span>","<span class=\"c\">                    </span>","<span class=\"c\">                    \"[Measures].[MeasuresLevel]\": {</span>","<span class=\"c\">                        \"[MEASURE:0]\": \"violet\",</span>","<span class=\"c\">                        \"[MEASURE:1]\": \"orange\"</span>","<span class=\"c\">                    }</span>","<span class=\"c\">                };</span>","<span class=\"c\">            }</span>","<span class=\"c\">            */</span>","            ","            <span class=\"c\">// ---------------</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_initOptions<span class=\"k\">(</span>vizOptions<span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_processDataTable<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_initAxes<span class=\"k\">();</span>","","            <span class=\"c\">// ---------------</span>","","            <span class=\"k\">var</span> rowDepth <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>depth<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>dataOptions<span class=\"k\">.</span>categoriesCount <span class=\"k\">=</span> rowDepth<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>hasMulti <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>hasMulti<span class=\"k\">;</span>","","            <span class=\"c\">// ---------------</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_readUserOptions<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","            ","            <span class=\"c\">// ---------------</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_readData<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configure<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_prepareLayout<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_render<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        resize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Resize event throttling</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                clearTimeout<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout <span class=\"k\">=</span> setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_lastResizeTimeout <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_doResize<span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">);</span>","                ","            <span class=\"k\">}</span><span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">),</span> <span class=\"s\">50</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _doResize<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>options<span class=\"k\">;</span> ","                ","                def<span class=\"k\">.</span>set<span class=\"k\">(</span>options<span class=\"k\">,</span> <span class=\"s\">'width'</span><span class=\"k\">,</span> width<span class=\"k\">,</span> <span class=\"s\">'height'</span><span class=\"k\">,</span> height<span class=\"k\">);</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_prepareLayout<span class=\"k\">(</span>options<span class=\"k\">);</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>render<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Sets the items on the chart that should be highlighted */</span>","        setHighlights<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selections<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_selections <span class=\"k\">=</span> selections<span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_ownChange<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// reentry control</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>selections <span class=\"k\">||</span> selections<span class=\"k\">.</span>length <span class=\"k\">==</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// will cause selectionChangedAction being called</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_ownChange <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">try</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>clearSelections<span class=\"k\">();</span>","                    <span class=\"k\">}</span> <span class=\"k\">finally</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_ownChange <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">// TODO: what's this for? Column/Bar?</span>","        <span class=\"c\">/* Returns the output parameters of the chart. */</span>","        getOutputParameters<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_cccClass <span class=\"k\">==</span> <span class=\"s\">'pvc.PieChart'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                params<span class=\"k\">.</span>push<span class=\"k\">([</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">),</span>","                        <span class=\"k\">true</span><span class=\"k\">,</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span> <span class=\"s\">0</span> <span class=\"k\">)</span>","                    <span class=\"k\">]);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> j <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">()</span> <span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    params<span class=\"k\">.</span>push<span class=\"k\">([</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>j<span class=\"k\">),</span>","                            <span class=\"k\">true</span><span class=\"k\">,</span>","                            <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>j<span class=\"k\">)</span>","                        <span class=\"k\">]);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> params<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* HELPERS  */</span>","","        _initOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Make a copy</span>","            vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions <span class=\"k\">=</span> $<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper <span class=\"k\">=</span> cv<span class=\"k\">.</span>pentahoVisualizationHelpers<span class=\"k\">[</span>vizOptions<span class=\"k\">.</span>customChartType<span class=\"k\">];</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_hasContentLink <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>isInteractionEnabled<span class=\"k\">()</span> <span class=\"k\">&amp;&amp;</span> ","                                   <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>hasContentLink<span class=\"k\">();</span>","","            <span class=\"c\">// Store the current selections</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_selections <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>selections<span class=\"k\">;</span>","            ","            <span class=\"c\">// Recursively inherit this class' shared options</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options <span class=\"k\">=</span> def<span class=\"k\">.</span>create<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_options<span class=\"k\">);</span>","            def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                options<span class=\"k\">,</span>","                <span class=\"s\">'canvas'</span><span class=\"k\">,</span>          <span class=\"k\">this</span><span class=\"k\">.</span>_elementName<span class=\"k\">,</span>","                <span class=\"s\">'height'</span><span class=\"k\">,</span>          vizOptions<span class=\"k\">.</span>height <span class=\"k\">||</span> <span class=\"s\">400</span><span class=\"k\">,</span>","                <span class=\"s\">'width'</span><span class=\"k\">,</span>           vizOptions<span class=\"k\">.</span>width  <span class=\"k\">||</span> <span class=\"s\">400</span><span class=\"k\">,</span>","                <span class=\"s\">'dimensionGroups'</span><span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","                <span class=\"s\">'dimensions'</span><span class=\"k\">,</span>      <span class=\"k\">{}</span><span class=\"k\">,</span>","                <span class=\"s\">'visualRoles'</span><span class=\"k\">,</span>     <span class=\"k\">{}</span><span class=\"k\">,</span>","                <span class=\"s\">'readers'</span><span class=\"k\">,</span>         <span class=\"k\">[],</span> ","                <span class=\"s\">'calculations'</span><span class=\"k\">,</span>    <span class=\"k\">[]);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","       ","        _message<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>msgId<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>message<span class=\"k\">(</span>msgId<span class=\"k\">,</span> args<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _setNullInterpolationMode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> value<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _readUserOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Apply vizOptions to extension points and others</span>","            <span class=\"k\">var</span> extPoints <span class=\"k\">=</span> options<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>backgroundFill<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">&amp;&amp;</span> value <span class=\"k\">!==</span> <span class=\"s\">'NONE'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> fillStyle<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">===</span> <span class=\"s\">'GRADIENT'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// Use the first color with half of the saturation</span>","                        <span class=\"k\">var</span> bgColor <span class=\"k\">=</span> pv<span class=\"k\">.</span>color<span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>backgroundColor<span class=\"k\">).</span>rgb<span class=\"k\">();</span>","                        bgColor <span class=\"k\">=</span> pv<span class=\"k\">.</span>rgb<span class=\"k\">(</span>","                                <span class=\"k\">~~((</span><span class=\"s\">255</span> <span class=\"k\">+</span> bgColor<span class=\"k\">.</span>r<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">),</span> <span class=\"c\">// ~~ &lt;=&gt; Math.floor</span>","                                <span class=\"k\">~~((</span><span class=\"s\">255</span> <span class=\"k\">+</span> bgColor<span class=\"k\">.</span>g<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">),</span>","                                <span class=\"k\">~~((</span><span class=\"s\">255</span> <span class=\"k\">+</span> bgColor<span class=\"k\">.</span>b<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">),</span>","                                bgColor<span class=\"k\">.</span>a<span class=\"k\">);</span>","                        ","                        fillStyle <span class=\"k\">=</span> bgColor<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        fillStyle <span class=\"k\">=</span> <span class=\"s\">'linear-gradient(to top, '</span> <span class=\"k\">+</span> ","                                    vizOptions<span class=\"k\">.</span>backgroundColor <span class=\"k\">+</span> <span class=\"s\">', '</span> <span class=\"k\">+</span> ","                                    vizOptions<span class=\"k\">.</span>backgroundColorEnd <span class=\"k\">+</span> <span class=\"s\">')'</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    fillStyle <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>backgroundColor<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                extPoints<span class=\"k\">.</span>base_fillStyle <span class=\"k\">=</span> fillStyle<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>labelColor<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                extPoints<span class=\"k\">.</span>axisLabel_textStyle <span class=\"k\">=</span>  ","                extPoints<span class=\"k\">.</span>axisTitleLabel_textStyle <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">''</span> <span class=\"k\">+</span> vizOptions<span class=\"k\">.</span>showLegend<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'true'</span><span class=\"k\">;</span>","            options<span class=\"k\">.</span>legend <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","                value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>legendColor<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                    extPoints<span class=\"k\">.</span>legendLabel_textStyle <span class=\"k\">=</span> value<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">// TODO: ignoring white color cause analyzer has no on-off for the legend bg color</span>","                <span class=\"c\">// and always send white. When the chart bg color is active it</span>","                <span class=\"c\">// would not show through the legend.</span>","                value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>legendBackgroundColor<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">&amp;&amp;</span> value<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">!==</span> <span class=\"s\">\"#ffffff\"</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    extPoints<span class=\"k\">.</span>legendArea_fillStyle <span class=\"k\">=</span> value<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>legendPosition<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","                    options<span class=\"k\">.</span>legendPosition <span class=\"k\">=</span> value<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","                <span class=\"k\">}</span>","                ","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>legendSize<span class=\"k\">)</span><span class=\"k\">{</span>","                    options<span class=\"k\">.</span>legendFont <span class=\"k\">=</span> readFont<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'legend'</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>lineWidth<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                extPoints<span class=\"k\">.</span>line_lineWidth  <span class=\"k\">=</span> <span class=\"k\">+</span>value<span class=\"k\">;</span>      <span class=\"c\">// + -&gt; to number</span>","                <span class=\"k\">var</span> radius <span class=\"k\">=</span> <span class=\"s\">3</span> <span class=\"k\">+</span> <span class=\"s\">6</span> <span class=\"k\">*</span> <span class=\"k\">((+</span>value<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">8</span><span class=\"k\">);</span> <span class=\"c\">// 1 -&gt; 8 =&gt; 3 -&gt; 9,</span>","                extPoints<span class=\"k\">.</span>dot_shapeSize <span class=\"k\">=</span> radius <span class=\"k\">*</span> radius<span class=\"k\">;</span>","                ","                extPoints<span class=\"k\">.</span>plot2Line_lineWidth <span class=\"k\">=</span> extPoints<span class=\"k\">.</span>line_lineWidth<span class=\"k\">;</span> ","                extPoints<span class=\"k\">.</span>plot2Dot_shapeSize  <span class=\"k\">=</span> extPoints<span class=\"k\">.</span>dot_shapeSize<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>maxChartsPerRow<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>multiChartColumnsMax <span class=\"k\">=</span> <span class=\"k\">+</span>value<span class=\"k\">;</span> <span class=\"c\">// + -&gt; to number</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>emptyCellMode<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">switch</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">case</span> <span class=\"s\">'GAP'</span><span class=\"k\">:</span>    value <span class=\"k\">=</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>   <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> <span class=\"s\">'ZERO'</span><span class=\"k\">:</span>   value <span class=\"k\">=</span> <span class=\"s\">'zero'</span><span class=\"k\">;</span>   <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> <span class=\"s\">'LINEAR'</span><span class=\"k\">:</span> value <span class=\"k\">=</span> <span class=\"s\">'linear'</span><span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_setNullInterpolationMode<span class=\"k\">(</span>options<span class=\"k\">,</span> value<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>multiChartRangeScope<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">switch</span><span class=\"k\">(</span>value<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">case</span> <span class=\"s\">'GLOBAL'</span><span class=\"k\">:</span> value <span class=\"k\">=</span> <span class=\"s\">'global'</span><span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> <span class=\"s\">'CELL'</span><span class=\"k\">:</span>   value <span class=\"k\">=</span> <span class=\"s\">'cell'</span><span class=\"k\">;</span>   <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                options<span class=\"k\">.</span>numericAxisDomainScope <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// build style for pv</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>labelSize<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> labelFont <span class=\"k\">=</span> readFont<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">);</span>","                ","                options<span class=\"k\">.</span>axisTitleFont <span class=\"k\">=</span> ","                options<span class=\"k\">.</span>axisFont <span class=\"k\">=</span> labelFont<span class=\"k\">;</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> labelFontSize   <span class=\"k\">=</span> readFontSize<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">);</span>","                    <span class=\"k\">var</span> labelFontFamily <span class=\"k\">=</span> readFontFamily<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">);</span>","                    options<span class=\"k\">.</span>titleFont <span class=\"k\">=</span> <span class=\"k\">(</span>labelFontSize <span class=\"k\">+</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"px \"</span> <span class=\"k\">+</span> labelFontFamily<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> sizeByNegativesMode <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>sizeByNegativesMode<span class=\"k\">;</span>","            options<span class=\"k\">.</span>sizeAxisUseAbs <span class=\"k\">=</span> sizeByNegativesMode <span class=\"k\">===</span> <span class=\"s\">'USE_ABS'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _processDataTable<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">// Data truncation can affect also the structure of data.</span>","            <span class=\"c\">// If the query returns more than 100x100 rowsxcols,</span>","            <span class=\"c\">// requested measure formulas may be suppressed.</span>","            <span class=\"c\">// Filter measures not returned in this._dataTable</span>","            <span class=\"c\">//</span>","            <span class=\"c\">// Note that there is no guarantee that</span>","            <span class=\"c\">// when a given measure is not present with a given col value</span>","            <span class=\"c\">// it will not show up in the next col value</span>","            <span class=\"c\">// When no row has a value in a given column, the column is omitted...</span>","            <span class=\"c\">//</span>","            <span class=\"c\">// Note that measure gems that are in no *chart* gem bar (not mapped)</span>","            <span class=\"c\">// and that do not have hideInChart=true may appear here as columns.</span>","            <span class=\"c\">// These are ignored (meaRole === 'undefined').</span>","            <span class=\"c\">// </span>","            <span class=\"c\">// Measure columns of the same col values group may come in any order...</span>","            <span class=\"c\">// and even in different orders across column groups.</span>","","            <span class=\"k\">var</span> dataTable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">;</span>","            <span class=\"k\">var</span> dtColCount <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">();</span>","            <span class=\"k\">var</span> roleToCccDimMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rolesToCccDimensionsMap<span class=\"k\">;</span>","            <span class=\"k\">var</span> colGroups <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> colGroupsByColValues <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","            <span class=\"c\">/* </span>","<span class=\"c\">             * meaRoleId -&gt; {</span>","<span class=\"c\">             *   groupIndex: 0, // Global order of measure roles within a column group</span>","<span class=\"c\">             *   index: 0       // Column index of a measure role's first appearance</span>","<span class=\"c\">             * }</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> measureRolesInfo     <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> measureRolesInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"c\">/*</span>","<span class=\"c\">             * id -&gt; { gem info }</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> measuresInfo <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> measuresInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","                        ","            <span class=\"k\">var</span> rowsInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> columnsInfoList <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"k\">var</span> tc <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> colId<span class=\"k\">,</span> splitColId<span class=\"k\">;</span>","            ","            <span class=\"c\">/*</span>","<span class=\"c\">             * I - Row gems</span>","<span class=\"c\">             */</span>","            <span class=\"k\">while</span><span class=\"k\">(</span>tc <span class=\"k\">&lt;</span> dtColCount<span class=\"k\">)</span><span class=\"k\">{</span>","                colId <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">);</span>","                splitColId <span class=\"k\">=</span> splitColGroupAndMeasure<span class=\"k\">(</span>colId<span class=\"k\">);</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(!</span>processRowColumn<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> splitColId<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">// Found first measure column</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">// next</span>","                tc<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// First measure column</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>tc <span class=\"k\">&lt;</span> dtColCount<span class=\"k\">)</span><span class=\"k\">{</span>","                ","                <span class=\"c\">/*</span>","<span class=\"c\">                 * II - Column gems</span>","<span class=\"c\">                 * </span>","<span class=\"c\">                 * Collects column gems' roles from the first col~mea column.</span>","<span class=\"c\">                 */</span>","                processColumnsInfo<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> splitColId<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","                ","                <span class=\"c\">/*</span>","<span class=\"c\">                 * III - Row gems</span>","<span class=\"c\">                 */</span>","                <span class=\"k\">while</span><span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    processMeasureColumn<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> splitColId<span class=\"k\">);</span>","                    ","                    <span class=\"c\">// next</span>","                    <span class=\"k\">if</span><span class=\"k\">(++</span>tc <span class=\"k\">&gt;=</span> dtColCount<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    ","                    colId <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">);</span>","                    splitColId <span class=\"k\">=</span> splitColGroupAndMeasure<span class=\"k\">(</span>colId<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Sort measure roles</span>","            measureRolesInfoList<span class=\"k\">.</span>sort<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>infoa<span class=\"k\">,</span> infob<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> def<span class=\"k\">.</span>compare<span class=\"k\">(</span>infoa<span class=\"k\">.</span>groupIndex<span class=\"k\">,</span> infob<span class=\"k\">.</span>groupIndex<span class=\"k\">)</span> <span class=\"k\">||</span>","                       def<span class=\"k\">.</span>compare<span class=\"k\">(</span>infoa<span class=\"k\">.</span>index<span class=\"k\">,</span>      infob<span class=\"k\">.</span>index<span class=\"k\">)</span> <span class=\"c\">// tie breaker</span>","                <span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">// Reassign role group indexes</span>","            measureRolesInfoList<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>roleInfo<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                roleInfo<span class=\"k\">.</span>groupIndex <span class=\"k\">=</span> index<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">// Publish</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureRolesInfo <span class=\"k\">=</span> measureRolesInfo<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureRolesInfoList <span class=\"k\">=</span> measureRolesInfoList<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_colGroups <span class=\"k\">=</span> colGroups<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measuresInfo <span class=\"k\">=</span> measuresInfo<span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesGemsInfo <span class=\"k\">=</span> <span class=\"k\">{</span>","                <span class=\"s\">'measure'</span><span class=\"k\">:</span> measuresInfoList<span class=\"k\">,</span>","                <span class=\"s\">'row'</span><span class=\"k\">:</span>     rowsInfoList<span class=\"k\">,</span>","                <span class=\"s\">'column'</span><span class=\"k\">:</span>  columnsInfoList","            <span class=\"k\">}</span><span class=\"k\">;</span>","            ","            ","            <span class=\"c\">/* HELPER functions */</span>","            ","            <span class=\"k\">function</span> processRowColumn<span class=\"k\">(</span>colGroupValues<span class=\"k\">,</span> meaId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"s\">/\\[MEASURE:(\\d+)\\]$/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>meaId<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"c\">// Found the first measure column</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// It isn't a \"row\" column</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">// When \"Member properties\" are shown in a member gem,</span>","                <span class=\"c\">// additional columns are added to the data table, </span>","                <span class=\"c\">// that are to be ignored.</span>","                <span class=\"c\">// These columns have no column role.</span>","                <span class=\"c\">// We transform them to 'undefined' role</span>","                <span class=\"c\">// which is the role value that unmapped measure columns</span>","                <span class=\"c\">// already have.</span>","                <span class=\"k\">var</span> rolesAndLevels <span class=\"k\">=</span> getColumnRolesAndLevels<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">);</span>","                ","                <span class=\"c\">// A row gem</span>","                rowsInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    id<span class=\"k\">:</span>      colId<span class=\"k\">,</span>","                    formula<span class=\"k\">:</span> colId<span class=\"k\">,</span>","                    label<span class=\"k\">:</span>   dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>tc<span class=\"k\">),</span>","                    axis<span class=\"k\">:</span>    <span class=\"s\">'row'</span><span class=\"k\">,</span>","                    role<span class=\"k\">:</span>    rolesAndLevels <span class=\"k\">?</span> rolesAndLevels<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>id <span class=\"k\">:</span> <span class=\"s\">'undefined'</span><span class=\"k\">,</span>","                    index<span class=\"k\">:</span>   rowsInfoList<span class=\"k\">.</span>length","                <span class=\"k\">}</span><span class=\"k\">);</span>","                ","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// It is a \"row\" column</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Column Roles are the same in every col~measure column.</span>","            <span class=\"c\">// So we collect them from the first one.</span>","            <span class=\"k\">function</span> processColumnsInfo<span class=\"k\">(</span>colGroupValues<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>colGroupValues<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> rolesAndLevels <span class=\"k\">=</span> getColumnRolesAndLevels<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">);</span>","                    <span class=\"k\">var</span> colValues <span class=\"k\">=</span> colGroupValues<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","                    ","                    colValues<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>colValue<span class=\"k\">,</span> index<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> roleAndLevel <span class=\"k\">=</span> rolesAndLevels<span class=\"k\">[</span>index<span class=\"k\">];</span>","                        columnsInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                            id<span class=\"k\">:</span>      roleAndLevel<span class=\"k\">.</span>level<span class=\"k\">,</span>","                            formula<span class=\"k\">:</span> roleAndLevel<span class=\"k\">.</span>level<span class=\"k\">,</span>","                            label<span class=\"k\">:</span>   undefined<span class=\"k\">,</span> <span class=\"c\">// not in data table</span>","                            axis<span class=\"k\">:</span>    <span class=\"s\">'column'</span><span class=\"k\">,</span>","                            role<span class=\"k\">:</span>    roleAndLevel<span class=\"k\">.</span>id<span class=\"k\">,</span>","                            index<span class=\"k\">:</span>   index","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> processMeasureColumn<span class=\"k\">(</span>colGroupValues<span class=\"k\">,</span> id<span class=\"k\">)</span><span class=\"k\">{</span>","                ","                <span class=\"k\">var</span> meaInfo <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span>measuresInfo<span class=\"k\">,</span> id<span class=\"k\">);</span>","                ","                <span class=\"c\">/* New measure? */</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>meaInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// TODO - last() ?</span>","                    <span class=\"k\">var</span> roleAndLevel <span class=\"k\">=</span> getColumnRolesAndLevels<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">).</span>pop<span class=\"k\">();</span>","                    ","                    <span class=\"c\">// NOTE: roleAndLevel.level == [Measures].[MeasuresLevel],</span>","                    <span class=\"c\">// which is not the formula...</span>","                    meaInfo <span class=\"k\">=</span> <span class=\"k\">{</span>  ","                        id<span class=\"k\">:</span>      id<span class=\"k\">,</span>","                        formula<span class=\"k\">:</span> undefined<span class=\"k\">,</span> <span class=\"c\">// not in data table </span>","                        label<span class=\"k\">:</span>   splitColGroupAndMeasure<span class=\"k\">(</span>dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>tc<span class=\"k\">))[</span><span class=\"s\">1</span><span class=\"k\">],</span>","                        axis<span class=\"k\">:</span>    <span class=\"s\">'measure'</span><span class=\"k\">,</span>","                        role<span class=\"k\">:</span>    roleAndLevel<span class=\"k\">.</span>id<span class=\"k\">,</span>","                        index<span class=\"k\">:</span>   measuresInfoList<span class=\"k\">.</span>length<span class=\"k\">,</span>","                        isUnmapped<span class=\"k\">:</span> roleAndLevel<span class=\"k\">.</span>id <span class=\"k\">===</span> <span class=\"s\">'undefined'</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","                    measuresInfo<span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> meaInfo<span class=\"k\">;</span>","                    measuresInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span>meaInfo<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">/* New column group? */</span>","                <span class=\"k\">var</span> colGroup <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span>colGroupsByColValues<span class=\"k\">,</span> colGroupValues<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>colGroup<span class=\"k\">)</span><span class=\"k\">{</span>","                    colGroup <span class=\"k\">=</span> <span class=\"k\">{</span>","                        index<span class=\"k\">:</span>      tc<span class=\"k\">,</span>","                        encValues<span class=\"k\">:</span>  colGroupValues<span class=\"k\">,</span>","                        values<span class=\"k\">:</span>     colGroupValues <span class=\"k\">?</span> colGroupValues<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">[],</span>","                        measureIds<span class=\"k\">:</span> <span class=\"k\">[</span>id<span class=\"k\">]</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","","                    colGroupsByColValues<span class=\"k\">[</span>colGroupValues<span class=\"k\">]</span> <span class=\"k\">=</span> colGroup<span class=\"k\">;</span>","                    colGroups<span class=\"k\">.</span>push<span class=\"k\">(</span>colGroup<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    colGroup<span class=\"k\">.</span>measureIds<span class=\"k\">.</span>push<span class=\"k\">(</span>id<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">/* Role */</span>","                <span class=\"k\">var</span> currMeaIndex <span class=\"k\">=</span> <span class=\"k\">(</span>tc <span class=\"k\">-</span> colGroup<span class=\"k\">.</span>index<span class=\"k\">);</span>","                <span class=\"k\">var</span> meaRoleInfo  <span class=\"k\">=</span> def<span class=\"k\">.</span>getOwn<span class=\"k\">(</span>measureRolesInfo<span class=\"k\">,</span> meaInfo<span class=\"k\">.</span>role<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>meaRoleInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                    meaRoleInfo <span class=\"k\">=</span> <span class=\"k\">{</span>","                        id<span class=\"k\">:</span>         roleAndLevel<span class=\"k\">.</span>id<span class=\"k\">,</span>","                        cccDimName<span class=\"k\">:</span> meaInfo<span class=\"k\">.</span>isUnmapped <span class=\"k\">?</span>","                                        <span class=\"k\">null</span> <span class=\"k\">:</span>","                                        <span class=\"k\">(</span>roleToCccDimMap<span class=\"k\">[</span>roleAndLevel<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">||</span>","                                         def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Must map to CCC all measure roles that the data table contains.\"</span><span class=\"k\">)),</span>","                        groupIndex<span class=\"k\">:</span> currMeaIndex<span class=\"k\">,</span>","                        index<span class=\"k\">:</span>      tc <span class=\"c\">// first index where role appears (for tie break, see .sort above)</span>","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                    ","                    measureRolesInfo<span class=\"k\">[</span>meaInfo<span class=\"k\">.</span>role<span class=\"k\">]</span> <span class=\"k\">=</span> meaRoleInfo<span class=\"k\">;</span>","                    measureRolesInfoList<span class=\"k\">.</span>push<span class=\"k\">(</span>meaRoleInfo<span class=\"k\">);</span>","","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>currMeaIndex <span class=\"k\">&gt;</span> meaRoleInfo<span class=\"k\">.</span>groupIndex<span class=\"k\">)</span> <span class=\"k\">{</span>","                    meaRoleInfo<span class=\"k\">.</span>groupIndex <span class=\"k\">=</span> currMeaIndex<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _initAxes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">/* formula, id -&gt; gem */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        ","            <span class=\"c\">/* roleId -&gt; axis */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>axisByRole <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            ","            <span class=\"c\">/* axisId -&gt; Axis */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>axes <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            ","            <span class=\"c\">/* Create and configure Axis's */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesCreateOrderIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span>createAxis<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","            <span class=\"k\">var</span> virtualItemIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> cccDimNamesSet <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_cccVirtualItemAxesLayout<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                virtualItemIndex <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>configure<span class=\"k\">(</span>virtualItemIndex<span class=\"k\">,</span> cccDimNamesSet<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            ","            <span class=\"c\">/* @instance */</span>","            <span class=\"k\">function</span> createAxis<span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","","                <span class=\"k\">var</span> axis <span class=\"k\">=</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Axis<span class=\"k\">.</span>create<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> axisId<span class=\"k\">);</span>","","                axis<span class=\"k\">.</span>gems<span class=\"k\">.</span>forEach<span class=\"k\">(</span>indexGem<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">]</span> <span class=\"k\">=</span> axis<span class=\"k\">;</span>","                ","                <span class=\"k\">var</span> boundRoleList <span class=\"k\">=</span> axis<span class=\"k\">.</span>boundRolesIdList<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>boundRoleList<span class=\"k\">)</span><span class=\"k\">{</span>","                    boundRoleList<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>roleId<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">!</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axisByRole<span class=\"k\">,</span> roleId<span class=\"k\">)</span> <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"A role cannot be in more than one axis\"</span><span class=\"k\">);</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>axisByRole<span class=\"k\">[</span>roleId<span class=\"k\">]</span> <span class=\"k\">=</span> axis<span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">/* @instance */</span>","            <span class=\"k\">function</span> indexGem<span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> form <span class=\"k\">=</span> gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                    id   <span class=\"k\">=</span> gem<span class=\"k\">.</span>id<span class=\"k\">;</span>","","                <span class=\"c\">// NOTE: when interaction is disabled...</span>","                <span class=\"c\">// formula and id aren't available in every axis type...</span>","          ","                <span class=\"c\">// Index by formula</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>form<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap<span class=\"k\">[</span>form<span class=\"k\">]</span> <span class=\"k\">=</span> gem<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span><span class=\"k\">(</span>id <span class=\"k\">&amp;&amp;</span> form <span class=\"k\">!==</span> id<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap<span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> gem<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>reportAxis <span class=\"k\">===</span> <span class=\"s\">'column'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem <span class=\"k\">=</span> gem<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _readData<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_readDataCrosstab<span class=\"k\">();</span> <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Creates a CCC resultset in CROSSTAB format.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * Data passes through mostly as it comes;</span>","<span class=\"c\">         * it's simply translated to CDA format.</span>","<span class=\"c\">         */</span>","        _readDataCrosstab<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> dataTable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">,</span>","                colCount <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">(),</span>","                rowCount <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">();</span>","","            <span class=\"c\">// Direct translation</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> tc <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> tc <span class=\"k\">&lt;</span> colCount <span class=\"k\">;</span> tc<span class=\"k\">++)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span>","                    dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">),</span>","                    dataTable<span class=\"k\">.</span>getColumnLabel<span class=\"k\">(</span>tc<span class=\"k\">),</span>","                    writeCccColumnDataType<span class=\"k\">(</span>dataTable<span class=\"k\">.</span>getColumnType<span class=\"k\">(</span>tc<span class=\"k\">)));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_resultset <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>rowCount<span class=\"k\">);</span>","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> tr <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> tr <span class=\"k\">&lt;</span> rowCount<span class=\"k\">;</span> tr<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>colCount<span class=\"k\">);</span>","","                <span class=\"k\">for</span><span class=\"k\">(</span>tc <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> tc <span class=\"k\">&lt;</span> colCount <span class=\"k\">;</span> tc<span class=\"k\">++)</span><span class=\"k\">{</span>","                    row<span class=\"k\">[</span>tc<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getTableCell<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                table<span class=\"k\">[</span>tr<span class=\"k\">]</span> <span class=\"k\">=</span> row<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">;</span>","            ","            <span class=\"c\">// By default hide overflow, otherwise, </span>","            <span class=\"c\">// resizing the window frequently ends up needlessly showing scrollbars. </span>","            <span class=\"c\">// TODO: is it ok to access \"vizOptions.controller.domNode\" ?</span>","            vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflow <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span> <span class=\"c\">// Hide overflow</span>","            ","            <span class=\"k\">var</span> colorScaleKind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getColorScaleKind<span class=\"k\">();</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>colorScaleKind<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureColor<span class=\"k\">(</span>colorScaleKind<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">((</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_showLegend<span class=\"k\">()))</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureLegend<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">this</span><span class=\"k\">.</span>_configureMultiChart<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureTrends<span class=\"k\">();</span>","            ","            options<span class=\"k\">.</span>axisFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>axisFont<span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">);</span>","            options<span class=\"k\">.</span>axisTitleFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>axisTitleFont<span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>isInteractionEnabled<span class=\"k\">())</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>interactive <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>options<span class=\"k\">.</span>tooltipEnabled<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_configureTooltip<span class=\"k\">();</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">((</span>options<span class=\"k\">.</span>selectable <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_canSelect<span class=\"k\">()))</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_configureSelection<span class=\"k\">();</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureDoubleClick<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getColorScaleKind<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">'discrete'</span><span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureColor<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>colorScaleKind<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">;</span>","            ","            <span class=\"k\">switch</span><span class=\"k\">(</span>colorScaleKind<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">case</span> <span class=\"s\">'discrete'</span><span class=\"k\">:</span>","                    options<span class=\"k\">.</span>colors <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDiscreteColorScale<span class=\"k\">();</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                    ","                <span class=\"k\">case</span> <span class=\"s\">'continuous'</span><span class=\"k\">:</span>","                    options<span class=\"k\">.</span>colorScaleType <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>colorScaleType<span class=\"k\">;</span>","                    options<span class=\"k\">.</span>colors <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>colors<span class=\"k\">;</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getDiscreteColorScale<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> memberPalette <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>memberPalette<span class=\"k\">;</span>","            <span class=\"k\">var</span> colorScale <span class=\"k\">=</span> memberPalette <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDiscreteColorScaleCore<span class=\"k\">(</span>memberPalette<span class=\"k\">);</span>","            <span class=\"k\">return</span> colorScale <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDefaultDiscreteColorScale<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getDefaultDiscreteColorScale<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>palette<span class=\"k\">.</span>colors<span class=\"k\">.</span>slice<span class=\"k\">();</span> <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getDiscreteColorScaleCore<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>memberPalette<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> colorRoleId <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_discreteColorRole<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>colorRoleId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// 1 - The CCC color role is not being explicitly set, so whatever goes to the series role is used by the color role</span>","                <span class=\"c\">// 2 - When a measure discrim is used and there is only one measure, the CCC dim name of the discriminator is</span>","                <span class=\"c\">//      not of the \"series\" group; so in this case, there's no discriminator in the key</span>","                ","                <span class=\"k\">var</span> colorAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axisByRole<span class=\"k\">[</span>colorRoleId<span class=\"k\">];</span>","                <span class=\"k\">var</span> colorGems <span class=\"k\">=</span> colorAxis <span class=\"k\">?</span> <span class=\"c\">// No gems?</span>","                                colorAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>colorRoleId<span class=\"k\">].</span>filter<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">!</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span> <span class=\"k\">:</span>","                                <span class=\"k\">[];</span>","                        ","                <span class=\"k\">var</span> C <span class=\"k\">=</span> colorGems<span class=\"k\">.</span>length<span class=\"k\">;</span>","                <span class=\"k\">var</span> M<span class=\"k\">;</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_cccClass <span class=\"k\">==</span> <span class=\"s\">'pvc.PieChart'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// When multiple measures exist, </span>","                    <span class=\"c\">// the pie chart shows them as multiple charts</span>","                    <span class=\"c\">// and if these would affect color, </span>","                    <span class=\"c\">// each small chart would have a single color.</span>","                    M <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    M <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>genericMeasuresCount<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">var</span> keyIncludesDiscrim <span class=\"k\">=</span> <span class=\"k\">(</span>M <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>C <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> M <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> colorMap<span class=\"k\">;</span>","                    <span class=\"k\">var</span> lastIndex<span class=\"k\">;</span>","                    <span class=\"c\">// var useMeasureGems = !C || keyIncludesDiscrim;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>M <span class=\"k\">&lt;=</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>C <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">// Use colors</span>","                            colorMap <span class=\"k\">=</span> memberPalette<span class=\"k\">[</span>colorGems<span class=\"k\">[</span>C <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">].</span>formula<span class=\"k\">];</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            <span class=\"c\">// Use measures (M === 1)</span>","                            colorMap <span class=\"k\">=</span> memberPalette<span class=\"k\">[</span><span class=\"s\">'[Measures].[MeasuresLevel]'</span><span class=\"k\">];</span>","                            <span class=\"k\">var</span> c <span class=\"k\">=</span> colorMap <span class=\"k\">&amp;&amp;</span> colorMap<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>gems<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>id<span class=\"k\">];</span>","                            <span class=\"k\">return</span> c <span class=\"k\">?</span> pv<span class=\"k\">.</span>colors<span class=\"k\">([</span>colorFromAnalyzer<span class=\"k\">(</span>c<span class=\"k\">)])</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"c\">// Use measures</span>","                        <span class=\"c\">// keyIncludesDiscrim ; assume discrim is always placed at the end</span>","                        lastIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        colorMap  <span class=\"k\">=</span> memberPalette<span class=\"k\">[</span><span class=\"s\">'[Measures].[MeasuresLevel]'</span><span class=\"k\">];</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"c\">// Is there a color map for the chosen hierarchy?</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>colorMap<span class=\"k\">)</span><span class=\"k\">{</span>","                        colorMap <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span>def<span class=\"k\">.</span>ownKeys<span class=\"k\">(</span>colorMap<span class=\"k\">))</span>","                                      <span class=\"k\">.</span>object<span class=\"k\">(</span><span class=\"k\">{</span> ","                                        value<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>k<span class=\"k\">)</span> <span class=\"k\">{</span>","                                            <span class=\"k\">return</span> colorFromAnalyzer<span class=\"k\">(</span>colorMap<span class=\"k\">[</span>k<span class=\"k\">]);</span> ","                                        <span class=\"k\">}</span>","                                      <span class=\"k\">}</span><span class=\"k\">);</span>","                        ","                        <span class=\"k\">var</span> defaultScale <span class=\"k\">=</span> pv<span class=\"k\">.</span>colors<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_getDefaultDiscreteColorScale<span class=\"k\">());</span>","                        <span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                            <span class=\"k\">var</span> scale <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>compKey<span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>compKey<span class=\"k\">)</span><span class=\"k\">{</span>","                                    <span class=\"k\">var</span> comps <span class=\"k\">=</span> compKey<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">/\\s*,\\s*/</span><span class=\"k\">);</span>","                                    <span class=\"k\">var</span> key   <span class=\"k\">=</span> comps<span class=\"k\">[</span>comps<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                                    <span class=\"k\">return</span> colorMap<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">||</span> defaultScale<span class=\"k\">(</span>key<span class=\"k\">);</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span><span class=\"k\">;</span>","                            ","                            def<span class=\"k\">.</span>copy<span class=\"k\">(</span>scale<span class=\"k\">,</span> defaultScale<span class=\"k\">);</span>","                            <span class=\"k\">return</span> scale<span class=\"k\">;</span>","                        <span class=\"k\">}</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureTrends<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> trendType <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_supportsTrends <span class=\"k\">?</span> vizOptions<span class=\"k\">.</span>trendType <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","            <span class=\"k\">switch</span><span class=\"k\">(</span>trendType<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">case</span> <span class=\"s\">'none'</span><span class=\"k\">:</span>","                <span class=\"k\">case</span> <span class=\"s\">'linear'</span><span class=\"k\">:</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">default</span><span class=\"k\">:</span> ","                    trendType <span class=\"k\">=</span> <span class=\"s\">'none'</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            options<span class=\"k\">.</span>trendType <span class=\"k\">=</span> trendType<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>trendType <span class=\"k\">!==</span> <span class=\"s\">'none'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> trendName <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>trendName<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>trendName<span class=\"k\">)</span><span class=\"k\">{</span>","                    trendName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'dropZoneLabels_TREND_NAME_'</span> <span class=\"k\">+</span> trendType<span class=\"k\">.</span>toUpperCase<span class=\"k\">());</span>","                <span class=\"k\">}</span>","                ","                options<span class=\"k\">.</span>trendLabel <span class=\"k\">=</span> trendName<span class=\"k\">;</span>","                ","                <span class=\"k\">var</span> value <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>trendLineWidth<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">!==</span> undefined<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> extPoints <span class=\"k\">=</span> options<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","                    ","                    extPoints<span class=\"k\">.</span>trendLine_lineWidth  <span class=\"k\">=</span> <span class=\"k\">+</span>value<span class=\"k\">;</span>      <span class=\"c\">// + -&gt; to number</span>","                    <span class=\"k\">var</span> radius <span class=\"k\">=</span> <span class=\"s\">3</span> <span class=\"k\">+</span> <span class=\"s\">6</span> <span class=\"k\">*</span> <span class=\"k\">((+</span>value<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">8</span><span class=\"k\">);</span> <span class=\"c\">// 1 -&gt; 8 =&gt; 3 -&gt; 9,</span>","                    extPoints<span class=\"k\">.</span>trendDot_shapeSize <span class=\"k\">=</span> radius <span class=\"k\">*</span> radius<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureMultiChart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","","            <span class=\"c\">// Let the vertical scrollbar show up if necessary</span>","            <span class=\"k\">var</span> containerStyle <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">;</span>","            containerStyle<span class=\"k\">.</span>overflowX <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","            containerStyle<span class=\"k\">.</span>overflowY <span class=\"k\">=</span> <span class=\"s\">'auto'</span><span class=\"k\">;</span>","            ","            <span class=\"c\">// Very small charts can't be dominated by text...</span>","            <span class=\"c\">//options.axisSizeMax = '30%';</span>","            ","            <span class=\"k\">var</span> titleFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>titleFont<span class=\"k\">,</span> <span class=\"s\">12</span><span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>titleFont <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!(</span><span class=\"s\">/black|(\\bbold\\b)/i</span><span class=\"k\">).</span>test<span class=\"k\">(</span>titleFont<span class=\"k\">))</span><span class=\"k\">{</span>","                titleFont <span class=\"k\">=</span> <span class=\"s\">\"bold \"</span> <span class=\"k\">+</span> titleFont<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            options<span class=\"k\">.</span>smallTitleFont <span class=\"k\">=</span> titleFont<span class=\"k\">;</span>","","            <span class=\"k\">var</span> multiChartOverflow <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>multiChartOverflow<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>multiChartOverflow<span class=\"k\">)</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>multiChartOverflow <span class=\"k\">=</span> multiChartOverflow<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureTooltip<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>tooltipFormat <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>scene<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>_getTooltipText<span class=\"k\">(</span>scene<span class=\"k\">.</span>datum<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _canSelect<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>selectable<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Selection is disabled if 2 or more reportAxis='column' gems exist</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis <span class=\"k\">&gt;=</span> <span class=\"s\">2</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>userSelectionAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccSelections<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> me<span class=\"k\">.</span>_onUserSelection<span class=\"k\">(</span>cccSelections<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>selectionChangedAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccSelections<span class=\"k\">)</span><span class=\"k\">{</span>","                me<span class=\"k\">.</span>_onSelectionChanged<span class=\"k\">(</span>cccSelections<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureDoubleClick<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>doubleClickAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>scene<span class=\"k\">)</span><span class=\"k\">{</span>","                me<span class=\"k\">.</span>_onDoubleClick<span class=\"k\">(</span>scene<span class=\"k\">.</span>datum<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>axisDoubleClickAction <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>scene<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> group <span class=\"k\">=</span> scene<span class=\"k\">.</span>group<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>group<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> me<span class=\"k\">.</span>_onDoubleClick<span class=\"k\">(</span>group<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _showLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> colAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">,</span>","                cccColDimGroup <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rolesToCccDimensionsMap<span class=\"k\">[</span>colAxis<span class=\"k\">.</span>defaultRole<span class=\"k\">];</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span>cccColDimGroup <span class=\"k\">||</span> colAxis<span class=\"k\">.</span>realDepth <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","","            options<span class=\"k\">.</span>legendFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span>options<span class=\"k\">.</span>legendFont<span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> legendPosition <span class=\"k\">=</span> options<span class=\"k\">.</span>legendPosition<span class=\"k\">,</span>","                isTopOrBottom <span class=\"k\">=</span> legendPosition <span class=\"k\">===</span> <span class=\"s\">'top'</span> <span class=\"k\">||</span> legendPosition <span class=\"k\">===</span> <span class=\"s\">'bottom'</span><span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>isTopOrBottom<span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>legendAlignTo  <span class=\"k\">=</span> <span class=\"s\">'page-middle'</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>legendKeepInBounds <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// ensure it is not placed off-page</span>","                ","                <span class=\"c\">// Ensure that legend margins is an object.</span>","                <span class=\"c\">// Preseve already specifed margins.</span>","                <span class=\"c\">// CCC's default adds a left or right 5 px margin,</span>","                <span class=\"c\">// to separate the legend from the content area.</span>","                <span class=\"k\">var</span> legendMargins <span class=\"k\">=</span> options<span class=\"k\">.</span>legendMargins<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>legendMargins<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>legendMargins<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'object'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        legendMargins <span class=\"k\">=</span> options<span class=\"k\">.</span>legendMargins <span class=\"k\">=</span> <span class=\"k\">{</span>all<span class=\"k\">:</span> legendMargins<span class=\"k\">}</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    legendMargins <span class=\"k\">=</span> options<span class=\"k\">.</span>legendMargins <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                    <span class=\"k\">var</span> oppositeSide <span class=\"k\">=</span> pvc<span class=\"k\">.</span>BasePanel<span class=\"k\">.</span>oppositeAnchor<span class=\"k\">[</span>legendPosition<span class=\"k\">];</span>","                    legendMargins<span class=\"k\">[</span>oppositeSide<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                ","                legendMargins<span class=\"k\">.</span>top <span class=\"k\">=</span> <span class=\"s\">20</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> ","            ","            <span class=\"k\">if</span><span class=\"k\">(!(</span><span class=\"s\">'legendAlign'</span> <span class=\"k\">in</span> options<span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"c\">// Calculate 'legendAlign' default value</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>isTopOrBottom<span class=\"k\">)</span><span class=\"k\">{</span>","                    options<span class=\"k\">.</span>legendAlign <span class=\"k\">=</span> <span class=\"s\">'center'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    options<span class=\"k\">.</span>legendAlign <span class=\"k\">=</span> <span class=\"s\">'middle'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">// Logic that depends on width and height</span>","        _prepareLayout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">&amp;&amp;</span> pv<span class=\"k\">.</span>renderer<span class=\"k\">()</span> <span class=\"k\">!==</span> <span class=\"s\">'batik'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// Account for the width of the *possible* scrollbar</span>","                options<span class=\"k\">.</span>width <span class=\"k\">-=</span> <span class=\"s\">17</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","    ","        _render<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">while</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_element<span class=\"k\">.</span>firstChild<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_element<span class=\"k\">.</span>removeChild<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_element<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> chartClass <span class=\"k\">=</span> def<span class=\"k\">.</span>getPath<span class=\"k\">(</span><span class=\"k\">{</span>pvc<span class=\"k\">:</span> pvc<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cccClass<span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_chart <span class=\"k\">=</span> <span class=\"k\">new</span> chartClass<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>setData<span class=\"k\">(</span><span class=\"k\">{</span>","                metadata<span class=\"k\">:</span>  <span class=\"k\">this</span><span class=\"k\">.</span>_metadata<span class=\"k\">,</span>","                resultset<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_resultset","            <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>render<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* INTERACTIVE - TOOLTIPS */</span>","","        _getTooltipText<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> context<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> tooltipLines <span class=\"k\">=</span> <span class=\"k\">[];</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>buildHtmlTooltip<span class=\"k\">(</span>tooltipLines<span class=\"k\">,</span> complex<span class=\"k\">,</span> context<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(!</span>complex<span class=\"k\">.</span>isVirtual<span class=\"k\">)</span><span class=\"k\">{</span> ","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasContentLink<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">/* Add content link information to the tooltip. */</span>","                    msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartTooltipFooterContentlink'</span><span class=\"k\">);</span>","                    ","                    tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">/* Add hyperlink information to the tooltip. */</span>","                    <span class=\"k\">var</span> hyperlinkInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getHyperlinkInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                    <span class=\"k\">var</span> msg<span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                        msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span>","                                <span class=\"s\">'chartTooltipFooterHyperlink'</span><span class=\"k\">,</span> <span class=\"k\">[</span>","                                    def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">.</span>gem<span class=\"k\">.</span>linkLabel <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartTooltipHyperlinkDefaultTitle'</span><span class=\"k\">))</span>","                                <span class=\"k\">]);</span>","                        ","                        tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        ","                        <span class=\"c\">/* Add drill-down information to the tooltip. */</span>","                        <span class=\"k\">var</span> drillDownInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDrillDownInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>drillDownInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                            msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span>","                                        <span class=\"s\">'chartTooltipFooterDrillDown'</span><span class=\"k\">,</span> <span class=\"k\">[</span>","                                            def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>getFormulaLabel<span class=\"k\">(</span>drillDownInfo<span class=\"k\">.</span>drillChild<span class=\"k\">))</span>","                                         <span class=\"k\">]);</span>","                            ","                            tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Add selection information */</span>","            <span class=\"c\">// Not the data point count, but the selection count (a single column selection may select many data points).</span>","            <span class=\"c\">//var selectedCount = this._chart &amp;&amp; this._chart.data.selectedCount();</span>","            <span class=\"k\">var</span> selections <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>highlights<span class=\"k\">;</span>","            <span class=\"k\">var</span> selectedCount <span class=\"k\">=</span> selections <span class=\"k\">&amp;&amp;</span> selections<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectedCount<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> msgId <span class=\"k\">=</span> selectedCount <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">?</span> ","                            <span class=\"s\">'chartTooltipFooterSelectedSingle'</span> <span class=\"k\">:</span> ","                            <span class=\"s\">'chartTooltipFooterSelectedMany'</span><span class=\"k\">;</span>","                ","                msg <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span>msgId<span class=\"k\">,</span> <span class=\"k\">[</span>selectedCount<span class=\"k\">]);</span>","                ","                tooltipLines<span class=\"k\">.</span>push<span class=\"k\">(</span>msg<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> tooltipLines<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'&lt;br /&gt;'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* INTERACTIVE - SELECTION */</span>","        ","        _onUserSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectingDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_processSelection<span class=\"k\">(</span>selectingDatums<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getSelectionKey<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> key <span class=\"k\">=</span> selection<span class=\"k\">.</span>__cccKey<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>key<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> keys <span class=\"k\">=</span> <span class=\"k\">[</span>selection<span class=\"k\">.</span>type<span class=\"k\">];</span>","                ","                <span class=\"k\">var</span> ap <span class=\"k\">=</span> def<span class=\"k\">.</span>array<span class=\"k\">.</span>append<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>selection<span class=\"k\">.</span>columnId<span class=\"k\">)</span><span class=\"k\">{</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>columnId<span class=\"k\">);</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>columnItem<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(</span>selection<span class=\"k\">.</span>rowId<span class=\"k\">)</span><span class=\"k\">{</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>rowId<span class=\"k\">);</span>","                    ap<span class=\"k\">(</span>keys<span class=\"k\">,</span> selection<span class=\"k\">.</span>rowItem<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                key <span class=\"k\">=</span> selection<span class=\"k\">.</span>__cccKey <span class=\"k\">=</span> keys<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'||'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> key<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _doesSharedSeriesSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _onSelectionChanged<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>selectable<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Convert to array of analyzer cell or column selection objects</span>","            <span class=\"k\">var</span> selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selectionExcludesMultiGems<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> selections <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">var</span> selectionsByKey <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_doesSharedSeriesSelection<span class=\"k\">())</span><span class=\"k\">{</span>","                selectedDatums<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>datum<span class=\"k\">.</span>isVirtual<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">{</span> type<span class=\"k\">:</span> <span class=\"s\">'column'</span> <span class=\"k\">}</span><span class=\"k\">;</span>","                        ","                        <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>fillCellSelection<span class=\"k\">(</span>selection<span class=\"k\">,</span> datum<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">);</span>","                        ","                        <span class=\"c\">// Check if there's already a selection with the same key.</span>","                        <span class=\"c\">// If not, add a new selection to the selections list.</span>","                        <span class=\"c\">// In the case where the selection max count limit is reached, </span>","                        <span class=\"c\">// the datums included in each selection must be known (by its index).</span>","                        <span class=\"c\">// So, add the datum to the new or existing selection's datums list.</span>","                        ","                        <span class=\"k\">var</span> key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                        ","                        <span class=\"k\">var</span> existingSelection <span class=\"k\">=</span> selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">];</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>existingSelection<span class=\"k\">)</span><span class=\"k\">{</span>","                            selection<span class=\"k\">.</span>__cccDatums <span class=\"k\">=</span> <span class=\"k\">[</span>datum<span class=\"k\">];</span>","                            ","                            selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> selection<span class=\"k\">;</span>","                            selections<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            existingSelection<span class=\"k\">.</span>__cccDatums<span class=\"k\">.</span>push<span class=\"k\">(</span>datum<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","                ","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"c\">// Duplicates may occur due to excluded dimensions like the discriminator</span>","                selectedDatums<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>datum<span class=\"k\">.</span>isVirtual<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_complexToCellSelection<span class=\"k\">(</span>datum<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">);</span>","                        ","                        <span class=\"c\">// Check if there's already a selection with the same key.</span>","                        <span class=\"c\">// If not, add a new selection to the selections list.</span>","                        <span class=\"k\">var</span> key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                        <span class=\"k\">var</span> existingSelection <span class=\"k\">=</span> selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">];</span>","                        <span class=\"k\">if</span><span class=\"k\">(!</span>existingSelection<span class=\"k\">)</span><span class=\"k\">{</span>","                            selection<span class=\"k\">.</span>__cccDatums <span class=\"k\">=</span> datum<span class=\"k\">;</span>","                            ","                            selectionsByKey<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> selection<span class=\"k\">;</span>","                            selections<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            selections <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_limitSelection<span class=\"k\">(</span>selections<span class=\"k\">);</span>","            ","            <span class=\"c\">// Wrap the event trigger with _ownChange=true, </span>","            <span class=\"c\">// cause otherwise, when the #setHighlights method is called,</span>","            <span class=\"c\">// in response to selection changing,</span>","            <span class=\"c\">// and if only interpolated dots had beed selected,</span>","            <span class=\"c\">// resulting in selections.length === 0,</span>","            <span class=\"c\">// then the chart selections would be reset...</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_ownChange <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"c\">// Launch analyzer select event, even if selection is empty (to clear it)</span>","                pentaho<span class=\"k\">.</span>events<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">\"select\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                    source<span class=\"k\">:</span>        <span class=\"k\">this</span><span class=\"k\">,</span>","                    selections<span class=\"k\">:</span>    selections<span class=\"k\">,</span>","                    selectionMode<span class=\"k\">:</span> <span class=\"s\">\"REPLACE\"</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">finally</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_ownChange <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _limitSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selections<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// limit selection</span>","            <span class=\"k\">var</span> filterSelectionMaxCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">[</span><span class=\"s\">'filter.selection.max.count'</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"s\">200</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> selections2 <span class=\"k\">=</span> selections<span class=\"k\">;</span>","            <span class=\"k\">var</span> L <span class=\"k\">=</span> selections<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">var</span> deselectCount <span class=\"k\">=</span> L <span class=\"k\">-</span> filterSelectionMaxCount<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>deselectCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// Build a list of datums to deselect</span>","                <span class=\"k\">var</span> deselectDatums <span class=\"k\">=</span> <span class=\"k\">[];</span>","                selections2 <span class=\"k\">=</span> <span class=\"k\">[];</span>","                ","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> i <span class=\"k\">&lt;</span> L <span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> selection <span class=\"k\">=</span> selections<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">var</span> keep <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>deselectCount<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_previousSelectionKeys<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">var</span> key <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_previousSelectionKeys<span class=\"k\">[</span>key<span class=\"k\">])</span><span class=\"k\">{</span>","                                keep <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(</span>i <span class=\"k\">&gt;=</span> filterSelectionMaxCount<span class=\"k\">)</span> <span class=\"k\">{</span>","                            keep <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>keep<span class=\"k\">)</span><span class=\"k\">{</span>","                        selections2<span class=\"k\">.</span>push<span class=\"k\">(</span>selection<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> datums <span class=\"k\">=</span> selection<span class=\"k\">.</span>__cccDatums<span class=\"k\">;</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>datums<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>def<span class=\"k\">.</span>array<span class=\"k\">.</span>is<span class=\"k\">(</span>datums<span class=\"k\">))</span><span class=\"k\">{</span>","                                def<span class=\"k\">.</span>array<span class=\"k\">.</span>append<span class=\"k\">(</span>deselectDatums<span class=\"k\">,</span> datums<span class=\"k\">);</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                deselectDatums<span class=\"k\">.</span>push<span class=\"k\">(</span>datums<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        deselectCount<span class=\"k\">--;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                ","                <span class=\"c\">// Deselect datums beyond the max count</span>","                pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>Data<span class=\"k\">.</span>setSelected<span class=\"k\">(</span>deselectDatums<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","                ","                <span class=\"c\">// Mark for update UI ASAP</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>updateSelections<span class=\"k\">();</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>showConfirm<span class=\"k\">([</span>","                                 <span class=\"s\">'infoExceededMaxSelectionItems'</span><span class=\"k\">,</span> ","                                 filterSelectionMaxCount","                             <span class=\"k\">],</span> ","                             <span class=\"s\">'SELECT_ITEM_LIMIT_REACHED'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">// Index with the keys of previous selections</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_previousSelectionKeys <span class=\"k\">=</span> ","                    def<span class=\"k\">.</span>query<span class=\"k\">(</span>selections2<span class=\"k\">)</span>","                        <span class=\"k\">.</span>object<span class=\"k\">(</span><span class=\"k\">{</span>","                            name<span class=\"k\">:</span>    <span class=\"k\">function</span><span class=\"k\">(</span>selection<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getSelectionKey<span class=\"k\">(</span>selection<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                            value<span class=\"k\">:</span>   def<span class=\"k\">.</span>retTrue<span class=\"k\">,</span>","                            context<span class=\"k\">:</span> <span class=\"k\">this</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"k\">return</span> selections2<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/**</span>","<span class=\"c\">         * By default, the keep only or the exclude menu operations</span>","<span class=\"c\">         * do not select level gems playing a multi role.</span>","<span class=\"c\">         * </span>","<span class=\"c\">         * The same applies to the the drill down operation,</span>","<span class=\"c\">         * that, by default, does not KEEP level gems playing</span>","<span class=\"c\">         * a multi role.</span>","<span class=\"c\">         * Note that a gem playing a multi role</span>","<span class=\"c\">         * can itself be drilled on.</span>","<span class=\"c\">         */</span>","        _selectionExcludesMultiGems<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _processSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/**</span>","<span class=\"c\">             * Selection rules.</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; gems with (chart)axis=\"measure\" are excluded</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; gems playing a \"multi\" role are excluded (!except in the pie chart!)</span>","<span class=\"c\">             *    -&gt; this way, points with common category data in </span>","<span class=\"c\">             *       different small charts are simultaneously selected</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; measure discriminator gems are excluded</span>","<span class=\"c\">             *    this way, selection is always expanded to other series of different measures</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * this._gemCountColumnReportAxis :</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; if there are no gems with reportAxis='column':</span>","<span class=\"c\">             *    -&gt; that's it. (most granular selection s available)</span>","<span class=\"c\">             * </span>","<span class=\"c\">             * -&gt; if there is a single gem with reportAxis='column': (!except in the HG chart!)</span>","<span class=\"c\">             *    -&gt; gems with (chart)axis=\"row\" are excluded</span>","<span class=\"c\">             *       (selecting one point selects every other point of the same \"series\")</span>","<span class=\"c\">             *     </span>","<span class=\"c\">             * -&gt; if there is more that one gem with reportAxis='column':</span>","<span class=\"c\">             *    -&gt; selection is disabled as a whole </span>","<span class=\"c\">             *       (in this case, code doesn't even enter here)</span>","<span class=\"c\">             * </span>","<span class=\"c\">             */</span>","            <span class=\"c\">/**</span>","<span class=\"c\">             * Example CCC \"where\" specification:</span>","<span class=\"c\">             * &lt;pre&gt;</span>","<span class=\"c\">             * whereSpec = [</span>","<span class=\"c\">             *     // Datums whose series is 'Europe' or 'Australia',</span>","<span class=\"c\">             *     // and whose category is 2001 or 2002</span>","<span class=\"c\">             *     {series: ['Europe', 'Australia'], category: [2001, 2002]},</span>","<span class=\"c\">             *</span>","<span class=\"c\">             *     // Union'ed with</span>","<span class=\"c\">             *</span>","<span class=\"c\">             *     // Datums whose series is 'America'</span>","<span class=\"c\">             *     {series: 'America'},</span>","<span class=\"c\">             * ];</span>","<span class=\"c\">             * &lt;/pre&gt;</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> whereSpec<span class=\"k\">;</span>","            <span class=\"k\">var</span> outDatums <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selectionExcludesMultiGems<span class=\"k\">();</span>","                ","                <span class=\"c\">// Include axis=\"column\" dimensions</span>","                <span class=\"c\">// * Excludes measure discrim dimensions</span>","                <span class=\"c\">// * Excludes \"multi\" role dimensions</span>","                <span class=\"k\">var</span> colDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>getSelectionGems<span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span>","                                  <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                  <span class=\"k\">.</span>array<span class=\"k\">();</span>","                ","                <span class=\"k\">var</span> rowDimNames<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_gemCountColumnReportAxis<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// Include axis=\"row\" dimensions</span>","                    <span class=\"c\">// * Excludes \"multi\" role dimensions</span>","                    rowDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>getSelectionGems<span class=\"k\">(</span>selectionExcludesMulti<span class=\"k\">)</span>","                                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                      <span class=\"k\">.</span>array<span class=\"k\">();</span> ","                <span class=\"k\">}</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(!</span>colDimNames<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>rowDimNames <span class=\"k\">||</span> <span class=\"k\">!</span>rowDimNames<span class=\"k\">.</span>length<span class=\"k\">))</span><span class=\"k\">{</span>","                    selectedDatums <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    whereSpec <span class=\"k\">=</span> <span class=\"k\">[];</span>","                    ","                    selectedDatums<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDatum<span class=\"k\">);</span>","                    ","                    <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>data","                        <span class=\"k\">.</span>datums<span class=\"k\">(</span>whereSpec<span class=\"k\">,</span> <span class=\"k\">{</span>visible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">)</span>","                        <span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span>","                            outDatums<span class=\"k\">.</span>push<span class=\"k\">(</span>datum<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    ","                    <span class=\"c\">// Replace</span>","                    selectedDatums <span class=\"k\">=</span> outDatums<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> addDatum<span class=\"k\">(</span>datum<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>datum<span class=\"k\">.</span>isNull<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>datum<span class=\"k\">.</span>isTrend<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// Some trend datums, like those of the scatter plot,</span>","                        <span class=\"c\">// don't have anything distinguishing between them,</span>","                        <span class=\"c\">// so we need to explicitly add them to the output.</span>","                        outDatums<span class=\"k\">.</span>push<span class=\"k\">(</span>datum<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">var</span> datumFilter <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","                    <span class=\"k\">var</span> atoms <span class=\"k\">=</span> datum<span class=\"k\">.</span>atoms<span class=\"k\">;</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>colDimNames<span class=\"k\">)</span><span class=\"k\">{</span>","                        colDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>rowDimNames<span class=\"k\">)</span><span class=\"k\">{</span>","                        rowDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    whereSpec<span class=\"k\">.</span>push<span class=\"k\">(</span>datumFilter<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">function</span> addDim<span class=\"k\">(</span>dimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// The atom itself may be used as a value condition</span>","                    datumFilter<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> atoms<span class=\"k\">[</span>dimName<span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> selectedDatums<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* INTERACTIVE - DOUBLE-CLICK */</span>","","        _onDoubleClick<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* A double-click is triggered to support \"content linking\" */</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasContentLink<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_followContentlink<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Information about the axis and formula to follow hyperlink. */</span>","            <span class=\"k\">var</span> hyperlinkInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getHyperlinkInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_followHyperlink<span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">,</span> complex<span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/* Information about the axis and formula to drill on. */</span>","            <span class=\"k\">var</span> drillInfo <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDrillDownInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>drillInfo<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_drillDown<span class=\"k\">(</span>drillInfo<span class=\"k\">,</span> complex<span class=\"k\">);</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _followContentlink<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// Add every level gem with content link to the action context</span>","            <span class=\"k\">var</span> actionContext <span class=\"k\">=</span> ","                def","                <span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_linkAxesIds<span class=\"k\">)</span>","                <span class=\"k\">.</span>selectMany<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">]</span>","                        <span class=\"k\">.</span>selectGemsWithLink<span class=\"k\">(</span><span class=\"s\">'DASHBOARD'</span><span class=\"k\">,</span> complex<span class=\"k\">,</span> <span class=\"c\">/* reverse */</span> <span class=\"k\">false</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">{</span>","                        clickLevel<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                        formula<span class=\"k\">:</span>    gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                        member<span class=\"k\">:</span>     complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">].</span>value","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>array<span class=\"k\">()</span>","                <span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>actionContext<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// J.I.C.</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>link<span class=\"k\">(</span>actionContext<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _hyperlinkTypes<span class=\"k\">:</span> <span class=\"k\">{</span>FILE<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span> URL<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _followHyperlink<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">,</span> complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> actionContext <span class=\"k\">=</span> ","                def","                <span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_linkAxesIds<span class=\"k\">)</span>","                <span class=\"k\">.</span>selectMany<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>selectBoundGems<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">{</span>","                        clickLevel<span class=\"k\">:</span> <span class=\"k\">(</span>hyperlinkInfo<span class=\"k\">.</span>gem <span class=\"k\">===</span> gem<span class=\"k\">),</span>","                        formula<span class=\"k\">:</span>    gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                        member<span class=\"k\">:</span>     complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>gem<span class=\"k\">.</span>cccDimName<span class=\"k\">].</span>value","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">)</span>","                <span class=\"k\">.</span>array<span class=\"k\">()</span>","                <span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>link<span class=\"k\">(</span>actionContext<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _drillDown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>drillInfo<span class=\"k\">,</span> complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/**</span>","<span class=\"c\">             * The context for the click action.</span>","<span class=\"c\">             * Stores 'KEEP' and 'KEEP_AND_DRILL' instructions.</span>","<span class=\"c\">             *</span>","<span class=\"c\">             * @see useGem</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> actionContext <span class=\"k\">=</span> <span class=\"k\">[];</span>","            ","            <span class=\"k\">var</span> drillGem <span class=\"k\">=</span> drillInfo<span class=\"k\">.</span>gem<span class=\"k\">;</span>","            <span class=\"k\">var</span> selectionExcludesMulti <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_selectionExcludesMultiGems<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_keyAxesIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span>keepAxisHierarchies<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","            <span class=\"c\">// --------------</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>click<span class=\"k\">(</span>actionContext<span class=\"k\">,</span> <span class=\"c\">/* keepGem */</span> <span class=\"k\">true</span><span class=\"k\">);</span>","","            <span class=\"c\">// ----------------</span>","            <span class=\"c\">// Helper methods</span>","            ","            <span class=\"c\">/** @instance */</span>","            <span class=\"k\">function</span> keepAxisHierarchies<span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// It is possible to KEEP_AND_DRILL on a multi level.</span>","                <span class=\"c\">// But, otherwise, a multi level is not KEPT.</span>","                <span class=\"c\">// The exception to the previous rule are </span>","                <span class=\"c\">// the levels of the special multi-pie role. </span>","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">]</span>","                    <span class=\"k\">.</span>getKeepOrDrillGems<span class=\"k\">(</span>drillGem<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span>","                    <span class=\"k\">.</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// KEEP or KEEP_AND_DRILL</span>","                        <span class=\"k\">if</span><span class=\"k\">(</span>gem <span class=\"k\">===</span> drillGem<span class=\"k\">)</span><span class=\"k\">{</span>","                            useGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> drillInfo<span class=\"k\">.</span>atom<span class=\"k\">,</span> <span class=\"s\">'KEEP_AND_DRILL'</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"k\">(!</span>gem<span class=\"k\">.</span>isMeasureDiscrim<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">var</span> atom <span class=\"k\">=</span> getGemAtom<span class=\"k\">(</span>gem<span class=\"k\">,</span> complex<span class=\"k\">);</span>","                            <span class=\"k\">if</span><span class=\"k\">(</span>atom<span class=\"k\">)</span><span class=\"k\">{</span>","                                useGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> atom<span class=\"k\">,</span> <span class=\"s\">'KEEP'</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/** @static */</span>","            <span class=\"k\">function</span> useGem<span class=\"k\">(</span>gem<span class=\"k\">,</span> atom<span class=\"k\">,</span> action<span class=\"k\">)</span><span class=\"k\">{</span>","                actionContext<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    action<span class=\"k\">:</span>  action<span class=\"k\">,</span>","                    formula<span class=\"k\">:</span> gem<span class=\"k\">.</span>formula<span class=\"k\">,</span>","                    member<span class=\"k\">:</span>  atom<span class=\"k\">.</span>value<span class=\"k\">,</span>","                    caption<span class=\"k\">:</span> def<span class=\"k\">.</span>html<span class=\"k\">.</span>escape<span class=\"k\">(</span>atom<span class=\"k\">.</span>label<span class=\"k\">)</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"c\">/** @static */</span>","            <span class=\"k\">function</span> getGemAtom<span class=\"k\">(</span>gem<span class=\"k\">,</span> complex<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> cccDimName<span class=\"k\">;</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>complex <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>cccDimName <span class=\"k\">=</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">))</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> atom <span class=\"k\">=</span> complex<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(</span>atom <span class=\"k\">&amp;&amp;</span> atom<span class=\"k\">.</span>value <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"k\">return</span> atom<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getHyperlinkInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* Find an axis to hyperlink on. */</span>","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_linkAxesIds<span class=\"k\">)</span>","                        <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>getHyperlinkInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                        <span class=\"k\">.</span>where<span class=\"k\">(</span>def<span class=\"k\">.</span>notNully<span class=\"k\">)</span>","                        <span class=\"k\">.</span>first<span class=\"k\">()</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getDrillDownInfo<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* Find an axis to drill on.</span>","<span class=\"c\">             * The order of search is that of #_drillAxesIds.</span>","<span class=\"c\">             */</span>","            <span class=\"k\">return</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_drillAxesIds<span class=\"k\">)</span>","                        <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>getDrillDownInfo<span class=\"k\">(</span>complex<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","                        <span class=\"k\">.</span>where<span class=\"k\">(</span>def<span class=\"k\">.</span>notNully<span class=\"k\">)</span>","                        <span class=\"k\">.</span>first<span class=\"k\">()</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/* UTILITY */</span>","        ","        <span class=\"c\">/**</span>","<span class=\"c\">         * Converts a complex to an analyzer cell selection.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * An analyzer cell selection has the following structure:</span>","<span class=\"c\">         * {</span>","<span class=\"c\">         *    type:     'cell',</span>","<span class=\"c\">         *</span>","<span class=\"c\">         *    column:      table column index ??</span>","<span class=\"c\">         *    columnId:    [\"[Time].[Years]\", \"[Time].[Quarters]\"   ], // formulas</span>","<span class=\"c\">         *    columnItem:  [\"[Time].[2003]\",  \"[Time].[2003].[QTR4]\"], // values</span>","<span class=\"c\">         *    columnLabel: \"2003~QTR4~Sales\",</span>","<span class=\"c\">         *</span>","<span class=\"c\">         *    row:          table row index ??</span>","<span class=\"c\">         *    rowId:       [\"[Markets].[Territory]\", \"[Order Status].[Type]\"    ]  // formulas</span>","<span class=\"c\">         *    rowItem:     [\"[Markets].[EMEA]\",      \"[Order Status].[Resolved]\"], // values</span>","<span class=\"c\">         *    rowLabel:    \"Type\",</span>","<span class=\"c\">         *</span>","<span class=\"c\">         *    value:       28550.59 // formatted joined by ~ ?</span>","<span class=\"c\">         * }</span>","<span class=\"c\">         */</span>","        _complexToCellSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>complex<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">/* The analyzer cell-selection object */</span>","            <span class=\"k\">var</span> selection <span class=\"k\">=</span> <span class=\"k\">{</span> type<span class=\"k\">:</span> <span class=\"s\">'cell'</span> <span class=\"k\">}</span><span class=\"k\">;</span>","            ","            <span class=\"c\">/* Add each axis' formulas to the selection */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_axesIds<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>axisId<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">[</span>axisId<span class=\"k\">].</span>fillCellSelection<span class=\"k\">(</span>selection<span class=\"k\">,</span> complex<span class=\"k\">,</span> selectionExcludesMulti<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","            <span class=\"k\">return</span> selection<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Gets the child formula in the given formula's hierarchy.</span>","<span class=\"c\">         */</span>","        getChildFormula<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>hForm<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getHierarchyFormulas<span class=\"k\">(</span>hForm<span class=\"k\">,</span>","                                <span class=\"c\">/* includeHidden:   */</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                                <span class=\"c\">/* excludeChildren: */</span> <span class=\"k\">false</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>hForms<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> index <span class=\"k\">=</span> hForms<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>hForm<span class=\"k\">);</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>index <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">return</span> hForms<span class=\"k\">[</span>index <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getHierarchyFormulas<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"c\">// This was very slow when not cached</span>","            <span class=\"k\">var</span> hForms<span class=\"k\">;</span>","            <span class=\"k\">var</span> key <span class=\"k\">=</span> formula <span class=\"k\">+</span> <span class=\"s\">\"|\"</span> <span class=\"k\">+</span> <span class=\"k\">(!!</span>includeHidden<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"|\"</span> <span class=\"k\">+</span> <span class=\"k\">(!!</span>excludeChildren<span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache<span class=\"k\">[</span>key<span class=\"k\">];</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span><span class=\"k\">(!</span>hForms<span class=\"k\">)</span> <span class=\"k\">{</span>","                hForms <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizHelper<span class=\"k\">.</span>getHierarchyFormulas<span class=\"k\">(</span>formula<span class=\"k\">,</span> includeHidden<span class=\"k\">,</span> excludeChildren<span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_hierarchyFormulaCache<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> hForms<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> hForms<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _addCdaMetadata<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>colName<span class=\"k\">,</span> colLabel<span class=\"k\">,</span> colType<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_metadata<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                colIndex<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>_metadata<span class=\"k\">.</span>length<span class=\"k\">,</span>","                colName<span class=\"k\">:</span>  colName<span class=\"k\">,</span>","                colLabel<span class=\"k\">:</span> colLabel<span class=\"k\">,</span>","                colType<span class=\"k\">:</span>  colType","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getTableCell<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>_getCell<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>cell<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> value <span class=\"k\">=</span> cell<span class=\"k\">.</span>v<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> value <span class=\"k\">===</span> <span class=\"s\">'-'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                v<span class=\"k\">:</span> value<span class=\"k\">,</span>","                f<span class=\"k\">:</span> cell<span class=\"k\">.</span>f","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getTableValue<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getTableCell<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","            <span class=\"k\">return</span> cell <span class=\"k\">?</span> cell<span class=\"k\">.</span>v <span class=\"k\">:</span> ceff<span class=\"k\">.</span>f<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.CartesianChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Chart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            orientation<span class=\"k\">:</span> <span class=\"s\">'vertical'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxesDisplayUnits<span class=\"k\">();</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_showAxisTitle<span class=\"k\">(</span><span class=\"s\">'base'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisTitle<span class=\"k\">(</span><span class=\"s\">'base'</span><span class=\"k\">,</span>  <span class=\"k\">this</span><span class=\"k\">.</span>_getBaseAxisTitle <span class=\"k\">());</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_showAxisTitle<span class=\"k\">(</span><span class=\"s\">'ortho'</span><span class=\"k\">))</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisTitle<span class=\"k\">(</span><span class=\"s\">'ortho'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getOrthoAxisTitle<span class=\"k\">());</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _showAxisTitle<span class=\"k\">:</span> def<span class=\"k\">.</span>fun<span class=\"k\">.</span>constant<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">),</span>","        ","        _getOrthoAxisTitle<span class=\"k\">:</span> def<span class=\"k\">.</span>noop<span class=\"k\">,</span>","","        _getBaseAxisTitle<span class=\"k\">:</span>  def<span class=\"k\">.</span>noop<span class=\"k\">,</span>","","        _configureAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>axisType<span class=\"k\">,</span> title<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> unitsSuffix <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_cartesianAxesDisplayUnitsText<span class=\"k\">[</span>axisType<span class=\"k\">];</span>","","            title <span class=\"k\">=</span> def<span class=\"k\">.</span>string<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\" - \"</span><span class=\"k\">,</span> title<span class=\"k\">,</span> unitsSuffix<span class=\"k\">);</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>title<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","                options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisTitle'</span><span class=\"k\">]</span> <span class=\"k\">=</span> title<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","         _getMeasureRoleTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>measureRole<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> title <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> measureAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">;</span>","            <span class=\"k\">var</span> singleAxisGem<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>measureRole<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>genericMeasuresCount <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    singleAxisGem <span class=\"k\">=</span> measureAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>measureAxis<span class=\"k\">.</span>defaultRole<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> roleGems <span class=\"k\">=</span> measureAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>measureRole<span class=\"k\">];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>roleGems<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    singleAxisGem <span class=\"k\">=</span> roleGems<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","                ","            <span class=\"k\">if</span><span class=\"k\">(</span>singleAxisGem<span class=\"k\">)</span><span class=\"k\">{</span>","                title <span class=\"k\">+=</span> singleAxisGem<span class=\"k\">.</span>label<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> title<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureAxisRange<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>primary<span class=\"k\">,</span> axisType<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">var</span> vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">,</span>","                suffix <span class=\"k\">=</span> primary <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> <span class=\"s\">'Secondary'</span><span class=\"k\">;</span>","                ","            <span class=\"k\">if</span><span class=\"k\">(</span>vizOptions<span class=\"k\">[</span><span class=\"s\">'autoRange'</span> <span class=\"k\">+</span> suffix<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"s\">'true'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> limit <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span><span class=\"s\">'valueAxisLowerLimit'</span> <span class=\"k\">+</span> suffix<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>limit <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisFixedMin'</span><span class=\"k\">]</span> <span class=\"k\">=</span> limit<span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisOriginIsZero'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                limit <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span><span class=\"s\">'valueAxisUpperLimit'</span> <span class=\"k\">+</span> suffix<span class=\"k\">];</span>","                <span class=\"k\">if</span><span class=\"k\">(</span>limit <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisFixedMax'</span><span class=\"k\">]</span> <span class=\"k\">=</span> limit<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _cartesianAxesDisplayUnitsText<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","        ","        _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_cartesianAxesDisplayUnitsText <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureAxisDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>primary<span class=\"k\">,</span> axisType<span class=\"k\">,</span> allowFractional<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>allowFractional<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">[</span>axisType <span class=\"k\">+</span> <span class=\"s\">'AxisTickExponentMin'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"c\">// 10^0 =&gt; 1</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">var</span> text<span class=\"k\">;</span>","            <span class=\"k\">var</span> displayUnits <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">[</span><span class=\"s\">'displayUnits'</span> <span class=\"k\">+</span> <span class=\"k\">(</span>primary <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span> <span class=\"s\">'Secondary'</span><span class=\"k\">)];</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>displayUnits <span class=\"k\">&amp;&amp;</span> displayUnits <span class=\"k\">!==</span> <span class=\"s\">'UNITS_0'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                ","                <span class=\"k\">var</span> match <span class=\"k\">=</span> displayUnits<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/^UNITS_(\\d+)$/</span><span class=\"k\">)</span> <span class=\"k\">||</span>","                            def<span class=\"k\">.</span>fail<span class=\"k\">.</span>argumentInvalid<span class=\"k\">(</span><span class=\"s\">'displayUnits'</span><span class=\"k\">);</span>","                <span class=\"c\">//var exponent = +match[1]; // + -&gt; to number</span>","                ","                text <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'dlgChartOption_'</span> <span class=\"k\">+</span> displayUnits<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_cartesianAxesDisplayUnitsText<span class=\"k\">[</span>axisType<span class=\"k\">]</span> <span class=\"k\">=</span> text <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">// Categorical</span>","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.CategoricalContinuousChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CartesianChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            panelSizeRatio<span class=\"k\">:</span> <span class=\"s\">0.8</span><span class=\"k\">,</span>","            dataOptions<span class=\"k\">:</span> <span class=\"k\">{</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _showAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>type<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_hasMultiChartColumns <span class=\"k\">||</span> type <span class=\"k\">===</span> <span class=\"s\">'ortho'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getOrthoAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMeasureRoleTitle<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getBaseAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>getAxisLabel<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">);</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>orientation <span class=\"k\">===</span> <span class=\"s\">'vertical'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                def<span class=\"k\">.</span>mixin<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">,</span> mixinDiscreteXOptions<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>xAxisPosition <span class=\"k\">=</span> <span class=\"s\">'top'</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// ---------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BarChartAbstract'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.BarChart'</span><span class=\"k\">,</span> <span class=\"c\">// default class</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>options<span class=\"k\">.</span>orientation <span class=\"k\">!==</span> <span class=\"s\">'vertical'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>visualRoles<span class=\"k\">.</span>category <span class=\"k\">=</span> <span class=\"k\">{</span> isReversed<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// -------------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChartAbstract<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _supportsTrends<span class=\"k\">:</span> <span class=\"k\">true</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.HorizontalBarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChartAbstract<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            orientation<span class=\"k\">:</span> <span class=\"s\">'horizontal'</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// -------------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.StackedBarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChartAbstract<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            stacked<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.HorizontalStackedBarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChartAbstract<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            orientation<span class=\"k\">:</span> <span class=\"s\">'horizontal'</span><span class=\"k\">,</span>","            stacked<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// ---------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.NormalizedBarChartAbstract'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChartAbstract<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.NormalizedBarChart'</span><span class=\"k\">,</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>orthoAxisTickFormatter <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>v<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> v <span class=\"k\">+</span> <span class=\"s\">\"%\"</span><span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.NormalizedBarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>NormalizedBarChartAbstract<span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.HorizontalNormalizedBarChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>NormalizedBarChartAbstract<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            orientation<span class=\"k\">:</span> <span class=\"s\">'horizontal'</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","","    <span class=\"c\">// ---------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BarLineChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>BarChartAbstract<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        <span class=\"c\">/* Override default map */</span>","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'measuresLine'</span><span class=\"k\">:</span> <span class=\"s\">'value'</span> <span class=\"c\">// maps to same dim group as 'measures' role</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","    ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            plot2<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            secondAxisIndependentScale<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            secondAxisSeriesIndexes<span class=\"k\">:</span> <span class=\"k\">null</span> <span class=\"c\">// prevent default of -1 (which means last series) // TODO: is this needed??</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _noRoleInTooltipMeasureRoles<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'measuresLine'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _setNullInterpolationMode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> value<span class=\"k\">)</span><span class=\"k\">{</span>","            options<span class=\"k\">.</span>plot2NullInterpolationMode <span class=\"k\">=</span> value<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _initAxes<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem <span class=\"k\">||</span> def<span class=\"k\">.</span>assert<span class=\"k\">(</span><span class=\"s\">\"Must exist to distinguish measures.\"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> measureDiscrimCccDimName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_measureDiscrimGem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span>","            <span class=\"k\">var</span> meaAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">;</span>","            <span class=\"k\">var</span> barGems <span class=\"k\">=</span> meaAxis<span class=\"k\">.</span>gemsByRole<span class=\"k\">[</span>meaAxis<span class=\"k\">.</span>defaultRole<span class=\"k\">];</span>","            <span class=\"k\">var</span> barGemsById <span class=\"k\">=</span> ","                def","                <span class=\"k\">.</span>query<span class=\"k\">(</span>barGems<span class=\"k\">)</span> <span class=\"c\">// bar: measures, line: measuresLine</span>","                <span class=\"k\">.</span>uniqueIndex<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>id<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","            ","            <span class=\"c\">/* Create the dataPart dimension calculation */</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>calculations<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                names<span class=\"k\">:</span> <span class=\"s\">'dataPart'</span><span class=\"k\">,</span>","                calculation<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">,</span> atoms<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"k\">var</span> meaGemId <span class=\"k\">=</span> datum<span class=\"k\">.</span>atoms<span class=\"k\">[</span>measureDiscrimCccDimName<span class=\"k\">].</span>value<span class=\"k\">;</span>","                    <span class=\"c\">// Data part codes</span>","                    <span class=\"c\">// 0 -&gt; bars</span>","                    <span class=\"c\">// 1 -&gt; lines</span>","                    atoms<span class=\"k\">.</span>dataPart <span class=\"k\">=</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>barGemsById<span class=\"k\">,</span> meaGemId<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">'0'</span> <span class=\"k\">:</span><span class=\"s\">'1'</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _readUserOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> shape <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>shape<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>shape <span class=\"k\">&amp;&amp;</span> shape <span class=\"k\">===</span> <span class=\"s\">'none'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>pointDotsVisible <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>pointDotsVisible <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>extensionPoints<span class=\"k\">.</span>pointDot_shape <span class=\"k\">=</span> shape<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","       _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho2'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho2'</span><span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisTitle<span class=\"k\">(</span><span class=\"s\">'ortho2'</span><span class=\"k\">,</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>plot2OrthoAxis <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","             ","            <span class=\"c\">// Plot2 uses same color scale</span>","            <span class=\"c\">// options.plot2ColorAxis = 2;</span>","            <span class=\"c\">// options.color2AxisTransform = null;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.WaterfallChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.WaterfallChart'</span>","    <span class=\"k\">}</span><span class=\"k\">)</span>","    ","    <span class=\"c\">// ---------------</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.LineChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.LineChart'</span><span class=\"k\">,</span>","        ","        _supportsTrends<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            axisOffset<span class=\"k\">:</span>    <span class=\"s\">0</span><span class=\"k\">,</span>","            tooltipOffset<span class=\"k\">:</span> <span class=\"s\">15</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"c\">/*, 'column'*/</span><span class=\"k\">],</span>","        ","        _linkAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">],</span>","        ","        _readUserOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> shape <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>shape<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>shape <span class=\"k\">&amp;&amp;</span> shape <span class=\"k\">===</span> <span class=\"s\">'none'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                options<span class=\"k\">.</span>dotsVisible <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>dotsVisible <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>extensionPoints<span class=\"k\">.</span>dot_shape <span class=\"k\">=</span> shape<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _setNullInterpolationMode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> value<span class=\"k\">)</span><span class=\"k\">{</span>","            options<span class=\"k\">.</span>nullInterpolationMode <span class=\"k\">=</span> value<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            <span class=\"k\">var</span> extPoints <span class=\"k\">=</span> options<span class=\"k\">.</span>extensionPoints<span class=\"k\">;</span>","            ","            <span class=\"k\">var</span> dotSize <span class=\"k\">=</span> extPoints<span class=\"k\">.</span>dot_shapeSize<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>dotSize <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> dotRadius <span class=\"k\">=</span> Math<span class=\"k\">.</span>sqrt<span class=\"k\">(</span>dotSize<span class=\"k\">);</span>","                    options<span class=\"k\">.</span>legendMarkerSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">,</span> <span class=\"s\">2</span> <span class=\"k\">*</span> <span class=\"k\">(</span>dotRadius <span class=\"k\">+</span> <span class=\"s\">3</span><span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.StackedAreaChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","       _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.StackedAreaChart'</span><span class=\"k\">,</span>","       ","       _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"c\">/*, 'column'*/</span><span class=\"k\">],</span>","       ","       _linkAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">],</span>","       ","       _options<span class=\"k\">:</span> <span class=\"k\">{</span>","           axisOffset<span class=\"k\">:</span>    <span class=\"s\">0</span><span class=\"k\">,</span>","           tooltipOffset<span class=\"k\">:</span> <span class=\"s\">15</span>","       <span class=\"k\">}</span><span class=\"k\">,</span>","    ","       _setNullInterpolationMode<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> value<span class=\"k\">)</span><span class=\"k\">{</span>","           options<span class=\"k\">.</span>nullInterpolationMode <span class=\"k\">=</span> value<span class=\"k\">;</span>","       <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BoxplotChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CategoricalContinuousChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.BoxplotChart'</span><span class=\"k\">,</span>","        ","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'columns'</span><span class=\"k\">:</span>     <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"c\">//'rows':      'category',</span>","            <span class=\"s\">'multi'</span><span class=\"k\">:</span>       <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","            <span class=\"s\">'measures'</span><span class=\"k\">:</span>    <span class=\"s\">'median'</span><span class=\"k\">,</span>","            <span class=\"s\">'percentil25'</span><span class=\"k\">:</span> <span class=\"s\">'percentil25'</span><span class=\"k\">,</span>","            <span class=\"s\">'percentil75'</span><span class=\"k\">:</span> <span class=\"s\">'percentil75'</span><span class=\"k\">,</span>","            <span class=\"s\">'percentil5'</span><span class=\"k\">:</span>  <span class=\"s\">'percentil5'</span><span class=\"k\">,</span>","            <span class=\"s\">'percentil95'</span><span class=\"k\">:</span> <span class=\"s\">'percentil95'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","    ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                boxRuleWhisker_strokeDasharray<span class=\"k\">:</span> <span class=\"s\">'- '</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _readData<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">// The boxplot data passes-trough, as is.</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"c\">// In CCC, it is read as a custom format (more relational-like)</span>","            <span class=\"c\">// Where categoriesCount is the number of \"category\" dimensions,</span>","            <span class=\"c\">// not including multichart columns...</span>","            def<span class=\"k\">.</span>set<span class=\"k\">(</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>dataOptions<span class=\"k\">,</span>","                <span class=\"s\">'categoriesCount'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>gemsByRole<span class=\"k\">.</span>rows<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.HeatGridChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CartesianChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.HeatGridChart'</span><span class=\"k\">,</span>","        ","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'multi'</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"c\">//'columns':  'series',</span>","            <span class=\"c\">//'rows':     'category',</span>","            <span class=\"s\">'color'</span><span class=\"k\">:</span> <span class=\"s\">'value'</span><span class=\"k\">,</span>","            <span class=\"s\">'size'</span><span class=\"k\">:</span>  <span class=\"s\">'value2'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            valuesVisible<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            useShapes<span class=\"k\">:</span>     <span class=\"k\">true</span><span class=\"k\">,</span>","            shape<span class=\"k\">:</span>         <span class=\"s\">'square'</span><span class=\"k\">,</span>","            ","            xAxisSize<span class=\"k\">:</span> <span class=\"s\">30</span><span class=\"k\">,</span>","            yAxisSize<span class=\"k\">:</span> <span class=\"s\">50</span><span class=\"k\">,</span>","            axisComposite<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            orthoAxisGrid<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"c\">// clear inherited property</span>","            ","            <span class=\"c\">//colorMissing:   'lightgray',</span>","            colorScaleType<span class=\"k\">:</span> <span class=\"s\">'linear'</span><span class=\"k\">,</span>","            colorNormByCategory<span class=\"k\">:</span> <span class=\"k\">false</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>shape <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">.</span>shape<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getColorScaleKind<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">'continuous'</span><span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _prepareLayout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> measureCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>depth<span class=\"k\">,</span>","                catsDepth    <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>depth<span class=\"k\">,</span>","                sersDepth    <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>depth<span class=\"k\">,</span>","                catsBreadth  <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">),</span>","                sersBreadth  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">.</span>getNumberOfColumns<span class=\"k\">()</span> <span class=\"k\">-</span> catsDepth<span class=\"k\">;</span>","","            <span class=\"k\">if</span><span class=\"k\">(</span>measureCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","                sersBreadth <span class=\"k\">/=</span> measureCount<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> width  <span class=\"k\">=</span> options<span class=\"k\">.</span>width<span class=\"k\">,</span>","                height <span class=\"k\">=</span> options<span class=\"k\">.</span>height<span class=\"k\">,</span>","                currRatio <span class=\"k\">=</span> width <span class=\"k\">/</span> height<span class=\"k\">,</span>","                xyChartRatio <span class=\"k\">=</span> catsBreadth <span class=\"k\">/</span> sersBreadth<span class=\"k\">;</span>","","            <span class=\"c\">// Min desirable sizes according to depth</span>","            <span class=\"k\">var</span> MAX_AXIS_SIZE    <span class=\"k\">=</span> <span class=\"s\">300</span><span class=\"k\">,</span>","                MIN_LEVEL_HEIGHT <span class=\"k\">=</span> <span class=\"s\">70</span><span class=\"k\">,</span>","                MAX_LEVEL_HEIGHT <span class=\"k\">=</span> <span class=\"s\">200</span><span class=\"k\">,</span>","                MAX_AXIS_RATIO   <span class=\"k\">=</span> <span class=\"s\">0.35</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> minXAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> catsDepth <span class=\"k\">*</span> MIN_LEVEL_HEIGHT<span class=\"k\">),</span>","                minYAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> sersDepth <span class=\"k\">*</span> MIN_LEVEL_HEIGHT<span class=\"k\">),</span>","                maxXAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> catsDepth <span class=\"k\">*</span> MAX_LEVEL_HEIGHT<span class=\"k\">,</span> height <span class=\"k\">*</span> MAX_AXIS_RATIO<span class=\"k\">),</span>","                maxYAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>MAX_AXIS_SIZE<span class=\"k\">,</span> sersDepth <span class=\"k\">*</span> MAX_LEVEL_HEIGHT<span class=\"k\">,</span> width  <span class=\"k\">*</span> MAX_AXIS_RATIO<span class=\"k\">);</span>","","            <span class=\"k\">var</span> xAxisSize<span class=\"k\">,</span>","                yAxisSize<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>xyChartRatio <span class=\"k\">&gt;</span> currRatio<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// lock width</span>","                <span class=\"k\">var</span> extraHeight <span class=\"k\">=</span> height <span class=\"k\">-</span> width <span class=\"k\">/</span> xyChartRatio<span class=\"k\">;</span>","","                yAxisSize <span class=\"k\">=</span> minYAxisSize<span class=\"k\">;</span>","","                xAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>extraHeight<span class=\"k\">,</span> maxXAxisSize<span class=\"k\">);</span>","                xAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>xAxisSize<span class=\"k\">,</span>   minXAxisSize<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>xyChartRatio <span class=\"k\">&lt;</span> currRatio<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"c\">// lock height</span>","                <span class=\"k\">var</span> extraWidth <span class=\"k\">=</span> width <span class=\"k\">-</span> height <span class=\"k\">*</span> xyChartRatio<span class=\"k\">;</span>","","                xAxisSize <span class=\"k\">=</span> minXAxisSize<span class=\"k\">;</span>","","                yAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>extraWidth<span class=\"k\">,</span> maxYAxisSize<span class=\"k\">);</span>","                yAxisSize <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>yAxisSize<span class=\"k\">,</span>  minYAxisSize<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// ------------------</span>","            ","            options<span class=\"k\">.</span>xAxisSize <span class=\"k\">=</span> xAxisSize<span class=\"k\">;</span>","            options<span class=\"k\">.</span>yAxisSize <span class=\"k\">=</span> yAxisSize<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">// Ortho axis title is not available on the server, so never show</span>","<span class=\"c\">//        _getOrthoAxisTitle: function(){</span>","<span class=\"c\">//            return this.axes.column.getAxisLabel();</span>","<span class=\"c\">//        },</span>","<span class=\"c\">//</span>","<span class=\"c\">//        _getBaseAxisTitle: function(){</span>","<span class=\"c\">//            return this.axes.row.getAxisLabel();</span>","<span class=\"c\">//        },</span>","        ","        _doesSharedSeriesSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _processSelection<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>selectedDatums<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">var</span> data <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_chart<span class=\"k\">.</span>data<span class=\"k\">;</span>","                ","                <span class=\"k\">var</span> atomsByDim <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                ","                <span class=\"c\">// Select Cols OR Rows</span>","                ","                <span class=\"c\">// These are optional in the HG</span>","                <span class=\"k\">var</span> colDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>getSelectionGems<span class=\"k\">()</span>","                                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                      <span class=\"k\">.</span>array<span class=\"k\">();</span>","                ","                <span class=\"k\">var</span> rowDimNames <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>getSelectionGems<span class=\"k\">()</span>","                                      <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>gem<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> gem<span class=\"k\">.</span>cccDimName<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">)</span>","                                      <span class=\"k\">.</span>array<span class=\"k\">();</span>","                ","                <span class=\"k\">var</span> nonAdditive <span class=\"k\">=</span> selectedDatums<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> selectedDatums<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>isSelected<span class=\"k\">;</span>","                ","                <span class=\"k\">var</span> whereSpec<span class=\"k\">;</span>","                ","                <span class=\"k\">if</span><span class=\"k\">(!</span>nonAdditive<span class=\"k\">)</span><span class=\"k\">{</span>","                    <span class=\"c\">// Now-selecting datums + Already selected datums</span>","                    <span class=\"k\">var</span> selectDatumsById <span class=\"k\">=</span> def<span class=\"k\">.</span>query<span class=\"k\">(</span>selectedDatums<span class=\"k\">)</span>","                            <span class=\"k\">.</span>union<span class=\"k\">(</span>data<span class=\"k\">.</span>selectedDatums<span class=\"k\">())</span>","                            <span class=\"k\">.</span>uniqueIndex<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> datum<span class=\"k\">.</span>id<span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">);</span>","                    ","                    <span class=\"k\">var</span> rowGrouping <span class=\"k\">=</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>GroupingSpec<span class=\"k\">.</span>parse<span class=\"k\">(</span>rowDimNames<span class=\"k\">,</span> data<span class=\"k\">.</span>type<span class=\"k\">);</span>","                    <span class=\"k\">var</span> rowGroupedData <span class=\"k\">=</span> data<span class=\"k\">.</span>groupBy<span class=\"k\">(</span>rowGrouping<span class=\"k\">,</span> <span class=\"k\">{</span>","                        visible<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","                        where<span class=\"k\">:</span>    <span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>selectDatumsById<span class=\"k\">,</span> datum<span class=\"k\">.</span>id<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                        whereKey<span class=\"k\">:</span> <span class=\"k\">null</span> <span class=\"c\">// prevent caching of groupedData</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                    ","                    <span class=\"k\">var</span> datumFilters <span class=\"k\">=</span> rowGroupedData","                        <span class=\"k\">.</span>leafs<span class=\"k\">()</span>","                        <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>leafData<span class=\"k\">)</span><span class=\"k\">{</span>","                            <span class=\"c\">// rowDatumFilter</span>","                            <span class=\"k\">return</span> def<span class=\"k\">.</span>copyProps<span class=\"k\">(</span>leafData<span class=\"k\">.</span>atoms<span class=\"k\">,</span> rowDimNames<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    ","                    <span class=\"k\">if</span><span class=\"k\">(</span>colDimNames<span class=\"k\">.</span>length<span class=\"k\">)</span><span class=\"k\">{</span>","                        <span class=\"c\">// Make all combinations of row leafs with col leafs</span>","                        ","                        <span class=\"k\">var</span> colGrouping <span class=\"k\">=</span> pvc<span class=\"k\">.</span>data<span class=\"k\">.</span>GroupingSpec<span class=\"k\">.</span>parse<span class=\"k\">(</span>colDimNames<span class=\"k\">,</span> data<span class=\"k\">.</span>type<span class=\"k\">);</span>","                        ","                        <span class=\"k\">var</span> colGroupedData <span class=\"k\">=</span> data<span class=\"k\">.</span>groupBy<span class=\"k\">(</span>colGrouping<span class=\"k\">,</span> <span class=\"k\">{</span>","                            visible<span class=\"k\">:</span>  <span class=\"k\">true</span><span class=\"k\">,</span>","                            where<span class=\"k\">:</span>    <span class=\"k\">function</span><span class=\"k\">(</span>datum<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>selectDatumsById<span class=\"k\">,</span> datum<span class=\"k\">.</span>id<span class=\"k\">);</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                            whereKey<span class=\"k\">:</span> <span class=\"k\">null</span> <span class=\"c\">// prevent caching of groupedData</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                        ","                        datumFilters <span class=\"k\">=</span> datumFilters","                            <span class=\"k\">.</span>selectMany<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>rowDatumFilter<span class=\"k\">)</span><span class=\"k\">{</span>","                                <span class=\"k\">return</span> colGroupedData","                                    <span class=\"k\">.</span>leafs<span class=\"k\">()</span>","                                    <span class=\"k\">.</span>select<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>leafData<span class=\"k\">)</span><span class=\"k\">{</span>","                                        <span class=\"c\">// Share the rowDatumFilter object by inheriting from it.</span>","                                        <span class=\"c\">// combined datumFilter</span>","                                        <span class=\"k\">return</span> def<span class=\"k\">.</span>copyProps<span class=\"k\">(</span>Object<span class=\"k\">.</span>create<span class=\"k\">(</span>rowDatumFilter<span class=\"k\">),</span> leafData<span class=\"k\">.</span>atoms<span class=\"k\">,</span> colDimNames<span class=\"k\">);</span>","                                    <span class=\"k\">}</span><span class=\"k\">);</span>","                            <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    ","                    whereSpec <span class=\"k\">=</span> datumFilters<span class=\"k\">.</span>array<span class=\"k\">();</span>","                    ","                    selectedDatums <span class=\"k\">=</span> data","                        <span class=\"k\">.</span>datums<span class=\"k\">(</span>whereSpec<span class=\"k\">,</span> <span class=\"k\">{</span>visible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">)</span>","                        <span class=\"k\">.</span>array<span class=\"k\">();</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">// The only clicked datum is selected and</span>","                    <span class=\"c\">//  thus the user pretends to de-select.</span>","                    <span class=\"c\">// Expand to the selected datums that have the same series or </span>","                    <span class=\"c\">// the same categories as the clicked one</span>","                    <span class=\"c\">// (a cross whose center is the clicked one)</span>","                    <span class=\"c\">// The result is that all these will be de-selected. </span>","                    <span class=\"k\">var</span> singleDatum <span class=\"k\">=</span> selectedDatums<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                    whereSpec <span class=\"k\">=</span> <span class=\"k\">[</span>","                        <span class=\"c\">// Column dimensions datum filter</span>","                        def<span class=\"k\">.</span>query<span class=\"k\">(</span>colDimNames<span class=\"k\">)</span>","                           <span class=\"k\">.</span>object<span class=\"k\">(</span><span class=\"k\">{</span>","                               value<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> singleDatum<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span> <span class=\"k\">}</span>","                           <span class=\"k\">}</span><span class=\"k\">),</span>","                        ","                        <span class=\"c\">// OR</span>","                        ","                        <span class=\"c\">// Row dimensions datum filter</span>","                        def<span class=\"k\">.</span>query<span class=\"k\">(</span>rowDimNames<span class=\"k\">)</span>","                            <span class=\"k\">.</span>object<span class=\"k\">(</span><span class=\"k\">{</span>","                                value<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>cccDimName<span class=\"k\">)</span><span class=\"k\">{</span> <span class=\"k\">return</span> singleDatum<span class=\"k\">.</span>atoms<span class=\"k\">[</span>cccDimName<span class=\"k\">];</span> <span class=\"k\">}</span>","                            <span class=\"k\">}</span><span class=\"k\">)</span>","                    <span class=\"k\">];</span>","                    ","                    selectedDatums <span class=\"k\">=</span> data","                                        <span class=\"k\">.</span>datums<span class=\"k\">(</span>whereSpec<span class=\"k\">,</span> <span class=\"k\">{</span>visible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> selected<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">)</span>","                                        <span class=\"k\">.</span>array<span class=\"k\">();</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> addDatum<span class=\"k\">(</span>datum<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> atoms <span class=\"k\">=</span> datum<span class=\"k\">.</span>atoms<span class=\"k\">;</span>","                ","                colDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","                rowDimNames<span class=\"k\">.</span>forEach<span class=\"k\">(</span>addDim<span class=\"k\">);</span>","","                <span class=\"k\">function</span> addDim<span class=\"k\">(</span>dimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> dimAtomsById <span class=\"k\">=</span> <span class=\"k\">(</span>atomsByDim<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">(</span>atomsByDim<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">));</span>","                    <span class=\"k\">var</span> atom <span class=\"k\">=</span> atoms<span class=\"k\">[</span>dimName<span class=\"k\">];</span>","                    <span class=\"k\">if</span><span class=\"k\">(!</span>def<span class=\"k\">.</span>hasOwn<span class=\"k\">(</span>dimAtomsById<span class=\"k\">,</span> atom<span class=\"k\">.</span>id<span class=\"k\">))</span><span class=\"k\">{</span>","                        dimAtomsById<span class=\"k\">[</span>atom<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> atom<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">function</span> buildWhereSpec<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> datumFilter <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> whereSpec   <span class=\"k\">=</span> <span class=\"k\">[</span>datumFilter<span class=\"k\">];</span>","                ","                def<span class=\"k\">.</span>eachOwn<span class=\"k\">(</span>atomsByDim<span class=\"k\">,</span> addDim<span class=\"k\">);</span>","                ","                <span class=\"k\">function</span> addDim<span class=\"k\">(</span>dimAtomsById<span class=\"k\">,</span> dimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// The atom itself may be used as a value condition</span>","                    datumFilter<span class=\"k\">[</span>dimName<span class=\"k\">]</span> <span class=\"k\">=</span> def<span class=\"k\">.</span>own<span class=\"k\">(</span>dimAtomsById<span class=\"k\">);</span>","                <span class=\"k\">}</span>","                ","                <span class=\"k\">return</span> whereSpec<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> selectedDatums<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.MetricDotChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>CartesianChart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.MetricDotChart'</span><span class=\"k\">,</span>","        ","        _supportsTrends<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            axisGrid<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            ","            sizeAxisUseAbs<span class=\"k\">:</span>  <span class=\"k\">false</span><span class=\"k\">,</span>","            sizeAxisOriginIsZero<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            sizeAxisRatio<span class=\"k\">:</span>   <span class=\"s\">1</span><span class=\"k\">/</span><span class=\"s\">5</span><span class=\"k\">,</span>","            sizeAxisRatioTo<span class=\"k\">:</span> <span class=\"s\">'height'</span><span class=\"k\">,</span> <span class=\"c\">// plot area client height</span>","            ","            autoPaddingByDotSize<span class=\"k\">:</span> <span class=\"k\">false</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        <span class=\"c\">/* Override Default map */</span>","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'columns'</span><span class=\"k\">:</span>  <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">'color'</span><span class=\"k\">:</span>    <span class=\"s\">'color'</span><span class=\"k\">,</span>","            <span class=\"c\">//'rows':     'category',</span>","            <span class=\"s\">'multi'</span><span class=\"k\">:</span>    <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","            <span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">'x'</span><span class=\"k\">:</span>        <span class=\"s\">'x'</span><span class=\"k\">,</span>","            <span class=\"s\">'y'</span><span class=\"k\">:</span>        <span class=\"s\">'y'</span><span class=\"k\">,</span>","            <span class=\"s\">'size'</span><span class=\"k\">:</span>     <span class=\"s\">'size'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _discreteColorRole<span class=\"k\">:</span> <span class=\"s\">'color'</span><span class=\"k\">,</span>","        ","        <span class=\"c\">// Roles already in the axis' titles</span>","        _noRoleInTooltipMeasureRoles<span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">'x'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'y'</span><span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getColorScaleKind<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>color <span class=\"k\">?</span> <span class=\"s\">'continuous'</span> <span class=\"k\">:</span> ","                   <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>color  <span class=\"k\">?</span> <span class=\"s\">'discrete'</span>   <span class=\"k\">:</span>","                   undefined<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span>  <span class=\"s\">'base'</span><span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisRange<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">);</span>","            ","            <span class=\"c\">// DOT SIZE</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>size<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">/* Axis offset like legacy analyzer */</span>","                options<span class=\"k\">.</span>axisOffset <span class=\"k\">=</span> <span class=\"s\">1.1</span> <span class=\"k\">*</span> options<span class=\"k\">.</span>sizeAxisRatio <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>axisOffset <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureColor<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>colorScaleKind<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>colorScaleKind<span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">;</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span>colorScaleKind <span class=\"k\">===</span> <span class=\"s\">'discrete'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// Must force the discrete type</span>","                options<span class=\"k\">.</span>dimensionGroups<span class=\"k\">.</span>color <span class=\"k\">=</span> <span class=\"k\">{</span>","                    valueType<span class=\"k\">:</span> String","                <span class=\"k\">}</span><span class=\"k\">;</span>","                ","<span class=\"c\">//              options.visualRoles.color = </span>","<span class=\"c\">//              this.axes.column.gemsByRole.color</span>","<span class=\"c\">//                   .map(function(gem, index){ </span>","<span class=\"c\">//                      return pvc.buildIndexedId('color', index);</span>","<span class=\"c\">//                   })</span>","<span class=\"c\">//                   .join(', ');</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _showLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"c\">// prevent default behavior that hides the legend when no series</span>","            ","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">.</span>boundRoles<span class=\"k\">.</span>color<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"c\">// Hide the legend if there is only one \"series\"</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_colGroups<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            ","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getOrthoAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMeasureRoleTitle<span class=\"k\">(</span><span class=\"s\">'y'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _getBaseAxisTitle<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getMeasureRoleTitle<span class=\"k\">(</span><span class=\"s\">'x'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureAxesDisplayUnits<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">true</span><span class=\"k\">,</span>  <span class=\"s\">'base'</span> <span class=\"k\">,</span> <span class=\"c\">/*allowFractional*/</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_configureAxisDisplayUnits<span class=\"k\">(</span><span class=\"c\">/*isPrimary*/</span><span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">'ortho'</span><span class=\"k\">,</span> <span class=\"c\">/*allowFractional*/</span><span class=\"k\">true</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// Custom</span>","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.PieChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Chart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.PieChart'</span><span class=\"k\">,</span>","        ","        _noPercentInTootltipForPercentGems<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        ","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'columns'</span><span class=\"k\">:</span>  <span class=\"s\">'multiChart'</span><span class=\"k\">,</span>","            <span class=\"c\">//'rows':     'category',</span>","            <span class=\"s\">'multi'</span><span class=\"k\">:</span>    <span class=\"k\">null</span>","            <span class=\"c\">//'measures': 'value'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            valuesVisible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            legendShape<span class=\"k\">:</span> <span class=\"s\">'circle'</span><span class=\"k\">,</span>","            ","            titlePosition<span class=\"k\">:</span> <span class=\"s\">'bottom'</span><span class=\"k\">,</span>","            ","            dataOptions<span class=\"k\">:</span> <span class=\"k\">{</span>","                measuresInColumns<span class=\"k\">:</span> <span class=\"k\">false</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            ","            extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                slice_strokeStyle<span class=\"k\">:</span><span class=\"s\">'white'</span><span class=\"k\">,</span>","                slice_lineWidth<span class=\"k\">:</span>   <span class=\"s\">0.8</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _multiRole<span class=\"k\">:</span> <span class=\"s\">'columns'</span><span class=\"k\">,</span>","        ","        _discreteColorRole<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","        ","        <span class=\"c\">// Only 'multi' is on column axis, and drilling down on multi is undesired</span>","        _drillAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">],</span>","        ","        _linkAxesIds<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'row'</span><span class=\"k\">,</span> <span class=\"s\">'column'</span><span class=\"k\">],</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"c\">// configure value label</span>","            <span class=\"k\">if</span><span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>valuesVisible<span class=\"k\">)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_configureValuesMask<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _showLegend<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legend <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>row<span class=\"k\">.</span>depth <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _readUserOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","            ","            options<span class=\"k\">.</span>valuesFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> readFontSize<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureMultiChart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>legendSizeMax <span class=\"k\">=</span> <span class=\"s\">'50%'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configureValuesMask<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","            <span class=\"c\">/* </span>","<span class=\"c\">             * Change values mask according to each category's</span>","<span class=\"c\">             * discriminated measure being PCTOF or not</span>","<span class=\"c\">             */</span>","            <span class=\"k\">var</span> colAxis <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>column<span class=\"k\">;</span>","            <span class=\"k\">var</span> meaDiscrimName <span class=\"k\">=</span> colAxis<span class=\"k\">.</span>measureDiscrimName<span class=\"k\">;</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>meaDiscrimName<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> gemsMap <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gemsMap<span class=\"k\">;</span>","                ","                <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>pie <span class=\"k\">=</span> <span class=\"k\">{</span>","                    scenes<span class=\"k\">:</span> <span class=\"k\">{</span>","                        category<span class=\"k\">:</span> <span class=\"k\">{</span>","                            sliceLabelMask<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","                                <span class=\"k\">var</span> meaAtom <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>atoms<span class=\"k\">[</span>meaDiscrimName<span class=\"k\">];</span>","                                <span class=\"k\">var</span> meaGemId<span class=\"k\">,</span> meaGem<span class=\"k\">;</span>","                                <span class=\"k\">if</span><span class=\"k\">(</span>meaAtom <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>meaGemId <span class=\"k\">=</span> meaAtom<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>meaGem <span class=\"k\">=</span> gemsMap<span class=\"k\">[</span>meaGemId<span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> meaGem<span class=\"k\">.</span>measureType <span class=\"k\">===</span> <span class=\"s\">'PCTOF'</span><span class=\"k\">)</span><span class=\"k\">{</span>","                                    <span class=\"k\">return</span> <span class=\"s\">\"{value}\"</span><span class=\"k\">;</span> <span class=\"c\">// the value is the percentage itself;</span>","                                <span class=\"k\">}</span>","                                ","                                <span class=\"k\">return</span> <span class=\"s\">\"{value} ({value.percent})\"</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _selectionExcludesMultiGems<span class=\"k\">:</span> def<span class=\"k\">.</span>fun<span class=\"k\">.</span>constant<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.TreemapChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Chart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.TreemapChart'</span><span class=\"k\">,</span>","        ","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'columns'</span><span class=\"k\">:</span>  <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">'measures'</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">'size'</span><span class=\"k\">:</span>     <span class=\"s\">'size'</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"c\">//rootCategoryLabel:  Set in configure</span>","            valuesVisible<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"c\">//valuesOptimizeLegibility: true</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _discreteColorRole<span class=\"k\">:</span> <span class=\"s\">'rows'</span><span class=\"k\">,</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>rootCategoryLabel <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_message<span class=\"k\">(</span><span class=\"s\">'chartTreeMapRootCategoryLabel'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _getDiscreteColorScale<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"c\">// Don't use memberPalette for now</span>","            <span class=\"c\">// as the given colors don't match the members that </span>","            <span class=\"c\">// are actually colored in this visualization type.</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getDefaultDiscreteColorScale<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _readUserOptions<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">)</span> <span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">,</span> vizOptions<span class=\"k\">);</span>","            ","            options<span class=\"k\">.</span>valuesFont <span class=\"k\">=</span> defaultFont<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> readFontSize<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> <span class=\"s\">'label'</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","    ","    def","    <span class=\"k\">.</span>type<span class=\"k\">(</span><span class=\"s\">'pentaho.ccc.BulletChart'</span><span class=\"k\">,</span> pentaho<span class=\"k\">.</span>ccc<span class=\"k\">.</span>Chart<span class=\"k\">)</span>","    <span class=\"k\">.</span>add<span class=\"k\">(</span><span class=\"k\">{</span>","        _cccClass<span class=\"k\">:</span> <span class=\"s\">'pvc.BulletChart'</span><span class=\"k\">,</span>","        ","        _rolesToCccDimensionsMap<span class=\"k\">:</span> <span class=\"k\">{</span>","            <span class=\"s\">'multi'</span><span class=\"k\">:</span>   <span class=\"k\">null</span><span class=\"k\">,</span>","            <span class=\"s\">'columns'</span><span class=\"k\">:</span> <span class=\"s\">'subTitle'</span><span class=\"k\">,</span>","            <span class=\"s\">'rows'</span><span class=\"k\">:</span>    <span class=\"s\">'title'</span>","            <span class=\"c\">// The rest is dynamic...</span>","            <span class=\"c\">// measures:    -&gt; split between value and marker dimensions...</span>","            <span class=\"c\">// bulletRanges -&gt; range*</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _options<span class=\"k\">:</span> <span class=\"k\">{</span>","            valuesVisible<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            valuesAnchor<span class=\"k\">:</span>  <span class=\"s\">'right'</span><span class=\"k\">,</span>","","            titlePosition<span class=\"k\">:</span> <span class=\"s\">'top'</span><span class=\"k\">,</span>","            titleSize<span class=\"k\">:</span> <span class=\"s\">25</span><span class=\"k\">,</span>","            ","            bulletTitle<span class=\"k\">:</span>    <span class=\"s\">\"Test for title\"</span><span class=\"k\">,</span>","            bulletSubtitle<span class=\"k\">:</span> <span class=\"s\">\"Test for subtitle\"</span><span class=\"k\">,</span>","            bulletMeasures<span class=\"k\">:</span> <span class=\"k\">[],</span>","            <span class=\"c\">// TODO: Constant bullets markers and ranges?</span>","            bulletMarkers<span class=\"k\">:</span>  <span class=\"k\">[</span><span class=\"s\">\"7500\"</span><span class=\"k\">],</span>","            bulletRanges<span class=\"k\">:</span>   <span class=\"k\">[</span><span class=\"s\">\"3000\"</span><span class=\"k\">,</span> <span class=\"s\">\"6500\"</span><span class=\"k\">,</span> <span class=\"s\">\"9000\"</span><span class=\"k\">],</span>","","            bulletMargin<span class=\"k\">:</span>   <span class=\"s\">50</span><span class=\"k\">,</span>","            panelSizeRatio<span class=\"k\">:</span> <span class=\"s\">0.8</span><span class=\"k\">,</span>","","            extensionPoints<span class=\"k\">:</span> <span class=\"k\">{</span>","                <span class=\"s\">\"bulletRuleLabel_font\"</span><span class=\"k\">:</span> <span class=\"s\">\"7pt sans\"</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        ","        _configure<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">();</span>","","            <span class=\"c\">/*</span>","<span class=\"c\">            var myself = this,</span>","<span class=\"c\">                options = this.options;</span>","","<span class=\"c\">            // Drill down on shapes</span>","<span class=\"c\">            options.axisDoubleClickAction = function(d){</span>","<span class=\"c\">                var c = d.title,</span>","<span class=\"c\">                s = d.subtitle;</span>","","<span class=\"c\">                myself._drillDown(myself._readCccAxesValues(s, c));</span>","<span class=\"c\">            };</span>","","<span class=\"c\">            options.clickAction = function (c, s) {</span>","<span class=\"c\">                myself._notifySelectionChanged(</span>","<span class=\"c\">                    [ myself._convertKeysSelectionCccToAnalyzer(s, c) ]);</span>","<span class=\"c\">            };</span>","<span class=\"c\">            */</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        _prepareLayout<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span><span class=\"k\">{</span>","            ","            <span class=\"k\">this</span><span class=\"k\">.</span>base<span class=\"k\">(</span>options<span class=\"k\">);</span>","            ","            <span class=\"k\">var</span> vizOptions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">;</span>","","            <span class=\"k\">var</span> isVertical <span class=\"k\">=</span> options<span class=\"k\">.</span>orientation <span class=\"k\">===</span> <span class=\"s\">'vertical'</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">20</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>bulletSize <span class=\"k\">=</span> <span class=\"s\">10</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>bulletSpacing <span class=\"k\">=</span> isVertical <span class=\"k\">?</span> <span class=\"s\">60</span> <span class=\"k\">:</span> <span class=\"s\">20</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>bulletSize <span class=\"k\">=</span> <span class=\"s\">15</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>bulletSpacing <span class=\"k\">=</span> isVertical <span class=\"k\">?</span> <span class=\"s\">80</span> <span class=\"k\">:</span> <span class=\"s\">30</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                options<span class=\"k\">.</span>bulletSize <span class=\"k\">=</span> <span class=\"s\">20</span><span class=\"k\">;</span>","                options<span class=\"k\">.</span>bulletSpacing <span class=\"k\">=</span> isVertical <span class=\"k\">?</span> <span class=\"s\">120</span> <span class=\"k\">:</span> <span class=\"s\">50</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> totalSpace <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">2</span> <span class=\"k\">+</span> options<span class=\"k\">.</span>bulletSize <span class=\"k\">+</span> options<span class=\"k\">.</span>bulletSpacing<span class=\"k\">)</span> <span class=\"k\">*</span>","                             <span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>length<span class=\"k\">;</span>","","            <span class=\"c\">// TODO: vizOptions.controller.domNode</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>isVertical<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>totalSpace <span class=\"k\">&gt;</span> options<span class=\"k\">.</span>width<span class=\"k\">)</span> <span class=\"k\">{</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowX <span class=\"k\">=</span> <span class=\"s\">'auto'</span><span class=\"k\">;</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowY <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","","                    options<span class=\"k\">.</span>width <span class=\"k\">=</span> totalSpace<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>totalSpace <span class=\"k\">&gt;</span> options<span class=\"k\">.</span>height<span class=\"k\">)</span> <span class=\"k\">{</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowY <span class=\"k\">=</span> <span class=\"s\">'auto'</span><span class=\"k\">;</span>","                    vizOptions<span class=\"k\">.</span>controller<span class=\"k\">.</span>domNode<span class=\"k\">.</span>style<span class=\"k\">.</span>overflowX <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","","                    options<span class=\"k\">.</span>height <span class=\"k\">=</span> totalSpace<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Creates a CDA resultset in a custom RELATIONAL format.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * 1    - Category - aggregated row axis columns</span>","<span class=\"c\">     * 2    - Series   - label of 'other' DataTable columns</span>","<span class=\"c\">     * 3    - Value    - numeric value of corresponding 'other' DataTable column</span>","<span class=\"c\">     * 4    - Marker   - marker numeric value of corresponding 'other' DataTable column</span>","<span class=\"c\">     * 5..R - Range r  - range numeric value, taken from vizOptions.bulletRanges</span>","<span class=\"c\">     */</span>","    <span class=\"k\">var</span> oldCccChart <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    oldCccChart<span class=\"k\">.</span>_readDataBullet <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> dataTable   <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_dataTable<span class=\"k\">,</span>","            rowCount    <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getNumberOfRows<span class=\"k\">(),</span>","            measureCols <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_otherDtColIndexes<span class=\"k\">,</span>","            seriesCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_otherDtColIndexes<span class=\"k\">.</span>length<span class=\"k\">,</span>","            vizOptions  <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_vizOptions<span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>seriesInRows <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        ","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Category'</span><span class=\"k\">,</span> <span class=\"s\">'Category'</span><span class=\"k\">,</span> <span class=\"s\">'STRING'</span> <span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Series'</span><span class=\"k\">,</span>   <span class=\"s\">'Series'</span><span class=\"k\">,</span>   <span class=\"s\">'STRING'</span> <span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Value'</span><span class=\"k\">,</span>    <span class=\"s\">'Value'</span><span class=\"k\">,</span>    <span class=\"s\">'NUMERIC'</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Marker'</span><span class=\"k\">,</span>   <span class=\"s\">'Marker'</span><span class=\"k\">,</span>   <span class=\"s\">'NUMERIC'</span><span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>vizOptions<span class=\"k\">.</span>bulletRanges<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> R <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>bulletRanges<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> R <span class=\"k\">;</span> i<span class=\"k\">++)</span><span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_addCdaMetadata<span class=\"k\">(</span><span class=\"s\">'Range'</span>  <span class=\"k\">+</span> i<span class=\"k\">,</span> <span class=\"s\">'Range '</span> <span class=\"k\">+</span> i<span class=\"k\">,</span> <span class=\"s\">'NUMERIC'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> measuresCount <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>axes<span class=\"k\">.</span>measure<span class=\"k\">.</span>depth<span class=\"k\">;</span>","","        <span class=\"c\">// Process the rows</span>","        <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> tr <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> tr <span class=\"k\">&lt;</span> rowCount <span class=\"k\">;</span> tr<span class=\"k\">++)</span><span class=\"k\">{</span>","","            <span class=\"k\">var</span> category <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_aggregateRowAxisForTableRow<span class=\"k\">(</span>tr<span class=\"k\">);</span>","","            <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> s <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> s <span class=\"k\">&lt;</span> seriesCount <span class=\"k\">;</span> s <span class=\"k\">+=</span> measuresCount<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// Measures should be defined in pairs</span>","                <span class=\"c\">// Each Value measure followed by a Marker measure:</span>","                <span class=\"c\">//  &lt;ValueMeasure1, MarkerMeasure1&gt;,</span>","                <span class=\"c\">//  &lt;ValueMeasure2, MarkerMeasure2&gt;,</span>","                <span class=\"c\">//  ...</span>","                <span class=\"c\">//  &lt;ValueMeasureN [, MarkerMeasureN]&gt;</span>","                <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> m <span class=\"k\">=</span> <span class=\"s\">0</span> <span class=\"k\">;</span> m <span class=\"k\">&lt;</span> measuresCount <span class=\"k\">;</span> m <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> valueColIndex  <span class=\"k\">=</span> s <span class=\"k\">+</span> m<span class=\"k\">,</span>","                        markerColIndex <span class=\"k\">=</span> valueColIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                        tc <span class=\"k\">=</span> measureCols<span class=\"k\">[</span>valueColIndex<span class=\"k\">],</span>","                        dtColParts <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnId<span class=\"k\">(</span>tc<span class=\"k\">).</span>split<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","","                    dtColParts<span class=\"k\">.</span>pop<span class=\"k\">();</span>","","                    <span class=\"k\">var</span> row <span class=\"k\">=</span> <span class=\"k\">[</span>","                    <span class=\"c\">// Normal relational part</span>","                        category<span class=\"k\">,</span> <span class=\"c\">// aggregated category</span>","                        dtColParts<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">),</span> <span class=\"c\">// series label</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_getTableValue<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">),</span>  <span class=\"c\">// series value - may be null...is it ok?</span>","","                        <span class=\"c\">// Marker - may be missing on the last measure pair</span>","                        m <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">&lt;</span> measuresCount <span class=\"k\">?</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_getTableValue<span class=\"k\">(</span>tr<span class=\"k\">,</span> measureCols<span class=\"k\">[</span>markerColIndex<span class=\"k\">])</span> <span class=\"k\">:</span>","                        vizOptions<span class=\"k\">.</span>bulletMarkers<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"c\">// TODO: 7500</span>","                    <span class=\"k\">];</span>","","                    <span class=\"c\">// Dynamic columns</span>","                    <span class=\"k\">var</span> bulletRanges <span class=\"k\">=</span> vizOptions<span class=\"k\">.</span>bulletRanges<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>bulletRanges<span class=\"k\">)</span><span class=\"k\">{</span>","                        bulletRanges<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>rangeValue<span class=\"k\">)</span><span class=\"k\">{</span>","                            row<span class=\"k\">.</span>push<span class=\"k\">(</span>rangeValue<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">this</span><span class=\"k\">.</span>_resultset<span class=\"k\">.</span>push<span class=\"k\">(</span>row<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    oldCccChart<span class=\"k\">.</span>_aggregateRowAxisForTableRow <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>tr<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// Concat all of the string columns</span>","        <span class=\"k\">var</span> values <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_rowNormalDtColIndexes<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>tc<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_getTableValue<span class=\"k\">(</span>tr<span class=\"k\">,</span> tc<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","","        <span class=\"k\">return</span> values<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">/**</span>","<span class=\"c\">     * Set of visualization options that</span>","<span class=\"c\">     * should not be copied to the CCC options.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">var</span> _skipVizOptions <span class=\"k\">=</span> pv<span class=\"k\">.</span>dict<span class=\"k\">([</span>","        <span class=\"s\">'action'</span><span class=\"k\">,</span>","        <span class=\"s\">'autoRange'</span><span class=\"k\">,</span>","        <span class=\"s\">'backgroundColor'</span><span class=\"k\">,</span>","        <span class=\"s\">'backgroundColorEnd'</span><span class=\"k\">,</span>","        <span class=\"s\">'backgroundFill'</span><span class=\"k\">,</span>","        <span class=\"s\">'chartType'</span><span class=\"k\">,</span>","        <span class=\"s\">'controller'</span><span class=\"k\">,</span>","        <span class=\"s\">'customChartType'</span><span class=\"k\">,</span>","        <span class=\"s\">'displayUnits'</span><span class=\"k\">,</span>","        <span class=\"s\">'maxChartsPerRow'</span><span class=\"k\">,</span>","        <span class=\"s\">'emptyCellsMode'</span><span class=\"k\">,</span>","        ","        <span class=\"s\">'labelSize'</span><span class=\"k\">,</span>","        <span class=\"s\">'labelStyle'</span><span class=\"k\">,</span>","        <span class=\"s\">'labelFontFamily'</span><span class=\"k\">,</span>","        <span class=\"s\">'labelColor'</span><span class=\"k\">,</span>","        ","        <span class=\"s\">'legendBackgroundColor'</span><span class=\"k\">,</span>","        <span class=\"s\">'legendColor'</span><span class=\"k\">,</span>","        <span class=\"s\">'legendFontFamily'</span><span class=\"k\">,</span>","        <span class=\"s\">'legendStyle'</span><span class=\"k\">,</span>","","        <span class=\"c\">// NOTE: analyzer's legendSize is more like a \"legentFontSize\",</span>","        <span class=\"c\">// while CCC's is the legend panel's size (width or height)</span>","        <span class=\"s\">'legendSize'</span><span class=\"k\">,</span>","","        <span class=\"s\">'lineShape'</span><span class=\"k\">,</span>","        <span class=\"s\">'maxValues'</span><span class=\"k\">,</span>","        <span class=\"s\">'metrics'</span><span class=\"k\">,</span>","        <span class=\"s\">'palette'</span><span class=\"k\">,</span>","        <span class=\"s\">'selections'</span>","    <span class=\"k\">],</span>","    def<span class=\"k\">.</span>retTrue<span class=\"k\">);</span>","","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> writeCccColumnDataType<span class=\"k\">(</span>colType<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">switch</span><span class=\"k\">(</span>colType<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">'string'</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">'STRING'</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">'number'</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"s\">'NUMERIC'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Unsupported data type\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> splitColGroupAndMeasure<span class=\"k\">(</span>colGroupAndMeasure<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> sepIndex <span class=\"k\">=</span> colGroupAndMeasure<span class=\"k\">.</span>lastIndexOf<span class=\"k\">(</span><span class=\"s\">'~'</span><span class=\"k\">);</span>","","        <span class=\"c\">// MeasureName has precedence,</span>","        <span class=\"c\">// so we may end up with no column group value (and C = 0).</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>sepIndex <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">[</span><span class=\"s\">''</span><span class=\"k\">,</span> colGroupAndMeasure<span class=\"k\">];</span>","        <span class=\"k\">}</span>","      ","        <span class=\"k\">return</span> <span class=\"k\">[</span>","            colGroupAndMeasure<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span>  sepIndex<span class=\"k\">),</span>","            colGroupAndMeasure<span class=\"k\">.</span>substring<span class=\"k\">(</span>sepIndex <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span>","        <span class=\"k\">];</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> defaultFont<span class=\"k\">(</span>font<span class=\"k\">,</span> defaultSize<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">if</span><span class=\"k\">(!</span>font<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span>defaultSize <span class=\"k\">||</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'px sans-serif'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> font<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\bdefault\\s*$/i</span><span class=\"k\">,</span> <span class=\"s\">'sans-serif'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> readFont<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> prefix<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> size <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"Size\"</span><span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>size<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> style <span class=\"k\">=</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"Style\"</span><span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>style <span class=\"k\">==</span> <span class=\"k\">null</span> <span class=\"k\">||</span> style <span class=\"k\">==</span> <span class=\"s\">'PLAIN'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                style <span class=\"k\">=</span> <span class=\"s\">''</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                style <span class=\"k\">+=</span> <span class=\"s\">' '</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> style <span class=\"k\">+</span> size <span class=\"k\">+</span> <span class=\"s\">'px '</span> <span class=\"k\">+</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"FontFamily\"</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> readFontSize<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> prefix<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">+</span>vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"Size\"</span><span class=\"k\">];</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> readFontFamily<span class=\"k\">(</span>vizOptions<span class=\"k\">,</span> prefix<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">return</span> vizOptions<span class=\"k\">[</span>prefix <span class=\"k\">+</span> <span class=\"s\">\"FontFamily\"</span><span class=\"k\">];</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// FIX Analyzer's colors</span>","    <span class=\"k\">function</span> colorFromAnalyzer<span class=\"k\">(</span>color<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> L <span class=\"k\">=</span> color<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>L <span class=\"k\">&gt;</span> <span class=\"s\">4</span> <span class=\"k\">&amp;&amp;</span> L <span class=\"k\">&lt;</span> <span class=\"s\">7</span> <span class=\"k\">&amp;&amp;</span> color<span class=\"k\">.</span>charAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'#'</span><span class=\"k\">)</span><span class=\"k\">{</span>","            color <span class=\"k\">=</span> color<span class=\"k\">.</span>substr<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","            <span class=\"k\">if</span><span class=\"k\">(</span>L <span class=\"k\">===</span> <span class=\"s\">6</span><span class=\"k\">)</span><span class=\"k\">{</span>","                color <span class=\"k\">=</span> <span class=\"s\">\"#0\"</span> <span class=\"k\">+</span> color<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"c\">//if(L === 5){</span>","                color <span class=\"k\">=</span> <span class=\"s\">\"#00\"</span> <span class=\"k\">+</span> color<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> pv<span class=\"k\">.</span>color<span class=\"k\">(</span>color<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// @private</span>","    <span class=\"c\">// @static</span>","    <span class=\"k\">function</span> getColumnRolesAndLevels<span class=\"k\">(</span>dataTable<span class=\"k\">,</span> tc<span class=\"k\">)</span><span class=\"k\">{</span>","        <span class=\"k\">var</span> dataReq <span class=\"k\">=</span> dataTable<span class=\"k\">.</span>getColumnProperty<span class=\"k\">(</span>tc<span class=\"k\">,</span> <span class=\"s\">'dataReq'</span><span class=\"k\">);</span>","        <span class=\"k\">if</span><span class=\"k\">(</span>dataReq<span class=\"k\">)</span><span class=\"k\">{</span>","            <span class=\"k\">return</span> def<span class=\"k\">.</span>array<span class=\"k\">.</span>to<span class=\"k\">(</span>dataReq<span class=\"k\">).</span>map<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>item<span class=\"k\">)</span><span class=\"k\">{</span>","             <span class=\"c\">// NOTE: in IE, unbound columns do not come with an \"undefined\" role id ??</span>","                <span class=\"k\">if</span><span class=\"k\">(!</span>item<span class=\"k\">.</span>id<span class=\"k\">)</span><span class=\"k\">{</span> item<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">'undefined'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","                <span class=\"k\">return</span> item<span class=\"k\">;</span> ","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['vizapi/ccc/ccc_wrapper.js'][1]++;
pen.define(["cdf/lib/CCC/def", "cdf/lib/CCC/pvc-d1.0", "cdf/lib/CCC/protovis", "common-ui/vizapi/VizController", "common-ui/vizapi/ccc/ccc_analyzer_plugin"], (function (def, pvc, pv) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][12]++;
  pentaho = (((typeof pentaho) != "undefined")? pentaho: {});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][15]++;
  def.globalSpace("pentaho", pentaho);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][17]++;
  (pentaho.visualizations || (pentaho.visualizations = {}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][19]++;
  function defVisualization(viz) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][20]++;
    pentaho.visualizations.push(viz);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][23]++;
  defCCCVisualizations();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][28]++;
  pentaho.trends.types().forEach((function (trendType) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][29]++;
  var trendInfo = pentaho.trends.get(trendType);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][31]++;
  pvc.trends.define(trendType, trendInfo);
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][36]++;
  function defCCCVisualizations() {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][37]++;
    defVisualization({id: "ccc_bar", type: "barchart", source: "CCC", name: vizLabel("VERTICAL_BAR"), "class": "pentaho.ccc.BarChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: def.array.appendMany(createDataReq("VERTICAL_BAR", {options: false}), createTrendsDataReqs({separator: false}), [createChartOptionsDataReq(true)])}], menuOrdinal: 100});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][55]++;
    defVisualization({id: "ccc_barstacked", type: "barchart", source: "CCC", name: vizLabel("STACKED_VERTICAL_BAR"), "class": "pentaho.ccc.StackedBarChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("STACKED_VERTICAL_BAR")}], menuOrdinal: 110});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][70]++;
    defVisualization({id: "ccc_horzbar", type: "horzbarchart", source: "CCC", name: vizLabel("HORIZONTAL_BAR"), "class": "pentaho.ccc.HorizontalBarChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("HORIZONTAL_BAR")}], menuOrdinal: 130, menuSeparator: true});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][86]++;
    defVisualization({id: "ccc_horzbarstacked", type: "horzbarchart", source: "CCC", name: vizLabel("STACKED_HORIZONTAL_BAR"), "class": "pentaho.ccc.HorizontalStackedBarChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("STACKED_HORIZONTAL_BAR")}], menuOrdinal: 140});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][101]++;
    defVisualization({id: "ccc_barnormalized", type: "barchart", source: "CCC", name: vizLabel("PCT_STACKED_VERTICAL_BAR"), "class": "pentaho.ccc.NormalizedBarChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("PCT_STACKED_VERTICAL_BAR")}], menuOrdinal: 120});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][116]++;
    defVisualization({id: "ccc_horzbarnormalized", type: "horzbarchart", source: "CCC", name: vizLabel("PCT_STACKED_HORIZONTAL_BAR"), "class": "pentaho.ccc.HorizontalNormalizedBarChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("PCT_STACKED_HORIZONTAL_BAR")}], menuOrdinal: 150});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][131]++;
    defVisualization({id: "ccc_line", type: "linechart", source: "CCC", name: vizLabel("LINE"), "class": "pentaho.ccc.LineChart", args: {shape: "circle"}, propMap: [], dataReqs: [{name: "Default", reqs: def.array.appendMany(createDataReq("LINE", {options: false}), [createShapeDataReq(), createLineWidthDataReq(),], createTrendsDataReqs(), [createChartOptionsDataReq(true)])}], menuOrdinal: 160, menuSeparator: true});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][157]++;
    defVisualization({id: "ccc_area", type: "areachart", source: "CCC", name: vizLabel("STACKED_AREA"), "class": "pentaho.ccc.StackedAreaChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("STACKED_AREA")}], menuOrdinal: 180});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][172]++;
    defVisualization({id: "ccc_scatter", type: "scatter", source: "CCC", name: vizLabel("SCATTER"), "class": "pentaho.ccc.MetricDotChart", maxValues: [1000, 2500, 5000, 10000], args: {}, propMap: [], dataReqs: [{name: "Default", reqs: def.array.appendMany([{id: "x", dataType: "number", dataStructure: "column", caption: dropZoneLabel("SCATTER_X"), required: true, allowMultiple: false}, {id: "y", dataType: "number", dataStructure: "column", caption: dropZoneLabel("SCATTER_Y"), required: true, allowMultiple: false}, {id: "rows", dataType: "string", dataStructure: "column", caption: dropZoneLabel("SCATTER_ROW"), required: true, allowMultiple: true}, {id: "color", dataType: "number, string", dataStructure: "column", caption: dropZoneLabel("SCATTER_COL"), required: false, allowMultiple: false}, {id: "size", dataType: "number", dataStructure: "column", caption: dropZoneLabel("SCATTER_Z"), required: false, allowMultiple: false}, createMultiDataReq(), createPatternDataReq(), createColorSetDataReq(), createReverseColorsDataReq()], createTrendsDataReqs(), [createChartOptionsDataReq(true)])}], menuOrdinal: 190, menuSeparator: true});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][236]++;
    defVisualization({id: "ccc_barline", type: "barchart", source: "CCC", name: vizLabel("VERTICAL_BAR_LINE"), "class": "pentaho.ccc.BarLineChart", args: {shape: "circle"}, propMap: [], dataReqs: [{name: "Default", reqs: [createRowDataReq("VERTICAL_BAR_LINE_ROW"), createColDataReq("VERTICAL_BAR_LINE_COL"), def.set(createMeaDataReq("VERTICAL_BAR_LINE_NUMCOL"), "required", false), def.set(createMeaDataReq("VERTICAL_BAR_LINE_NUMLINE"), "id", "measuresLine", "required", false), createMultiDataReq(), createShapeDataReq(), createLineWidthDataReq(), createChartOptionsDataReq(true)]}], menuOrdinal: 125});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][269]++;
    defVisualization({id: "ccc_waterfall", type: "waterfallchart", source: "CCC", name: vizLabel("WATERFALL"), "class": "pentaho.ccc.WaterfallChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("WATERFALL")}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][283]++;
    defVisualization({id: "ccc_boxplot", type: "boxplotchart", source: "CCC", name: vizLabel("BOXPLOT"), "class": "pentaho.ccc.BoxplotChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: [createRowDataReq("BOXPLOT_ROW"), def.set(createMeaDataReq("BOXPLOT_PCT50"), "allowMultiple", false, "required", false), {id: "percentil25", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT25"), required: false, allowMultiple: false}, {id: "percentil75", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT75"), required: false, allowMultiple: false}, {id: "percentil5", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT05"), required: false, allowMultiple: false}, {id: "percentil95", dataType: "number", dataStructure: "column", caption: dropZoneLabel("BOXPLOT_PCT95"), required: false, allowMultiple: false}, createMultiDataReq(), createChartOptionsDataReq()]}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][337]++;
    defVisualization({id: "ccc_pie", type: "piechart", source: "CCC", name: vizLabel("MULTIPLE_PIE"), "class": "pentaho.ccc.PieChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: createDataReq("MULTIPLE_PIE", {multi: false})}], menuOrdinal: 180});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][353]++;
    defVisualization({id: "ccc_heatgrid", type: "heatgrid", source: "CCC", name: vizLabel("HEATGRID"), "class": "pentaho.ccc.HeatGridChart", maxValues: [500, 1000, 2000, 5000], args: {shape: "square"}, propMap: [], dataReqs: [{name: "Default", reqs: [{id: "rows", dataType: "string", dataStructure: "row", caption: dropZoneLabel("HEATGRID_ROW"), required: true, allowMultiple: true}, {id: "columns", dataType: "string", dataStructure: "column", caption: dropZoneLabel("HEATGRID_COL"), required: false, allowMultiple: true}, {id: "color", dataType: "number", dataStructure: "column", caption: dropZoneLabel("HEATGRID_COLOR"), required: false, allowMultiple: false}, {id: "size", dataType: "number", dataStructure: "column", caption: dropZoneLabel("HEATGRID_SIZE"), required: false, allowMultiple: false}, createPatternDataReq(), createColorSetDataReq(), createReverseColorsDataReq(), createShapeDataReq({"square": true, "circle": true}), createChartOptionsDataReq(true)]}], menuOrdinal: 200});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][410]++;
    defVisualization({id: "ccc_treemap", type: "treemapchart", source: "CCC", name: vizLabel("TREEMAP"), "class": "pentaho.ccc.TreemapChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: [def.set(createRowDataReq("TREEMAP_ROW"), "required", true), {id: "size", dataType: "number", dataStructure: "column", caption: dropZoneLabel("TREEMAP_SIZE"), required: false, allowMultiple: false}, createMultiDataReq(), createChartOptionsDataReq(false)]}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][436]++;
    defVisualization({id: "ccc_bulletchart", type: "bulletchart", source: "CCC", name: "Bullet Chart", "class": "pentaho.ccc.BulletChart", args: {}, propMap: [], dataReqs: [{name: "Default", reqs: [{id: "rows", dataType: "string", dataStructure: "row", caption: "Across", required: true}, {id: "columns", dataType: "string", dataStructure: "column", caption: "Down", required: true}, {id: "measures", dataType: "number", dataStructure: "column", caption: "Values", required: true}, createChartOptionsDataReq()]}]});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][476]++;
    function label(prefix, id) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][476]++;
      return ((id && cvCatalog[((prefix || "") + id)]) || "");
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][478]++;
    function vizLabel(id) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][478]++;
      return (label("VIZ_", id) || id);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][480]++;
    function dropZoneLabel(id, defaultLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][481]++;
      return (label("dropZoneLabels_", id) || label("ropZoneLabels_", id) || defaultLabel || id);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][486]++;
    function chartPropsLabel(id, defaultLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][487]++;
      return (label("dlgChartProps", id) || defaultLabel || id);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][490]++;
    function createRowDataReq(rowLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][491]++;
      return ({id: "rows", dataType: "string", dataStructure: "column", caption: dropZoneLabel(rowLabel), required: false, allowMultiple: true, defaultAppend: true});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][502]++;
    function createColDataReq(columnLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][503]++;
      return ({id: "columns", dataType: "string", dataStructure: "column", caption: dropZoneLabel(columnLabel), required: false, allowMultiple: true});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][513]++;
    function createMeaDataReq(measureLabel) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][514]++;
      return ({id: "measures", dataType: "number", dataStructure: "column", caption: dropZoneLabel(measureLabel), required: true, allowMultiple: true, defaultAppend: true});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][525]++;
    function createMultiDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][526]++;
      return ({id: "multi", dataType: "string", dataStructure: "column", caption: dropZoneLabel("MULTI_CHART"), allowMultiple: true, required: false});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][536]++;
    function createShapeDataReq(valuesSet) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][537]++;
      var values = ["circle", "cross", "diamond", "square", "triangle"];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][538]++;
      if (valuesSet) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][539]++;
        values = values.filter((function (value) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][539]++;
  return def.hasOwn(valuesSet, value);
}));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][542]++;
      values.unshift("none");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][544]++;
      return ({id: "shape", dataType: "string", values: values, ui: {labels: values.map((function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][549]++;
  return dropZoneLabel(option.toUpperCase());
})), group: "options", type: "combo", caption: dropZoneLabel("BULLET_STYLE")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][557]++;
    function createLineWidthDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][558]++;
      return ({id: "lineWidth", dataType: "string", values: ["1", "2", "3", "4", "5", "6", "7", "8"], ui: {labels: ["1", "2", "3", "4", "5", "6", "7", "8"], group: "options", type: "combo", caption: chartPropsLabel("LineWidth")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][571]++;
    function createTrendsDataReqs(keyArgs) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][572]++;
      var types = ["none", "linear"];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][573]++;
      return [{id: "trendType", dataType: "string", values: types, ui: {labels: types.map((function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][579]++;
  return dropZoneLabel(("TREND_TYPE_" + option.toUpperCase()));
})), group: "options", type: "combo", caption: dropZoneLabel("TREND_TYPE"), seperator: def.get(keyArgs, "separator", true)}}, {id: "trendName", dataType: "string", ui: {group: "options", type: "textbox", caption: dropZoneLabel("TREND_NAME")}}, {id: "trendLineWidth", dataType: "string", values: ["1", "2", "3", "4", "5", "6", "7", "8"], ui: {labels: ["1", "2", "3", "4", "5", "6", "7", "8"], group: "options", type: "combo", caption: dropZoneLabel("TREND_LINEWIDTH")}}];
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][606]++;
    function createPatternDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][607]++;
      return ({id: "pattern", dataType: "string", values: ["GRADIENT", "3-COLOR", "5-COLOR"], ui: {labels: ["GRADIENT", "3_STEP", "5_STEP"].map((function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][613]++;
  return dropZoneLabel(option);
})), group: "options", type: "combo", caption: dropZoneLabel("PATTERN")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][621]++;
    function createColorSetDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][622]++;
      return ({id: "colorSet", dataType: "string", values: ["ryg", "ryb", "blue", "gray"], ui: {labels: ["RYG", "RYB", "BLUE", "GRAY"].map((function (option) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][628]++;
  return dropZoneLabel(("GRAD_" + option));
})), group: "options", type: "combo", caption: dropZoneLabel("COLORSET")}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][636]++;
    function createReverseColorsDataReq() {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][637]++;
      return ({id: "reverseColors", dataType: "boolean", ui: {label: dropZoneLabel("COLORSET_REVERSE"), group: "options", type: "checkbox"}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][648]++;
    function createChartOptionsDataReq(hasSeparator) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][649]++;
      return ({id: "optionsBtn", dataType: "none", ui: {group: "options", type: "button", label: dropZoneLabel("CHART_OPTIONS"), seperator: (hasSeparator || false)}});
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][661]++;
    function createDataReq(chartId, options) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][662]++;
      var json = [];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][664]++;
      if (def.get(options, "row", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][665]++;
        json.push(createRowDataReq((chartId + "_ROW")));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][668]++;
      if (def.get(options, "column", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][669]++;
        json.push(createColDataReq((chartId + "_COL")));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][672]++;
      if (def.get(options, "measure", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][673]++;
        json.push(createMeaDataReq((chartId + "_NUM")));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][676]++;
      if (def.get(options, "multi", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][677]++;
        json.push(createMultiDataReq());
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][680]++;
      if (def.get(options, "options", true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][681]++;
        json.push(createChartOptionsDataReq(false));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][684]++;
      return json;
}
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][690]++;
  def.type("pentaho.ccc.Axis").init((function (chart, axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][693]++;
  this.chart = chart;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][694]++;
  this.id = axisId;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][697]++;
  this.gemsByRole = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][698]++;
  this.indexesByRole = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][701]++;
  this.boundRoles = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][705]++;
  this.boundRolesIdList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][707]++;
  this.gems = this._getGems();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][708]++;
  this.depth = this.gems.length;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][709]++;
  this.formulas = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][711]++;
  this.gems.forEach(initGem, this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][714]++;
  function initGem(gem, index) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][716]++;
    gem.axis = this;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][717]++;
    gem.index = index;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][719]++;
    var roleId = gem.role;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][720]++;
    if ((roleId && (roleId !== "undefined"))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][721]++;
      if (this._ensureRole(roleId)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][723]++;
        this.boundRoles[roleId] = true;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][724]++;
        this.boundRolesIdList.push(roleId);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][727]++;
      var roleGems = this.gemsByRole[roleId];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][728]++;
      gem.roleLevel = roleGems.length;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][729]++;
      roleGems.push(gem);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][731]++;
      this.indexesByRole[roleId].push(index);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][734]++;
    this.formulas.push(gem.formula);
}
})).add({defaultRole: null, _ensureRole: (function (roleId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][741]++;
  if ((! this.gemsByRole[roleId])) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][742]++;
    this.gemsByRole[roleId] = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][743]++;
    this.indexesByRole[roleId] = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][745]++;
    return true;
  }
}), configure: (function (virtualItemStartIndex, cccDimNamesSet) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][750]++;
  this.configureDimensionGroups();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][751]++;
  return this.configureReaders(virtualItemStartIndex, cccDimNamesSet);
}), configureDimensionGroups: (function () {
}), configureReaders: (function (virtualItemStartIndex, cccDimNamesSet) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][763]++;
  var readers = this.chart.options.readers, index = virtualItemStartIndex;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][766]++;
  this.cccDimList().forEach((function (dimName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][767]++;
  if ((! def.hasOwn(cccDimNamesSet, dimName))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][768]++;
    cccDimNamesSet[dimName] = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][770]++;
    var reader = {names: dimName, indexes: index};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][775]++;
    readers.push(reader);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][776]++;
    (index++);
  }
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][780]++;
  return index;
}), _getGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][785]++;
  var gems = this.chart._axesGemsInfo[this.id];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][786]++;
  var vizHelper = this.chart._vizHelper;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][787]++;
  if (vizHelper.completeAxisGemsMetadata) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][788]++;
    vizHelper.completeAxisGemsMetadata(this.id, gems);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][791]++;
  return gems;
}), getAxisLabel: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][795]++;
  var labels = def.query(this._getAxisLabelGems()).where((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][796]++;
  return gem.cccDimName;
})).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][797]++;
  return gem.label;
})).array(), last = labels.pop(), first = labels.join(", ");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][802]++;
  if ((first && last)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][803]++;
    return this.chart._message("chartAxisTitleMultipleDimText", [first, last]);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][806]++;
  return (first || last);
}), _getAxisLabelGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][810]++;
  return this.gems;
}), buildHtmlTooltip: (function (lines, complex, context) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][814]++;
  this.gems.forEach(this._buildGemHtmlTooltip.bind(this, lines, complex, context));
}), _buildGemHtmlTooltip: (function (lines, complex, context, gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][823]++;
  if ((gem.cccDimName && (gem.role !== this.chart._multiRole))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][824]++;
    var atom = complex.atoms[gem.cccDimName];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][825]++;
    if (((! atom.dimension.type.isHidden) && ((! complex.isTrend) || (atom.value != null)))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][827]++;
      lines.push((def.html.escape(gem.label) + ": " + def.html.escape(atom.label)));
    }
  }
}), cccDimList: def.method({isAbstract: true}), fillCellSelection: def.method({isAbstract: true}), getDrillDownInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][842]++;
  return null;
}), getDeepestInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][846]++;
  return null;
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][853]++;
  pentaho.ccc.Axis.create = (function (chart, axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][854]++;
  var funClass;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][856]++;
  switch (axisId) {
  case "row":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][857]++;
    funClass = pentaho.ccc.RowAxis;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][857]++;
    break;
  case "column":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][858]++;
    funClass = pentaho.ccc.ColumnAxis;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][858]++;
    break;
  case "measure":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][859]++;
    funClass = pentaho.ccc.MeasureAxis;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][859]++;
    break;
  default:
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][860]++;
    throw def.error.argumentInvalid("Undefined axis value '{0}'.", [axisId]);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][863]++;
  return new funClass(chart);
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][868]++;
  def.type("pentaho.ccc.DiscreteAxis", pentaho.ccc.Axis).init((function (chart, axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][872]++;
  this.base(chart, axisId);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][874]++;
  var multiGems = this.gemsByRole[this.chart._multiRole];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][875]++;
  this.hasMulti = ((! (! multiGems)) && def.query(multiGems).any((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][877]++;
  return (! gem.isMeasureDiscrim);
})));
})).postInit((function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][884]++;
  if (this.hasMulti) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][885]++;
    this._ensureRole(this.chart._multiRole);
  }
})).add({_nonMultiGemFilter: (function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][890]++;
  return (gem.role !== this.chart._multiRole);
}), cccDimList: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][900]++;
  if ((! this._cccDimList)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][902]++;
    var cccDimList = (this._cccDimList = new Array(this.gems.length));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][905]++;
    this.gems.forEach((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][906]++;
  gem.cccDimName = (cccDimList[gem.index] = (this._getGemDimName(gem) || null));
}), this);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][911]++;
  return this._cccDimList;
}), _getGemDimName: (function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][915]++;
  var roleToCccDimMap = this.chart._rolesToCccDimensionsMap, cccDimGroup = roleToCccDimMap[gem.role];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][918]++;
  if (((typeof cccDimGroup) === "string")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][919]++;
    return pvc.buildIndexedId(cccDimGroup, gem.roleLevel);
  }
}), _buildGemHtmlTooltip: (function (lines, complex, context, gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][928]++;
  if (this._nonMultiGemFilter(gem)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][929]++;
    this.base.apply(this, arguments);
  }
}), _getAxisLabelGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][934]++;
  return def.query(this.gems).where(this._nonMultiGemFilter, this);
}), fillCellSelection: (function (selection, complex, selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][938]++;
  var forms = [], values = [], label;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][942]++;
  this.getSelectionGems(selectionExcludesMulti).each((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][944]++;
  var atom = complex.atoms[gem.cccDimName];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][945]++;
  forms.push(gem.formula);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][946]++;
  values.push(atom.value);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][947]++;
  label = atom.label;
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][950]++;
  if (forms.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][951]++;
    var axisId = this.id;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][953]++;
    selection[axisId] = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][955]++;
    selection[(axisId + "Id")] = forms;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][956]++;
    selection[(axisId + "Item")] = values;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][957]++;
    selection[(axisId + "Label")] = label;
  }
}), getSelectionGems: (function (selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][962]++;
  if ((selectionExcludesMulti == null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][963]++;
    selectionExcludesMulti = true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][966]++;
  return def.query(this.gems).where((function (gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][968]++;
  return (((! selectionExcludesMulti) || this._nonMultiGemFilter(gem)) && (! gem.isMeasureDiscrim) && (! (! gem.cccDimName)));
}), this);
}), getKeepOrDrillGems: (function (drillGem, selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][975]++;
  if ((selectionExcludesMulti == null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][976]++;
    selectionExcludesMulti = true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][979]++;
  return def.query(this.gems).where((function (gem, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][981]++;
  return ((gem === drillGem) || (((! selectionExcludesMulti) || this._nonMultiGemFilter(gem)) && (! gem.isMeasureDiscrim) && (! (! gem.cccDimName))));
}), this);
}), selectGemsWithLink: (function (linkType, complex, reverse) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][989]++;
  var gems = def.query(this.gems);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][990]++;
  if (reverse) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][991]++;
    gems = gems.reverse();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][994]++;
  var isObjectLinkType = def.object.is(linkType);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][995]++;
  return gems.where((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][997]++;
  var atom;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][998]++;
  return (gem.hasLink && ((! linkType) || (isObjectLinkType? def.hasOwn(linkType, gem.linkType): (gem.linkType === linkType))) && ((! complex) || (gem.cccDimName && (atom = complex.atoms[gem.cccDimName]) && (atom.value != null))));
}));
}), selectBoundGems: (function (complex, reverse) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1006]++;
  var gems = def.query(this.gems);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1007]++;
  if (reverse) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1008]++;
    gems = gems.reverse();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1011]++;
  return gems.where((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1013]++;
  return ((! gem.isMeasureDiscrim) && gem.cccDimName && complex.atoms[gem.cccDimName]);
}));
}), getHyperlinkInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1022]++;
  var lastGem = this.selectGemsWithLink(this.chart._hyperlinkTypes, complex, true).first();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1027]++;
  if (lastGem) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1028]++;
    return ({gem: lastGem, atom: complex.atoms[lastGem.cccDimName]});
  }
}), getDrillDownInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1036]++;
  var deepestInfo = this.getDeepestInfo(complex);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1037]++;
  if ((! deepestInfo)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1038]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1042]++;
  var lastForm = deepestInfo.gem.formula, childForm = this.chart.getChildFormula(lastForm);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1044]++;
  if ((! childForm)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1047]++;
    var gemList = def.query(this.gems).reverse().array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1048]++;
    for (var i = 1; (i < gemList.length); (i++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1049]++;
      var g = gemList[i];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1050]++;
      if ((! g.isMeasureDiscrim)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1051]++;
        var deepestGem = this.getHierarchyDeepestGem(g.formula), atom;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1053]++;
        if (deepestGem) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1054]++;
          if (complex) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1055]++;
            atom = complex.atoms[deepestGem.cccDimName];
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1056]++;
            if (((! atom) || (atom.value == null))) {
              _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1057]++;
              deepestInfo = null;
            }
          }
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1061]++;
          deepestInfo = {gem: deepestGem, atom: atom};
        }
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1068]++;
      lastForm = deepestInfo.gem.formula;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1069]++;
      childForm = this.chart.getChildFormula(lastForm);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1070]++;
      if (childForm) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1071]++;
        break;
      }
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1074]++;
    if ((! childForm)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1075]++;
      return null;
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1083]++;
  if (def.hasOwn(this.chart.gemsMap, childForm)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1084]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1087]++;
  deepestInfo.drillChild = childForm;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1089]++;
  return deepestInfo;
}), getDeepestInfo: (function (complex, hierarchy) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1093]++;
  if (this.depth) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1094]++;
    var lastGem = this.getLastProperGem(complex, hierarchy);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1095]++;
    if (lastGem) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1096]++;
      var deepestGem = this.getHierarchyDeepestGem(lastGem.formula), atom;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1098]++;
      if (deepestGem) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1099]++;
        if (complex) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1100]++;
          atom = complex.atoms[deepestGem.cccDimName];
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1101]++;
          if (((! atom) || (atom.value == null))) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1102]++;
            return null;
          }
        }
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1106]++;
        return ({gem: deepestGem, atom: atom});
      }
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1114]++;
  return null;
}), getLastProperGem: (function (complex, hierarchy) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1131]++;
  var realHierarchy;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1132]++;
  if (hierarchy) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1133]++;
    realHierarchy = hierarchy.match(/^(\[.*?\])?.*$/)[1];
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1136]++;
  return def.query(this.gems).reverse().first((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1139]++;
  var atom;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1140]++;
  return ((! gem.isMeasureDiscrim) && ((! realHierarchy) || (gem.hierarchy === realHierarchy)) && ((! complex) || (gem.cccDimName && (atom = complex.atoms[gem.cccDimName]) && (atom.value != null))));
}));
}), getHierarchyDeepestGem: (function (hierarchy) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1147]++;
  var hForms = this.chart._getHierarchyFormulas(hierarchy, false, false);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1152]++;
  return (def.query(hForms).reverse().select((function (hForm) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1155]++;
  var gem = def.getOwn(this.chart.gemsMap, hForm);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1156]++;
  return ((gem && (gem.axis === this) && gem.cccDimName)? gem: null);
}), this).first(def.notNully) || null);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1164]++;
  def.type("pentaho.ccc.ColumnAxis", pentaho.ccc.DiscreteAxis).init((function (chart) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1168]++;
  var rolesToCccDimMap = chart._rolesToCccDimensionsMap;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1170]++;
  this.hasMeasureDiscrim = ((! chart.options.dataOptions.measuresInColumns) && (! (! (rolesToCccDimMap[this.defaultRole] || rolesToCccDimMap[chart.axes.row.defaultRole]))));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1174]++;
  this.isHiddenMeasureDiscrim = (this.hasMeasureDiscrim && (! (chart.axes.measure.genericMeasuresCount > 1)));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1177]++;
  this.base(chart, "column");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1179]++;
  this._ensureRole(this.defaultRole);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1181]++;
  this.realDepth = (this.hasMeasureDiscrim? (this.depth - 1): this.depth);
})).add({defaultRole: "columns", hiddenMeasureDiscrimDimName: "measureDiscrim", measureDiscrimName: null, _getGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1190]++;
  var gems = this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1192]++;
  if (this.hasMeasureDiscrim) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1193]++;
    gems.push({isMeasureDiscrim: true, id: "__MeasureDiscrim__", label: "Measure discriminator", axis: this.id, role: this.defaultRole});
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1202]++;
  return gems;
}), _getGemDimName: (function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1206]++;
  if ((gem.isMeasureDiscrim && this.isHiddenMeasureDiscrim)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1209]++;
    return (this.measureDiscrimName = this.hiddenMeasureDiscrimDimName);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1212]++;
  var cccDimName = this.base(gem);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1213]++;
  if (gem.isMeasureDiscrim) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1214]++;
    if ((! cccDimName)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1218]++;
      var rolesToCccDimMap = this.chart._rolesToCccDimensionsMap, rowAxis = this.chart.axes.row, rowRole = rowAxis.defaultRole, rowCccDimGroup = rolesToCccDimMap[rowRole], rowNextLevel = rowAxis.gemsByRole[rowRole].length;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1224]++;
      cccDimName = pvc.buildIndexedId(rowCccDimGroup, rowNextLevel);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1227]++;
    this.measureDiscrimName = cccDimName;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1230]++;
  return cccDimName;
}), configureDimensionGroups: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1235]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1238]++;
  this.cccDimList();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1240]++;
  if (this.measureDiscrimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1241]++;
    this.chart.options.dimensions[this.measureDiscrimName] = {isHidden: true};
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1250]++;
  def.type("pentaho.ccc.RowAxis", pentaho.ccc.DiscreteAxis).init((function (chart) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1254]++;
  this.base(chart, "row");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1256]++;
  this._ensureRole(this.defaultRole);
})).add({defaultRole: "rows"});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1264]++;
  def.type("pentaho.ccc.MeasureAxis", pentaho.ccc.Axis).init((function (chart) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1268]++;
  this.base(chart, "measure");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1270]++;
  this._ensureRole(this.defaultRole);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1272]++;
  this.genericMeasuresCount = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1273]++;
  this.genericMeasureRoles = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1274]++;
  def.eachOwn(this.gemsByRole, (function (gems, role) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1275]++;
  if ((role.indexOf("measures") === 0)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1276]++;
    this.genericMeasureRoles[role] = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1277]++;
    this.genericMeasuresCount += gems.length;
  }
}), this);
})).add({defaultRole: "measures", _getGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1292]++;
  var gems = this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1294]++;
  var filtered = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1296]++;
  gems.forEach((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1297]++;
  var meaId = gem.id, measureInfo;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1300]++;
  if ((meaId && (measureInfo = def.getOwn(this.chart._measuresInfo, meaId)))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1301]++;
    gem.role = measureInfo.role;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1303]++;
    filtered.push(gem);
  }
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1307]++;
  return filtered;
}), cccDimList: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1311]++;
  if ((! this._cccDimList)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1312]++;
    this._cccDimList = this.chart._measureRolesInfoList.map((function (role) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1314]++;
  return role.cccDimName;
}));
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1317]++;
  return this._cccDimList;
}), _buildGemHtmlTooltip: (function (lines, complex, context, gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1327]++;
  var colAxis = this.chart.axes.column;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1328]++;
  if ((colAxis.measureDiscrimName && def.hasOwn(this.genericMeasureRoles, gem.role) && (gem.id !== complex.atoms[colAxis.measureDiscrimName].value))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1331]++;
    return;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1335]++;
  var cccDimName = this.chart._measureRolesInfo[gem.role].cccDimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1336]++;
  if (cccDimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1337]++;
    var atom = complex.atoms[cccDimName];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1338]++;
    if (((! atom.dimension.type.isHidden) && ((! complex.isTrend) || (atom.value != null)))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1340]++;
      var tooltipLine = def.html.escape(gem.label);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1343]++;
      if ((this.chart._noRoleInTooltipMeasureRoles[gem.role] !== true)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1344]++;
        tooltipLine += (" (" + def.html.escape(gem.role) + ")");
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1347]++;
      tooltipLine += (": " + def.html.escape(atom.label));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1349]++;
      if (((! this.chart._noPercentInTootltipForPercentGems) || (gem.measureType !== "PCTOF"))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1350]++;
        var valuePct = this._getAtomPercent(atom, context);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1351]++;
        if ((valuePct != null)) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1352]++;
          tooltipLine += (" (" + def.html.escape(("" + valuePct)) + "%)");
        }
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1356]++;
      var suffix;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1357]++;
      if (complex.isInterpolated) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1358]++;
        suffix = this.chart._message(("chartTooltipGemInterp_" + complex.interpolation));
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1359]++;
        if (complex.isTrend) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1362]++;
          suffix = ("(" + this.chart.options.trendLabel + ")");
        }
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1365]++;
      if (suffix) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1366]++;
        tooltipLine += (" " + suffix);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1369]++;
      lines.push(tooltipLine);
    }
  }
}), _getAtomPercent: (function (atom, context) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1375]++;
  if (context) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1376]++;
    var cccChart = context.chart, data = cccChart.data, playingPercentMap = data.type.getPlayingPercentVisualRoleDimensionMap(), cccDimName = atom.dimension.name;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1382]++;
    if (playingPercentMap.has(cccDimName)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1383]++;
      var group = context.scene.group, pct;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1385]++;
      if (group) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1386]++;
        pct = group.dimensions(cccDimName).percentOverParent({visible: true});
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1389]++;
        pct = data.dimensions(cccDimName).percent(atom.value);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1392]++;
      return cccChart.options.valueFormat.call(null, (Math.round((pct * 10000)) / 100));
    }
  }
}), fillCellSelection: (function (selection, complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1402]++;
  selection.value = def.query(this.gems).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1404]++;
  var cccDimName = this.chart._measureRolesInfo[gem.role].cccDimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1405]++;
  if (cccDimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1406]++;
    return complex.atoms[cccDimName].label;
  }
}), this).where(def.truthy).array().join(" ~ ");
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1418]++;
  var installCccEventsShield;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1419]++;
  if ((pv.renderer() === "vml")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1431]++;
    var _cccEventsShieldEvents = ["mouseover", "mouseout", "mousemove"];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1433]++;
    installCccEventsShield = (function (element) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1434]++;
  if ((! element._cccEventsShield)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1435]++;
    element._cccEventsShield = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1437]++;
    _cccEventsShieldEvents.forEach((function (evName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1438]++;
  addListener(element, evName, stopEventPropagation);
}));
  }
});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1443]++;
    var stopEventPropagation = (function (ev) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1444]++;
  if ((! ev)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1444]++;
    ev = window.event;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1445]++;
  if (ev.stopPropagation) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1446]++;
    ev.stopPropagation();
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1448]++;
    ev.cancelBubble = true;
  }
});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1452]++;
    var addListener = (function (elem, type, listener) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1453]++;
  (elem.addEventListener? elem.addEventListener(type, listener, false): elem.attachEvent(("on" + type), listener));
});
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1461]++;
  var ruleStrokeStyle = "#808285";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1462]++;
  var lineStrokeStyle = "#D1D3D4";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1464]++;
  function legendShapeColorProp(scene) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1465]++;
    var color = scene.color;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1466]++;
    return (scene.isOn()? color: pvc.toGrayScale(color));
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1469]++;
  var baseOptions = {compatVersion: 2, margins: 0, paddings: 10, plotFrameVisible: false, multiChartMax: 50, legend: true, legendPosition: "right", legendSizeMax: "60%", legendPaddings: 10, legendItemPadding: {left: 1, right: 1, top: 2, bottom: 2}, legendClickMode: "toggleSelected", color2AxisLegendClickMode: "toggleSelected", color3AxisLegendClickMode: "toggleSelected", axisSizeMax: "50%", axisTitleSizeMax: "20%", orthoAxisGrid: true, continuousAxisLabelSpacingMin: 1.1000000000000001, titlePosition: "top", interactive: true, animate: false, tooltipEnabled: true, clickable: true, selectable: true, hoverable: false, ctrlSelectMode: false, clearSelectionMode: "manual", valuesVisible: false, ignoreNulls: false, groupedLabelSep: "~", crosstabMode: true, isMultiValued: true, seriesInRows: false, dataOptions: {measuresInColumns: true}, extensionPoints: {axisRule_strokeStyle: ruleStrokeStyle, axisTicks_strokeStyle: lineStrokeStyle, dot_lineWidth: 1.5, legendArea_lineWidth: 1, legendArea_strokeStyle: "#c0c0c0", legendLabel_textDecoration: null, legendDot_fillStyle: legendShapeColorProp, legendDot_strokeStyle: legendShapeColorProp, legend2Dot_fillStyle: legendShapeColorProp, legend2Dot_strokeStyle: legendShapeColorProp}, tooltip: {delayIn: 200, delayOut: 80, offset: 2, html: true, gravity: "nw", fade: false, followMouse: true, useCorners: true, arrowVisible: false, opacity: 1}};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1552]++;
  var mixinDiscreteXOptions = {extensionPoints: {xAxisLabel_textAngle: ((- Math.PI) / 4), xAxisLabel_textAlign: "right", xAxisLabel_textBaseline: "top"}};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1562]++;
  def.type("pentaho.ccc.Chart").init((function (element) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1565]++;
  this._element = element;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1566]++;
  this._elementName = element.id;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1568]++;
  if (installCccEventsShield) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1568]++;
    installCccEventsShield(element);
  }
})).add({_options: baseOptions, _rolesToCccDimensionsMap: {"columns": "series", "rows": "category", "multi": "multiChart", "measures": "value"}, _keyAxesIds: ["column", "row"], _axesIds: ["column", "row", "measure"], _axesCreateOrderIds: ["row", "measure", "column"], _cccVirtualItemAxesLayout: ["column", "row", "measure"], _drillAxesIds: ["column", "row"], _linkAxesIds: ["column", "row"], _noRoleInTooltipMeasureRoles: {"measures": true}, _noPercentInTootltipForPercentGems: false, _multiRole: "multi", _discreteColorRole: "columns", draw: (function (dataTable, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1630]++;
  this._metadata = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1631]++;
  this._resultset = null;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1634]++;
  this._dataTable = dataTable;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1656]++;
  this._initOptions(vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1658]++;
  this._processDataTable();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1660]++;
  this._initAxes();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1664]++;
  var rowDepth = this.axes.row.depth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1665]++;
  this.options.dataOptions.categoriesCount = rowDepth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1667]++;
  this._hasMultiChartColumns = (this.axes.row.hasMulti || this.axes.column.hasMulti);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1671]++;
  this._readUserOptions(this.options, vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1675]++;
  this._readData();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1677]++;
  this._configure();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1679]++;
  this._prepareLayout(this.options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1681]++;
  this._render();
}), resize: (function (width, height) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1687]++;
  if ((this._lastResizeTimeout != null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1688]++;
    clearTimeout(this._lastResizeTimeout);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1691]++;
  this._lastResizeTimeout = setTimeout((function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1692]++;
  this._lastResizeTimeout = null;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1694]++;
  this._doResize(width, height);
}).bind(this), 50);
}), _doResize: (function (width, height) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1700]++;
  if (this._chart) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1701]++;
    var options = this._chart.options;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1703]++;
    def.set(options, "width", width, "height", height);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1705]++;
    this._prepareLayout(options);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1707]++;
    this._chart.render(true, true, false);
  }
}), setHighlights: (function (selections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1713]++;
  this._selections = selections;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1715]++;
  if ((! this._ownChange)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1716]++;
    if (((! selections) || (selections.length == 0))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1718]++;
      this._ownChange = true;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1719]++;
      try {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1720]++;
        this._chart.clearSelections();
      }
      finally {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1722]++;
        this._ownChange = false;
      }
    }
  }
}), getOutputParameters: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1731]++;
  var params = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1732]++;
  if ((this._cccClass == "pvc.PieChart")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1733]++;
    params.push([this._dataTable.getColumnId(0), true, this._dataTable.getColumnId(0)]);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1739]++;
    for (var j = 0; (j < this._dataTable.getNumberOfColumns()); (j++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1740]++;
      params.push([this._dataTable.getColumnId(j), true, this._dataTable.getColumnId(j)]);
}
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1748]++;
  return params;
}), _initOptions: (function (vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1755]++;
  vizOptions = (this._vizOptions = $.extend({}, vizOptions));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1757]++;
  this._vizHelper = cv.pentahoVisualizationHelpers[vizOptions.customChartType];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1759]++;
  this._hasContentLink = (this._vizHelper.isInteractionEnabled() && this._vizHelper.hasContentLink());
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1763]++;
  this._selections = vizOptions.selections;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1766]++;
  var options = (this.options = def.create(this._options));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1767]++;
  def.set(options, "canvas", this._elementName, "height", (vizOptions.height || 400), "width", (vizOptions.width || 400), "dimensionGroups", {}, "dimensions", {}, "visualRoles", {}, "readers", [], "calculations", []);
}), _message: (function (msgId, args) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1779]++;
  return this._vizHelper.message(msgId, args);
}), _setNullInterpolationMode: (function (options, value) {
}), _readUserOptions: (function (options, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1785]++;
  var extPoints = options.extensionPoints;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1787]++;
  var value = vizOptions.backgroundFill;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1788]++;
  if ((value && (value !== "NONE"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1789]++;
    var fillStyle;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1790]++;
    if ((value === "GRADIENT")) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1791]++;
      if (this._hasMultiChartColumns) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1793]++;
        var bgColor = pv.color(vizOptions.backgroundColor).rgb();
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1794]++;
        bgColor = pv.rgb((~ (~ ((255 + bgColor.r) / 2))), (~ (~ ((255 + bgColor.g) / 2))), (~ (~ ((255 + bgColor.b) / 2))), bgColor.a);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1800]++;
        fillStyle = bgColor;
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1802]++;
        fillStyle = ("linear-gradient(to top, " + vizOptions.backgroundColor + ", " + vizOptions.backgroundColorEnd + ")");
      }
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1807]++;
      fillStyle = vizOptions.backgroundColor;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1810]++;
    extPoints.base_fillStyle = fillStyle;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1813]++;
  value = vizOptions.labelColor;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1814]++;
  if ((value !== undefined)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1815]++;
    extPoints.axisLabel_textStyle = (extPoints.axisTitleLabel_textStyle = value);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1819]++;
  value = (("" + vizOptions.showLegend) === "true");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1820]++;
  options.legend = value;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1821]++;
  if (value) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1822]++;
    value = vizOptions.legendColor;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1823]++;
    if ((value !== undefined)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1824]++;
      extPoints.legendLabel_textStyle = value;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1830]++;
    value = vizOptions.legendBackgroundColor;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1831]++;
    if ((value && (value.toLowerCase() !== "#ffffff"))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1832]++;
      extPoints.legendArea_fillStyle = value;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1835]++;
    value = vizOptions.legendPosition;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1836]++;
    if (value) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1837]++;
      options.legendPosition = value.toLowerCase();
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1841]++;
    if (vizOptions.legendSize) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1842]++;
      options.legendFont = readFont(vizOptions, "legend");
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1846]++;
  value = vizOptions.lineWidth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1847]++;
  if ((value !== undefined)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1848]++;
    extPoints.line_lineWidth = (+ value);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1849]++;
    var radius = (3 + (6 * ((+ value) / 8)));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1850]++;
    extPoints.dot_shapeSize = (radius * radius);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1852]++;
    extPoints.plot2Line_lineWidth = extPoints.line_lineWidth;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1853]++;
    extPoints.plot2Dot_shapeSize = extPoints.dot_shapeSize;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1856]++;
  value = vizOptions.maxChartsPerRow;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1857]++;
  if ((value !== undefined)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1858]++;
    options.multiChartColumnsMax = (+ value);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1861]++;
  value = vizOptions.emptyCellMode;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1862]++;
  if (value) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1863]++;
    switch (value) {
    case "GAP":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1864]++;
      value = "none";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1864]++;
      break;
    case "ZERO":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1865]++;
      value = "zero";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1865]++;
      break;
    case "LINEAR":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1866]++;
      value = "linear";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1866]++;
      break;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1869]++;
    this._setNullInterpolationMode(options, value);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1872]++;
  value = vizOptions.multiChartRangeScope;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1873]++;
  if (value) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1874]++;
    switch (value) {
    case "GLOBAL":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1875]++;
      value = "global";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1875]++;
      break;
    case "CELL":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1876]++;
      value = "cell";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1876]++;
      break;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1879]++;
    options.numericAxisDomainScope = value;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1883]++;
  if (vizOptions.labelSize) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1884]++;
    var labelFont = readFont(vizOptions, "label");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1886]++;
    options.axisTitleFont = (options.axisFont = labelFont);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1889]++;
    if (this._hasMultiChartColumns) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1890]++;
      var labelFontSize = readFontSize(vizOptions, "label");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1891]++;
      var labelFontFamily = readFontFamily(vizOptions, "label");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1892]++;
      options.titleFont = (labelFontSize + 2 + "px " + labelFontFamily);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1896]++;
  var sizeByNegativesMode = vizOptions.sizeByNegativesMode;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1897]++;
  options.sizeAxisUseAbs = (sizeByNegativesMode === "USE_ABS");
}), _processDataTable: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1918]++;
  var dataTable = this._dataTable;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1919]++;
  var dtColCount = dataTable.getNumberOfColumns();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1920]++;
  var roleToCccDimMap = this._rolesToCccDimensionsMap;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1921]++;
  var colGroups = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1922]++;
  var colGroupsByColValues = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1930]++;
  var measureRolesInfo = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1931]++;
  var measureRolesInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1936]++;
  var measuresInfo = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1937]++;
  var measuresInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1939]++;
  var rowsInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1940]++;
  var columnsInfoList = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1942]++;
  var tc = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1943]++;
  var colId, splitColId;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1948]++;
  while ((tc < dtColCount)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1949]++;
    colId = dataTable.getColumnId(tc);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1950]++;
    splitColId = splitColGroupAndMeasure(colId);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1952]++;
    if ((! processRowColumn.apply(this, splitColId))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1954]++;
      break;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1958]++;
    (tc++);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1962]++;
  if ((tc < dtColCount)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1969]++;
    processColumnsInfo.call(this, splitColId[0]);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1974]++;
    while (true) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1975]++;
      processMeasureColumn.apply(this, splitColId);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1978]++;
      if (((++tc) >= dtColCount)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1979]++;
        break;
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1982]++;
      colId = dataTable.getColumnId(tc);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1983]++;
      splitColId = splitColGroupAndMeasure(colId);
}
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1988]++;
  measureRolesInfoList.sort((function (infoa, infob) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1989]++;
  return (def.compare(infoa.groupIndex, infob.groupIndex) || def.compare(infoa.index, infob.index));
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1995]++;
  measureRolesInfoList.forEach((function (roleInfo, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][1996]++;
  roleInfo.groupIndex = index;
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2000]++;
  this._measureRolesInfo = measureRolesInfo;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2001]++;
  this._measureRolesInfoList = measureRolesInfoList;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2002]++;
  this._colGroups = colGroups;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2003]++;
  this._measuresInfo = measuresInfo;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2005]++;
  this._axesGemsInfo = {"measure": measuresInfoList, "row": rowsInfoList, "column": columnsInfoList};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2014]++;
  function processRowColumn(colGroupValues, meaId) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2015]++;
    if (/\[MEASURE:(\d+)\]$/.test(meaId)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2017]++;
      return false;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2027]++;
    var rolesAndLevels = getColumnRolesAndLevels(dataTable, tc);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2030]++;
    rowsInfoList.push({id: colId, formula: colId, label: dataTable.getColumnLabel(tc), axis: "row", role: (rolesAndLevels? rolesAndLevels[0].id: "undefined"), index: rowsInfoList.length});
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2039]++;
    return true;
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2044]++;
  function processColumnsInfo(colGroupValues) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2045]++;
    if (colGroupValues) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2046]++;
      var rolesAndLevels = getColumnRolesAndLevels(dataTable, tc);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2047]++;
      var colValues = colGroupValues.split("~");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2049]++;
      colValues.forEach((function (colValue, index) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2050]++;
  var roleAndLevel = rolesAndLevels[index];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2051]++;
  columnsInfoList.push({id: roleAndLevel.level, formula: roleAndLevel.level, label: undefined, axis: "column", role: roleAndLevel.id, index: index});
}));
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2063]++;
  function processMeasureColumn(colGroupValues, id) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2065]++;
    var meaInfo = def.getOwn(measuresInfo, id);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2068]++;
    if ((! meaInfo)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2070]++;
      var roleAndLevel = getColumnRolesAndLevels(dataTable, tc).pop();
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2074]++;
      meaInfo = {id: id, formula: undefined, label: splitColGroupAndMeasure(dataTable.getColumnLabel(tc))[1], axis: "measure", role: roleAndLevel.id, index: measuresInfoList.length, isUnmapped: (roleAndLevel.id === "undefined")};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2084]++;
      measuresInfo[id] = meaInfo;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2085]++;
      measuresInfoList.push(meaInfo);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2089]++;
    var colGroup = def.getOwn(colGroupsByColValues, colGroupValues);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2090]++;
    if ((! colGroup)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2091]++;
      colGroup = {index: tc, encValues: colGroupValues, values: (colGroupValues? colGroupValues.split("~"): []), measureIds: [id]};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2098]++;
      colGroupsByColValues[colGroupValues] = colGroup;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2099]++;
      colGroups.push(colGroup);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2101]++;
      colGroup.measureIds.push(id);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2105]++;
    var currMeaIndex = (tc - colGroup.index);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2106]++;
    var meaRoleInfo = def.getOwn(measureRolesInfo, meaInfo.role);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2107]++;
    if ((! meaRoleInfo)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2108]++;
      meaRoleInfo = {id: roleAndLevel.id, cccDimName: (meaInfo.isUnmapped? null: (roleToCccDimMap[roleAndLevel.id] || def.assert("Must map to CCC all measure roles that the data table contains."))), groupIndex: currMeaIndex, index: tc};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2118]++;
      measureRolesInfo[meaInfo.role] = meaRoleInfo;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2119]++;
      measureRolesInfoList.push(meaRoleInfo);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2121]++;
      if ((currMeaIndex > meaRoleInfo.groupIndex)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2122]++;
        meaRoleInfo.groupIndex = currMeaIndex;
      }
    }
}
}), _initAxes: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2129]++;
  this.gemsMap = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2132]++;
  this.axisByRole = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2135]++;
  this.axes = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2137]++;
  this._gemCountColumnReportAxis = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2138]++;
  this._measureDiscrimGem = null;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2141]++;
  this._axesCreateOrderIds.forEach(createAxis, this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2143]++;
  var virtualItemIndex = 0;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2144]++;
  var cccDimNamesSet = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2145]++;
  this._cccVirtualItemAxesLayout.forEach((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2146]++;
  virtualItemIndex = this.axes[axisId].configure(virtualItemIndex, cccDimNamesSet);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2150]++;
  function createAxis(axisId) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2152]++;
    var axis = pentaho.ccc.Axis.create(this, axisId);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2154]++;
    axis.gems.forEach(indexGem, this);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2156]++;
    this.axes[axisId] = axis;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2158]++;
    var boundRoleList = axis.boundRolesIdList;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2159]++;
    if (boundRoleList) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2160]++;
      boundRoleList.forEach((function (roleId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2161]++;
  ((! def.hasOwn(this.axisByRole, roleId)) || def.assert("A role cannot be in more than one axis"));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2162]++;
  this.axisByRole[roleId] = axis;
}), this);
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2168]++;
  function indexGem(gem) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2169]++;
    var form = gem.formula, id = gem.id;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2176]++;
    if (form) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2177]++;
      this.gemsMap[form] = gem;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2180]++;
    if ((id && (form !== id))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2181]++;
      this.gemsMap[id] = gem;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2184]++;
    if ((gem.reportAxis === "column")) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2185]++;
      (this._gemCountColumnReportAxis++);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2188]++;
    if (gem.isMeasureDiscrim) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2189]++;
      this._measureDiscrimGem = gem;
    }
}
}), _readData: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2194]++;
  this._readDataCrosstab();
}), _readDataCrosstab: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2203]++;
  var dataTable = this._dataTable, colCount = dataTable.getNumberOfColumns(), rowCount = dataTable.getNumberOfRows();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2208]++;
  for (var tc = 0; (tc < colCount); (tc++)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2209]++;
    this._addCdaMetadata(dataTable.getColumnId(tc), dataTable.getColumnLabel(tc), writeCccColumnDataType(dataTable.getColumnType(tc)));
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2215]++;
  var table = (this._resultset = new Array(rowCount));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2216]++;
  for (var tr = 0; (tr < rowCount); (tr++)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2217]++;
    var row = new Array(colCount);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2219]++;
    for (tc = 0; (tc < colCount); (tc++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2220]++;
      row[tc] = this._getTableCell(tr, tc);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2223]++;
    table[tr] = row;
}
}), _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2228]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2229]++;
  var vizOptions = this._vizOptions;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2234]++;
  vizOptions.controller.domNode.style.overflow = "hidden";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2236]++;
  var colorScaleKind = this._getColorScaleKind();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2237]++;
  if (colorScaleKind) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2238]++;
    this._configureColor(colorScaleKind);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2241]++;
  if ((this.options.legend = this._showLegend())) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2242]++;
    this._configureLegend();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2245]++;
  if (this._hasMultiChartColumns) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2246]++;
    this._configureMultiChart();
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2249]++;
  this._configureTrends();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2251]++;
  options.axisFont = defaultFont(options.axisFont, 12);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2252]++;
  options.axisTitleFont = defaultFont(options.axisTitleFont, 12);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2254]++;
  if ((! this._vizHelper.isInteractionEnabled())) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2255]++;
    options.interactive = false;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2257]++;
    if (options.tooltipEnabled) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2258]++;
      this._configureTooltip();
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2261]++;
    if ((options.selectable = this._canSelect())) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2262]++;
      this._configureSelection();
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2265]++;
    this._configureDoubleClick();
  }
}), _getColorScaleKind: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2269]++;
  return "discrete";
}), _configureColor: (function (colorScaleKind) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2272]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2273]++;
  var vizOptions = this._vizOptions;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2275]++;
  switch (colorScaleKind) {
  case "discrete":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2277]++;
    options.colors = this._getDiscreteColorScale();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2278]++;
    break;
  case "continuous":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2281]++;
    options.colorScaleType = vizOptions.colorScaleType;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2282]++;
    options.colors = vizOptions.colors;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2283]++;
    break;
  }
}), _getDiscreteColorScale: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2288]++;
  var memberPalette = this._vizOptions.memberPalette;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2289]++;
  var colorScale = (memberPalette && this._getDiscreteColorScaleCore(memberPalette));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2290]++;
  return (colorScale || this._getDefaultDiscreteColorScale());
}), _getDefaultDiscreteColorScale: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2293]++;
  return this._vizOptions.palette.colors.slice();
}), _getDiscreteColorScaleCore: (function (memberPalette) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2296]++;
  var colorRoleId = this._discreteColorRole;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2297]++;
  if (colorRoleId) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2302]++;
    var colorAxis = this.axisByRole[colorRoleId];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2303]++;
    var colorGems = (colorAxis? colorAxis.gemsByRole[colorRoleId].filter((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2304]++;
  return (! gem.isMeasureDiscrim);
})): []);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2307]++;
    var C = colorGems.length;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2308]++;
    var M;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2310]++;
    if ((this._cccClass == "pvc.PieChart")) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2315]++;
      M = 0;
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2317]++;
      M = this.axes.measure.genericMeasuresCount;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2320]++;
    var keyIncludesDiscrim = (M > 1);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2321]++;
    if (((C > 0) || (M > 0))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2322]++;
      var colorMap;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2323]++;
      var lastIndex;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2325]++;
      if ((M <= 1)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2326]++;
        if ((C > 0)) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2328]++;
          colorMap = memberPalette[colorGems[(C - 1)].formula];
        }
        else {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2331]++;
          colorMap = memberPalette["[Measures].[MeasuresLevel]"];
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2332]++;
          var c = (colorMap && colorMap[this.axes.measure.gems[0].id]);
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2333]++;
          return (c? pv.colors([colorFromAnalyzer(c)]): null);
        }
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2338]++;
        lastIndex = 0;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2339]++;
        colorMap = memberPalette["[Measures].[MeasuresLevel]"];
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2343]++;
      if (colorMap) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2344]++;
        colorMap = def.query(def.ownKeys(colorMap)).object({value: (function (k) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2347]++;
  return colorFromAnalyzer(colorMap[k]);
})});
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2351]++;
        var defaultScale = pv.colors(this._getDefaultDiscreteColorScale());
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2352]++;
        return (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2353]++;
  var scale = (function (compKey) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2354]++;
  if (compKey) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2355]++;
    var comps = compKey.split(/\s*,\s*/);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2356]++;
    var key = comps[(comps.length - 1)];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2357]++;
    return (colorMap[key] || defaultScale(key));
  }
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2361]++;
  def.copy(scale, defaultScale);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2362]++;
  return scale;
});
      }
    }
  }
}), _configureTrends: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2370]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2371]++;
  var vizOptions = this._vizOptions;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2373]++;
  var trendType = ((this._supportsTrends? vizOptions.trendType: null) || "none");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2374]++;
  switch (trendType) {
  case "none":
  case "linear":
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2377]++;
    break;
  default:
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2379]++;
    trendType = "none";
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2382]++;
  options.trendType = trendType;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2383]++;
  if ((trendType !== "none")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2384]++;
    var trendName = vizOptions.trendName;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2385]++;
    if ((! trendName)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2386]++;
      trendName = this._message(("dropZoneLabels_TREND_NAME_" + trendType.toUpperCase()));
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2389]++;
    options.trendLabel = trendName;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2391]++;
    var value = vizOptions.trendLineWidth;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2392]++;
    if ((value !== undefined)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2393]++;
      var extPoints = options.extensionPoints;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2395]++;
      extPoints.trendLine_lineWidth = (+ value);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2396]++;
      var radius = (3 + (6 * ((+ value) / 8)));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2397]++;
      extPoints.trendDot_shapeSize = (radius * radius);
    }
  }
}), _configureMultiChart: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2403]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2406]++;
  var containerStyle = this._vizOptions.controller.domNode.style;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2407]++;
  containerStyle.overflowX = "hidden";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2408]++;
  containerStyle.overflowY = "auto";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2413]++;
  var titleFont = defaultFont(options.titleFont, 12);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2414]++;
  if ((titleFont && (! /black|(\bbold\b)/i.test(titleFont)))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2415]++;
    titleFont = ("bold " + titleFont);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2418]++;
  options.smallTitleFont = titleFont;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2420]++;
  var multiChartOverflow = this._vizOptions.multiChartOverflow;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2421]++;
  if (multiChartOverflow) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2422]++;
    options.multiChartOverflow = multiChartOverflow.toLowerCase();
  }
}), _configureTooltip: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2427]++;
  var me = this;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2428]++;
  this.options.tooltipFormat = (function (scene) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2429]++;
  return me._getTooltipText(scene.datum, this);
});
}), _canSelect: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2434]++;
  if ((! this.options.selectable)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2435]++;
    return false;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2439]++;
  if ((this._gemCountColumnReportAxis >= 2)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2440]++;
    return false;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2443]++;
  return true;
}), _configureSelection: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2447]++;
  var me = this;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2448]++;
  this.options.userSelectionAction = (function (cccSelections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2449]++;
  return me._onUserSelection(cccSelections);
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2451]++;
  this.options.selectionChangedAction = (function (cccSelections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2452]++;
  me._onSelectionChanged(cccSelections);
});
}), _configureDoubleClick: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2457]++;
  var me = this;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2458]++;
  this.options.doubleClickAction = (function (scene) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2459]++;
  me._onDoubleClick(scene.datum);
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2462]++;
  this.options.axisDoubleClickAction = (function (scene) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2463]++;
  var group = scene.group;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2464]++;
  if (group) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2465]++;
    return me._onDoubleClick(group);
  }
});
}), _showLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2471]++;
  if ((! this.options.legend)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2472]++;
    return false;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2475]++;
  if ((this.axes.measure.genericMeasuresCount > 1)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2476]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2479]++;
  var colAxis = this.axes.column, cccColDimGroup = this._rolesToCccDimensionsMap[colAxis.defaultRole];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2482]++;
  if (((! cccColDimGroup) || (colAxis.realDepth > 0))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2483]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2486]++;
  return false;
}), _configureLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2490]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2492]++;
  options.legendFont = defaultFont(options.legendFont, 10);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2494]++;
  var legendPosition = options.legendPosition, isTopOrBottom = ((legendPosition === "top") || (legendPosition === "bottom"));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2497]++;
  if ((this._hasMultiChartColumns && (! isTopOrBottom))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2498]++;
    options.legendAlignTo = "page-middle";
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2499]++;
    options.legendKeepInBounds = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2505]++;
    var legendMargins = options.legendMargins;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2506]++;
    if (legendMargins) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2507]++;
      if (((typeof legendMargins) !== "object")) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2508]++;
        legendMargins = (options.legendMargins = {all: legendMargins});
      }
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2511]++;
      legendMargins = (options.legendMargins = {});
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2512]++;
      var oppositeSide = pvc.BasePanel.oppositeAnchor[legendPosition];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2513]++;
      legendMargins[oppositeSide] = 5;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2516]++;
    legendMargins.top = 20;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2519]++;
  if ((! ("legendAlign" in options))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2521]++;
    if (isTopOrBottom) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2522]++;
      options.legendAlign = "center";
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2524]++;
      options.legendAlign = "middle";
    }
  }
}), _prepareLayout: (function (options) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2531]++;
  if ((this._hasMultiChartColumns && (pv.renderer() !== "batik"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2533]++;
    options.width -= 17;
  }
}), _render: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2538]++;
  while (this._element.firstChild) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2539]++;
    this._element.removeChild(this._element.firstChild);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2542]++;
  var chartClass = def.getPath({pvc: pvc}, this._cccClass);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2544]++;
  this._chart = new chartClass(this.options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2545]++;
  this._chart.setData({metadata: this._metadata, resultset: this._resultset});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2550]++;
  this._chart.render();
}), _getTooltipText: (function (complex, context) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2556]++;
  var tooltipLines = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2558]++;
  this._axesIds.forEach((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2559]++;
  this.axes[axisId].buildHtmlTooltip(tooltipLines, complex, context);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2562]++;
  if ((! complex.isVirtual)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2563]++;
    if (this._hasContentLink) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2565]++;
      msg = this._message("chartTooltipFooterContentlink");
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2567]++;
      tooltipLines.push(msg);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2570]++;
      var hyperlinkInfo = this._getHyperlinkInfo(complex);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2571]++;
      var msg;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2572]++;
      if (hyperlinkInfo) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2573]++;
        msg = this._message("chartTooltipFooterHyperlink", [def.html.escape((hyperlinkInfo.gem.linkLabel || this._message("chartTooltipHyperlinkDefaultTitle")))]);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2578]++;
        tooltipLines.push(msg);
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2582]++;
        var drillDownInfo = this._getDrillDownInfo(complex);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2583]++;
        if (drillDownInfo) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2584]++;
          msg = this._message("chartTooltipFooterDrillDown", [def.html.escape(this._vizHelper.getFormulaLabel(drillDownInfo.drillChild))]);
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2589]++;
          tooltipLines.push(msg);
        }
      }
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2598]++;
  var selections = this._vizOptions.controller.highlights;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2599]++;
  var selectedCount = (selections && selections.length);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2600]++;
  if (selectedCount) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2601]++;
    var msgId = ((selectedCount === 1)? "chartTooltipFooterSelectedSingle": "chartTooltipFooterSelectedMany");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2605]++;
    msg = this._message(msgId, [selectedCount]);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2607]++;
    tooltipLines.push(msg);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2610]++;
  return tooltipLines.join("<br />");
}), _onUserSelection: (function (selectingDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2616]++;
  return this._processSelection(selectingDatums);
}), _getSelectionKey: (function (selection) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2620]++;
  var key = selection.__cccKey;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2621]++;
  if ((! key)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2622]++;
    var keys = [selection.type];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2624]++;
    var ap = def.array.append;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2625]++;
    if (selection.columnId) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2626]++;
      ap(keys, selection.columnId);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2627]++;
      ap(keys, selection.columnItem);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2630]++;
    if (selection.rowId) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2631]++;
      ap(keys, selection.rowId);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2632]++;
      ap(keys, selection.rowItem);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2635]++;
    key = (selection.__cccKey = keys.join("||"));
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2638]++;
  return key;
}), _doesSharedSeriesSelection: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2642]++;
  return (this._gemCountColumnReportAxis === 1);
}), _onSelectionChanged: (function (selectedDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2647]++;
  if ((! this.options.selectable)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2648]++;
    return;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2652]++;
  var selectionExcludesMulti = this._selectionExcludesMultiGems();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2654]++;
  var selections = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2655]++;
  var selectionsByKey = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2657]++;
  if (this._doesSharedSeriesSelection()) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2658]++;
    selectedDatums.forEach((function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2659]++;
  if ((! datum.isVirtual)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2660]++;
    var selection = {type: "column"};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2662]++;
    this.axes.column.fillCellSelection(selection, datum, selectionExcludesMulti);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2670]++;
    var key = this._getSelectionKey(selection);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2672]++;
    var existingSelection = selectionsByKey[key];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2673]++;
    if ((! existingSelection)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2674]++;
      selection.__cccDatums = [datum];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2676]++;
      selectionsByKey[key] = selection;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2677]++;
      selections.push(selection);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2679]++;
      existingSelection.__cccDatums.push(datum);
    }
  }
}), this);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2686]++;
    selectedDatums.forEach((function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2687]++;
  if ((! datum.isVirtual)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2688]++;
    var selection = this._complexToCellSelection(datum, selectionExcludesMulti);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2692]++;
    var key = this._getSelectionKey(selection);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2693]++;
    var existingSelection = selectionsByKey[key];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2694]++;
    if ((! existingSelection)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2695]++;
      selection.__cccDatums = datum;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2697]++;
      selectionsByKey[key] = selection;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2698]++;
      selections.push(selection);
    }
  }
}), this);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2704]++;
  selections = this._limitSelection(selections);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2712]++;
  this._ownChange = true;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2713]++;
  try {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2715]++;
    pentaho.events.trigger(this, "select", {source: this, selections: selections, selectionMode: "REPLACE"});
  }
  finally {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2721]++;
    this._ownChange = false;
  }
}), _limitSelection: (function (selections) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2727]++;
  var filterSelectionMaxCount = (this._vizOptions["filter.selection.max.count"] || 200);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2728]++;
  var selections2 = selections;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2729]++;
  var L = selections.length;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2730]++;
  var deselectCount = (L - filterSelectionMaxCount);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2731]++;
  if ((deselectCount > 0)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2733]++;
    var deselectDatums = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2734]++;
    selections2 = [];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2736]++;
    for (var i = 0; (i < L); (i++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2737]++;
      var selection = selections[i];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2738]++;
      var keep = true;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2739]++;
      if (deselectCount) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2740]++;
        if (this._previousSelectionKeys) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2741]++;
          var key = this._getSelectionKey(selection);
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2742]++;
          if ((! this._previousSelectionKeys[key])) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2743]++;
            keep = false;
          }
        }
        else {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2745]++;
          if ((i >= filterSelectionMaxCount)) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2746]++;
            keep = false;
          }
        }
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2750]++;
      if (keep) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2751]++;
        selections2.push(selection);
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2753]++;
        var datums = selection.__cccDatums;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2754]++;
        if (datums) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2755]++;
          if (def.array.is(datums)) {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2756]++;
            def.array.append(deselectDatums, datums);
          }
          else {
            _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2758]++;
            deselectDatums.push(datums);
          }
        }
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2761]++;
        (deselectCount--);
      }
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2766]++;
    pvc.data.Data.setSelected(deselectDatums, false);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2769]++;
    this._chart.updateSelections();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2771]++;
    this._vizHelper.showConfirm(["infoExceededMaxSelectionItems", filterSelectionMaxCount], "SELECT_ITEM_LIMIT_REACHED");
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2779]++;
  this._previousSelectionKeys = def.query(selections2).object({name: (function (selection) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2782]++;
  return this._getSelectionKey(selection);
}), value: def.retTrue, context: this});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2787]++;
  return selections2;
}), _selectionExcludesMultiGems: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2801]++;
  return true;
}), _processSelection: (function (selectedDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2846]++;
  var whereSpec;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2847]++;
  var outDatums = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2849]++;
  if (selectedDatums.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2850]++;
    var selectionExcludesMulti = this._selectionExcludesMultiGems();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2855]++;
    var colDimNames = this.axes.column.getSelectionGems(selectionExcludesMulti).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2856]++;
  return gem.cccDimName;
})).array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2859]++;
    var rowDimNames;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2860]++;
    if ((! this._gemCountColumnReportAxis)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2863]++;
      rowDimNames = this.axes.row.getSelectionGems(selectionExcludesMulti).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2864]++;
  return gem.cccDimName;
})).array();
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2868]++;
    if (((! colDimNames.length) && ((! rowDimNames) || (! rowDimNames.length)))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2869]++;
      selectedDatums = [];
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2871]++;
      whereSpec = [];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2873]++;
      selectedDatums.forEach(addDatum);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2875]++;
      this._chart.data.datums(whereSpec, {visible: true}).each((function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2878]++;
  outDatums.push(datum);
}));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2882]++;
      selectedDatums = outDatums;
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2886]++;
  function addDatum(datum) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2887]++;
    if ((! datum.isNull)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2888]++;
      if (datum.isTrend) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2892]++;
        outDatums.push(datum);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2895]++;
      var datumFilter = {};
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2897]++;
      var atoms = datum.atoms;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2899]++;
      if (colDimNames) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2900]++;
        colDimNames.forEach(addDim);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2903]++;
      if (rowDimNames) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2904]++;
        rowDimNames.forEach(addDim);
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2907]++;
      whereSpec.push(datumFilter);
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2910]++;
    function addDim(dimName) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2912]++;
      datumFilter[dimName] = atoms[dimName];
}
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2916]++;
  return selectedDatums;
}), _onDoubleClick: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2923]++;
  if (this._hasContentLink) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2924]++;
    this._followContentlink(complex);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2925]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2929]++;
  var hyperlinkInfo = this._getHyperlinkInfo(complex);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2930]++;
  if (hyperlinkInfo) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2931]++;
    this._followHyperlink(hyperlinkInfo, complex);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2932]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2936]++;
  var drillInfo = this._getDrillDownInfo(complex);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2937]++;
  if (drillInfo) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2938]++;
    this._drillDown(drillInfo, complex);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2939]++;
    return true;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2942]++;
  return false;
}), _followContentlink: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2947]++;
  var actionContext = def.query(this._linkAxesIds).selectMany((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2951]++;
  return this.axes[axisId].selectGemsWithLink("DASHBOARD", complex, false);
}), this).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2955]++;
  return ({clickLevel: true, formula: gem.formula, member: complex.atoms[gem.cccDimName].value});
})).array();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2964]++;
  if (actionContext.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2965]++;
    this._vizHelper.link(actionContext);
  }
}), _hyperlinkTypes: {FILE: 1, URL: 1}, _followHyperlink: (function (hyperlinkInfo, complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2972]++;
  var actionContext = def.query(this._linkAxesIds).selectMany((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2976]++;
  return this.axes[axisId].selectBoundGems(complex);
}), this).select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2979]++;
  return ({clickLevel: (hyperlinkInfo.gem === gem), formula: gem.formula, member: complex.atoms[gem.cccDimName].value});
})).array();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2988]++;
  this._vizHelper.link(actionContext);
}), _drillDown: (function (drillInfo, complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][2998]++;
  var actionContext = [];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3000]++;
  var drillGem = drillInfo.gem;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3001]++;
  var selectionExcludesMulti = this._selectionExcludesMultiGems();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3003]++;
  this._keyAxesIds.forEach(keepAxisHierarchies, this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3007]++;
  this._vizHelper.click(actionContext, true);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3013]++;
  function keepAxisHierarchies(axisId) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3018]++;
    this.axes[axisId].getKeepOrDrillGems(drillGem, selectionExcludesMulti).each((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3022]++;
  if ((gem === drillGem)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3023]++;
    useGem(gem, drillInfo.atom, "KEEP_AND_DRILL");
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3024]++;
    if ((! gem.isMeasureDiscrim)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3025]++;
      var atom = getGemAtom(gem, complex);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3026]++;
      if (atom) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3027]++;
        useGem(gem, atom, "KEEP");
      }
    }
  }
}));
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3034]++;
  function useGem(gem, atom, action) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3035]++;
    actionContext.push({action: action, formula: gem.formula, member: atom.value, caption: def.html.escape(atom.label)});
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3044]++;
  function getGemAtom(gem, complex) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3045]++;
    var cccDimName;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3046]++;
    if ((complex && (cccDimName = gem.cccDimName))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3047]++;
      var atom = complex.atoms[cccDimName];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3048]++;
      if ((atom && (atom.value != null))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3049]++;
        return atom;
      }
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3053]++;
    return null;
}
}), _getHyperlinkInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3059]++;
  return (def.query(this._linkAxesIds).select((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3061]++;
  return this.axes[axisId].getHyperlinkInfo(complex);
}), this).where(def.notNully).first() || null);
}), _getDrillDownInfo: (function (complex) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3071]++;
  return (def.query(this._drillAxesIds).select((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3073]++;
  return this.axes[axisId].getDrillDownInfo(complex);
}), this).where(def.notNully).first() || null);
}), _complexToCellSelection: (function (complex, selectionExcludesMulti) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3103]++;
  var selection = {type: "cell"};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3106]++;
  this._axesIds.forEach((function (axisId) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3107]++;
  this.axes[axisId].fillCellSelection(selection, complex, selectionExcludesMulti);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3110]++;
  return selection;
}), getChildFormula: (function (hForm) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3117]++;
  var hForms = this._getHierarchyFormulas(hForm, false, false);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3121]++;
  if (hForms) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3122]++;
    var index = hForms.indexOf(hForm);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3123]++;
    if ((index >= 0)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3124]++;
      return (hForms[(index + 1)] || null);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3128]++;
  return null;
}), _getHierarchyFormulas: (function (formula, includeHidden, excludeChildren) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3133]++;
  var hForms;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3134]++;
  var key = (formula + "|" + (! (! includeHidden)) + "|" + (! (! excludeChildren)));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3136]++;
  if ((! this._hierarchyFormulaCache)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3137]++;
    this._hierarchyFormulaCache = {};
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3139]++;
    hForms = this._hierarchyFormulaCache[key];
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3142]++;
  if ((! hForms)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3143]++;
    hForms = this._vizHelper.getHierarchyFormulas(formula, includeHidden, excludeChildren);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3144]++;
    this._hierarchyFormulaCache[key] = hForms;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3147]++;
  return hForms;
}), _addCdaMetadata: (function (colName, colLabel, colType) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3151]++;
  this._metadata.push({colIndex: this._metadata.length, colName: colName, colLabel: colLabel, colType: colType});
}), _getTableCell: (function (tr, tc) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3160]++;
  var cell = this._dataTable._getCell(tr, tc);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3161]++;
  if ((! cell)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3162]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3165]++;
  var value = cell.v;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3166]++;
  if (((value == null) || (value === "-"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3167]++;
    return null;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3170]++;
  return ({v: value, f: cell.f});
}), _getTableValue: (function (tr, tc) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3177]++;
  var cell = this._getTableCell(tr, tc);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3178]++;
  return (cell? cell.v: ceff.f);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3182]++;
  def.type("pentaho.ccc.CartesianChart", pentaho.ccc.Chart).add({_options: {orientation: "vertical"}, _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3191]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3193]++;
  this._configureAxesDisplayUnits();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3195]++;
  if (this._showAxisTitle("base")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3196]++;
    this._configureAxisTitle("base", this._getBaseAxisTitle());
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3199]++;
  if (this._showAxisTitle("ortho")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3200]++;
    this._configureAxisTitle("ortho", this._getOrthoAxisTitle());
  }
}), _showAxisTitle: def.fun.constant(true), _getOrthoAxisTitle: def.noop, _getBaseAxisTitle: def.noop, _configureAxisTitle: (function (axisType, title) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3211]++;
  var unitsSuffix = this._cartesianAxesDisplayUnitsText[axisType];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3213]++;
  title = def.string.join(" - ", title, unitsSuffix);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3215]++;
  if (title) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3216]++;
    var options = this.options;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3217]++;
    options[(axisType + "AxisTitle")] = title;
  }
}), _getMeasureRoleTitle: (function (measureRole) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3222]++;
  var title = "";
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3224]++;
  var measureAxis = this.axes.measure;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3225]++;
  var singleAxisGem;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3226]++;
  if ((! measureRole)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3227]++;
    if ((this.axes.measure.genericMeasuresCount === 1)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3228]++;
      singleAxisGem = measureAxis.gemsByRole[measureAxis.defaultRole][0];
    }
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3231]++;
    var roleGems = measureAxis.gemsByRole[measureRole];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3232]++;
    if ((roleGems.length === 1)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3233]++;
      singleAxisGem = roleGems[0];
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3237]++;
  if (singleAxisGem) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3238]++;
    title += singleAxisGem.label;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3241]++;
  return title;
}), _configureAxisRange: (function (primary, axisType) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3245]++;
  var vizOptions = this._vizOptions, suffix = (primary? "": "Secondary");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3248]++;
  if ((vizOptions[("autoRange" + suffix)] !== "true")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3249]++;
    var limit = vizOptions[("valueAxisLowerLimit" + suffix)];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3250]++;
    if ((limit != null)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3251]++;
      this.options[(axisType + "AxisFixedMin")] = limit;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3252]++;
      this.options[(axisType + "AxisOriginIsZero")] = false;
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3255]++;
    limit = vizOptions[("valueAxisUpperLimit" + suffix)];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3256]++;
    if ((limit != null)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3257]++;
      this.options[(axisType + "AxisFixedMax")] = limit;
    }
  }
}), _cartesianAxesDisplayUnitsText: null, _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3265]++;
  this._cartesianAxesDisplayUnitsText = {};
}), _configureAxisDisplayUnits: (function (primary, axisType, allowFractional) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3269]++;
  if ((! allowFractional)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3270]++;
    this.options[(axisType + "AxisTickExponentMin")] = 0;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3273]++;
  var text;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3274]++;
  var displayUnits = this._vizOptions[("displayUnits" + (primary? "": "Secondary"))];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3275]++;
  if ((displayUnits && (displayUnits !== "UNITS_0"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3277]++;
    var match = (displayUnits.match(/^UNITS_(\d+)$/) || def.fail.argumentInvalid("displayUnits"));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3281]++;
    text = this._message(("dlgChartOption_" + displayUnits));
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3284]++;
  this._cartesianAxesDisplayUnitsText[axisType] = (text || "");
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3289]++;
  def.type("pentaho.ccc.CategoricalContinuousChart", pentaho.ccc.CartesianChart).add({_options: {panelSizeRatio: 0.80000000000000004, dataOptions: {measuresInColumns: false}}, _showAxisTitle: (function (type) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3300]++;
  return ((! this._hasMultiChartColumns) || (type === "ortho"));
}), _getOrthoAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3304]++;
  return this._getMeasureRoleTitle();
}), _getBaseAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3308]++;
  return this.axes.row.getAxisLabel();
}), _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3312]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3314]++;
  this._configureAxisRange(true, "ortho");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3316]++;
  if ((this.options.orientation === "vertical")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3317]++;
    def.mixin(this.options, mixinDiscreteXOptions);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3319]++;
    this.options.xAxisPosition = "top";
  }
}), _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3324]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3326]++;
  this._configureAxisDisplayUnits(true, "ortho");
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3332]++;
  def.type("pentaho.ccc.BarChartAbstract", pentaho.ccc.CategoricalContinuousChart).add({_cccClass: "pvc.BarChart", _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3339]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3341]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3342]++;
  if ((options.orientation !== "vertical")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3343]++;
    options.visualRoles.category = {isReversed: true};
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3350]++;
  def.type("pentaho.ccc.BarChart", pentaho.ccc.BarChartAbstract).add({_supportsTrends: true});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3356]++;
  def.type("pentaho.ccc.HorizontalBarChart", pentaho.ccc.BarChartAbstract).add({_options: {orientation: "horizontal"}});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3366]++;
  def.type("pentaho.ccc.StackedBarChart", pentaho.ccc.BarChartAbstract).add({_options: {stacked: true}});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3374]++;
  def.type("pentaho.ccc.HorizontalStackedBarChart", pentaho.ccc.BarChartAbstract).add({_options: {orientation: "horizontal", stacked: true}});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3385]++;
  def.type("pentaho.ccc.NormalizedBarChartAbstract", pentaho.ccc.BarChartAbstract).add({_cccClass: "pvc.NormalizedBarChart", _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3392]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3394]++;
  this.options.orthoAxisTickFormatter = (function (v) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3394]++;
  return (v + "%");
});
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3399]++;
  def.type("pentaho.ccc.NormalizedBarChart", pentaho.ccc.NormalizedBarChartAbstract);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3402]++;
  def.type("pentaho.ccc.HorizontalNormalizedBarChart", pentaho.ccc.NormalizedBarChartAbstract).add({_options: {orientation: "horizontal"}});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3413]++;
  def.type("pentaho.ccc.BarLineChart", pentaho.ccc.BarChartAbstract).add({_rolesToCccDimensionsMap: {"measuresLine": "value"}, _options: {plot2: true, secondAxisIndependentScale: false, secondAxisSeriesIndexes: null}, _noRoleInTooltipMeasureRoles: {"measures": true, "measuresLine": true}, _setNullInterpolationMode: (function (options, value) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3430]++;
  options.plot2NullInterpolationMode = value;
}), _initAxes: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3434]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3436]++;
  (this._measureDiscrimGem || def.assert("Must exist to distinguish measures."));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3438]++;
  var measureDiscrimCccDimName = this._measureDiscrimGem.cccDimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3439]++;
  var meaAxis = this.axes.measure;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3440]++;
  var barGems = meaAxis.gemsByRole[meaAxis.defaultRole];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3441]++;
  var barGemsById = def.query(barGems).uniqueIndex((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3444]++;
  return gem.id;
}));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3447]++;
  this.options.calculations.push({names: "dataPart", calculation: (function (datum, atoms) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3450]++;
  var meaGemId = datum.atoms[measureDiscrimCccDimName].value;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3454]++;
  atoms.dataPart = (def.hasOwn(barGemsById, meaGemId)? "0": "1");
})});
}), _readUserOptions: (function (options, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3461]++;
  this.base(options, vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3463]++;
  var shape = vizOptions.shape;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3464]++;
  if ((shape && (shape === "none"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3465]++;
    options.pointDotsVisible = false;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3467]++;
    options.pointDotsVisible = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3468]++;
    options.extensionPoints.pointDot_shape = shape;
  }
}), _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3474]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3476]++;
  this._configureAxisDisplayUnits(false, "ortho2");
}), _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3481]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3483]++;
  this._configureAxisRange(false, "ortho2");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3485]++;
  this._configureAxisTitle("ortho2", "");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3487]++;
  this.options.plot2OrthoAxis = 2;
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3495]++;
  def.type("pentaho.ccc.WaterfallChart", pentaho.ccc.CategoricalContinuousChart).add({_cccClass: "pvc.WaterfallChart"});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3503]++;
  def.type("pentaho.ccc.LineChart", pentaho.ccc.CategoricalContinuousChart).add({_cccClass: "pvc.LineChart", _supportsTrends: true, _options: {axisOffset: 0, tooltipOffset: 15}, _drillAxesIds: ["row"], _linkAxesIds: ["row", "column"], _readUserOptions: (function (options, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3521]++;
  this.base(options, vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3523]++;
  var shape = vizOptions.shape;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3524]++;
  if ((shape && (shape === "none"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3525]++;
    options.dotsVisible = false;
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3527]++;
    options.dotsVisible = true;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3528]++;
    options.extensionPoints.dot_shape = shape;
  }
}), _setNullInterpolationMode: (function (options, value) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3533]++;
  options.nullInterpolationMode = value;
}), _configureLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3538]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3540]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3541]++;
  var extPoints = options.extensionPoints;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3543]++;
  var dotSize = extPoints.dot_shapeSize;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3544]++;
  if ((dotSize != null)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3545]++;
    var dotRadius = Math.sqrt(dotSize);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3546]++;
    options.legendMarkerSize = Math.max(15, (2 * (dotRadius + 3)));
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3551]++;
  def.type("pentaho.ccc.StackedAreaChart", pentaho.ccc.CategoricalContinuousChart).add({_cccClass: "pvc.StackedAreaChart", _drillAxesIds: ["row"], _linkAxesIds: ["row", "column"], _options: {axisOffset: 0, tooltipOffset: 15}, _setNullInterpolationMode: (function (options, value) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3566]++;
  options.nullInterpolationMode = value;
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3570]++;
  def.type("pentaho.ccc.BoxplotChart", pentaho.ccc.CategoricalContinuousChart).add({_cccClass: "pvc.BoxplotChart", _rolesToCccDimensionsMap: {"columns": null, "multi": "multiChart", "measures": "median", "percentil25": "percentil25", "percentil75": "percentil75", "percentil5": "percentil5", "percentil95": "percentil95"}, _options: {extensionPoints: {boxRuleWhisker_strokeDasharray: "- "}}, _readData: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3594]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3599]++;
  def.set(this.options.dataOptions, "categoriesCount", this.axes.row.gemsByRole.rows.length);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3605]++;
  def.type("pentaho.ccc.HeatGridChart", pentaho.ccc.CartesianChart).add({_cccClass: "pvc.HeatGridChart", _rolesToCccDimensionsMap: {"multi": null, "color": "value", "size": "value2"}, _options: {valuesVisible: false, useShapes: true, shape: "square", xAxisSize: 30, yAxisSize: 50, axisComposite: true, orthoAxisGrid: false, colorScaleType: "linear", colorNormByCategory: false}, _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3635]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3637]++;
  this.options.shape = this._vizOptions.shape;
}), _getColorScaleKind: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3640]++;
  return "continuous";
}), _prepareLayout: (function (options) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3644]++;
  this.base(options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3646]++;
  var measureCount = this.axes.measure.depth, catsDepth = this.axes.row.depth, sersDepth = this.axes.column.depth, catsBreadth = Math.max(1, (this._dataTable.getNumberOfRows() - 1)), sersBreadth = (this._dataTable.getNumberOfColumns() - catsDepth);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3652]++;
  if ((measureCount > 0)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3653]++;
    sersBreadth /= measureCount;
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3656]++;
  var width = options.width, height = options.height, currRatio = (width / height), xyChartRatio = (catsBreadth / sersBreadth);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3662]++;
  var MAX_AXIS_SIZE = 300, MIN_LEVEL_HEIGHT = 70, MAX_LEVEL_HEIGHT = 200, MAX_AXIS_RATIO = 0.34999999999999998;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3667]++;
  var minXAxisSize = Math.min(MAX_AXIS_SIZE, (catsDepth * MIN_LEVEL_HEIGHT)), minYAxisSize = Math.min(MAX_AXIS_SIZE, (sersDepth * MIN_LEVEL_HEIGHT)), maxXAxisSize = Math.min(MAX_AXIS_SIZE, (catsDepth * MAX_LEVEL_HEIGHT), (height * MAX_AXIS_RATIO)), maxYAxisSize = Math.min(MAX_AXIS_SIZE, (sersDepth * MAX_LEVEL_HEIGHT), (width * MAX_AXIS_RATIO));
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3672]++;
  var xAxisSize, yAxisSize;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3674]++;
  if ((xyChartRatio > currRatio)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3675]++;
    var extraHeight = (height - (width / xyChartRatio));
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3677]++;
    yAxisSize = minYAxisSize;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3679]++;
    xAxisSize = Math.min(extraHeight, maxXAxisSize);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3680]++;
    xAxisSize = Math.max(xAxisSize, minXAxisSize);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3681]++;
    if ((xyChartRatio < currRatio)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3682]++;
      var extraWidth = (width - (height * xyChartRatio));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3684]++;
      xAxisSize = minXAxisSize;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3686]++;
      yAxisSize = Math.min(extraWidth, maxYAxisSize);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3687]++;
      yAxisSize = Math.max(yAxisSize, minYAxisSize);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3692]++;
  options.xAxisSize = xAxisSize;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3693]++;
  options.yAxisSize = yAxisSize;
}), _doesSharedSeriesSelection: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3706]++;
  return false;
}), _processSelection: (function (selectedDatums) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3710]++;
  if (selectedDatums.length) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3711]++;
    var data = this._chart.data;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3713]++;
    var atomsByDim = {};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3718]++;
    var colDimNames = this.axes.column.getSelectionGems().select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3719]++;
  return gem.cccDimName;
})).array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3722]++;
    var rowDimNames = this.axes.row.getSelectionGems().select((function (gem) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3723]++;
  return gem.cccDimName;
})).array();
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3726]++;
    var nonAdditive = ((selectedDatums.length === 1) && selectedDatums[0].isSelected);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3728]++;
    var whereSpec;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3730]++;
    if ((! nonAdditive)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3732]++;
      var selectDatumsById = def.query(selectedDatums).union(data.selectedDatums()).uniqueIndex((function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3734]++;
  return datum.id;
}));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3736]++;
      var rowGrouping = pvc.data.GroupingSpec.parse(rowDimNames, data.type);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3737]++;
      var rowGroupedData = data.groupBy(rowGrouping, {visible: true, where: (function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3739]++;
  return def.hasOwn(selectDatumsById, datum.id);
}), whereKey: null});
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3743]++;
      var datumFilters = rowGroupedData.leafs().select((function (leafData) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3747]++;
  return def.copyProps(leafData.atoms, rowDimNames);
}));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3750]++;
      if (colDimNames.length) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3753]++;
        var colGrouping = pvc.data.GroupingSpec.parse(colDimNames, data.type);
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3755]++;
        var colGroupedData = data.groupBy(colGrouping, {visible: true, where: (function (datum) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3757]++;
  return def.hasOwn(selectDatumsById, datum.id);
}), whereKey: null});
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3761]++;
        datumFilters = datumFilters.selectMany((function (rowDatumFilter) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3763]++;
  return colGroupedData.leafs().select((function (leafData) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3768]++;
  return def.copyProps(Object.create(rowDatumFilter), leafData.atoms, colDimNames);
}));
}));
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3773]++;
      whereSpec = datumFilters.array();
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3775]++;
      selectedDatums = data.datums(whereSpec, {visible: true}).array();
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3785]++;
      var singleDatum = selectedDatums[0];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3786]++;
      whereSpec = [def.query(colDimNames).object({value: (function (cccDimName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3790]++;
  return singleDatum.atoms[cccDimName];
})}), def.query(rowDimNames).object({value: (function (cccDimName) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3798]++;
  return singleDatum.atoms[cccDimName];
})})];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3802]++;
      selectedDatums = data.datums(whereSpec, {visible: true, selected: true}).array();
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3808]++;
  function addDatum(datum) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3809]++;
    var atoms = datum.atoms;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3811]++;
    colDimNames.forEach(addDim);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3812]++;
    rowDimNames.forEach(addDim);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3814]++;
    function addDim(dimName) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3815]++;
      var dimAtomsById = (atomsByDim[dimName] || (atomsByDim[dimName] = {}));
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3816]++;
      var atom = atoms[dimName];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3817]++;
      if ((! def.hasOwn(dimAtomsById, atom.id))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3818]++;
        dimAtomsById[atom.id] = atom;
      }
}
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3823]++;
  function buildWhereSpec() {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3824]++;
    var datumFilter = {};
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3825]++;
    var whereSpec = [datumFilter];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3827]++;
    def.eachOwn(atomsByDim, addDim);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3829]++;
    function addDim(dimAtomsById, dimName) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3831]++;
      datumFilter[dimName] = def.own(dimAtomsById);
}
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3834]++;
    return whereSpec;
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3837]++;
  return selectedDatums;
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3841]++;
  def.type("pentaho.ccc.MetricDotChart", pentaho.ccc.CartesianChart).add({_cccClass: "pvc.MetricDotChart", _supportsTrends: true, _options: {axisGrid: true, sizeAxisUseAbs: false, sizeAxisOriginIsZero: true, sizeAxisRatio: 0.20000000000000001, sizeAxisRatioTo: "height", autoPaddingByDotSize: false}, _rolesToCccDimensionsMap: {"columns": null, "color": "color", "multi": "multiChart", "measures": null, "x": "x", "y": "y", "size": "size"}, _discreteColorRole: "color", _noRoleInTooltipMeasureRoles: {"x": true, "y": true, "measures": false}, _getColorScaleKind: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3877]++;
  return (this.axes.measure.boundRoles.color? "continuous": (this.axes.column.boundRoles.color? "discrete": undefined));
}), _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3884]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3886]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3888]++;
  this._configureAxisRange(true, "base");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3889]++;
  this._configureAxisRange(false, "ortho");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3892]++;
  if (this.axes.measure.boundRoles.size) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3894]++;
    options.axisOffset = ((1.1000000000000001 * options.sizeAxisRatio) / 2);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3896]++;
    options.axisOffset = 0;
  }
}), _configureColor: (function (colorScaleKind) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3902]++;
  this.base(colorScaleKind);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3904]++;
  var options = this.options;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3906]++;
  if ((colorScaleKind === "discrete")) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3908]++;
    options.dimensionGroups.color = {valueType: String};
  }
}), _showLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3925]++;
  if ((this.options.legend && this.axes.column.boundRoles.color)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3927]++;
    return (this._colGroups.length > 1);
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3930]++;
  return this.options.legend;
}), _getOrthoAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3934]++;
  return this._getMeasureRoleTitle("y");
}), _getBaseAxisTitle: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3938]++;
  return this._getMeasureRoleTitle("x");
}), _configureAxesDisplayUnits: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3943]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3945]++;
  this._configureAxisDisplayUnits(true, "base", true);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3946]++;
  this._configureAxisDisplayUnits(false, "ortho", true);
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3951]++;
  def.type("pentaho.ccc.PieChart", pentaho.ccc.Chart).add({_cccClass: "pvc.PieChart", _noPercentInTootltipForPercentGems: true, _rolesToCccDimensionsMap: {"columns": "multiChart", "multi": null}, _options: {valuesVisible: true, legendShape: "circle", titlePosition: "bottom", dataOptions: {measuresInColumns: false}, extensionPoints: {slice_strokeStyle: "white", slice_lineWidth: 0.80000000000000004}}, _multiRole: "columns", _discreteColorRole: "rows", _drillAxesIds: ["row", "column"], _linkAxesIds: ["row", "column"], _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3992]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3995]++;
  if (this.options.valuesVisible) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][3996]++;
    this._configureValuesMask();
  }
}), _showLegend: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4001]++;
  return (this.options.legend && (this.axes.row.depth > 0));
}), _readUserOptions: (function (options, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4005]++;
  this.base(options, vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4007]++;
  options.valuesFont = defaultFont(null, readFontSize(vizOptions, "label"));
}), _configureMultiChart: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4011]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4013]++;
  this.options.legendSizeMax = "50%";
}), _configureValuesMask: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4021]++;
  var colAxis = this.axes.column;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4022]++;
  var meaDiscrimName = colAxis.measureDiscrimName;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4023]++;
  if (meaDiscrimName) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4024]++;
    var gemsMap = this.gemsMap;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4026]++;
    this.options.pie = {scenes: {category: {sliceLabelMask: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4030]++;
  var meaAtom = this.atoms[meaDiscrimName];
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4031]++;
  var meaGemId, meaGem;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4032]++;
  if ((meaAtom && (meaGemId = meaAtom.value) && (meaGem = gemsMap[meaGemId]) && (meaGem.measureType === "PCTOF"))) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4033]++;
    return "{value}";
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4036]++;
  return "{value} ({value.percent})";
})}}};
  }
}), _selectionExcludesMultiGems: def.fun.constant(false)});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4047]++;
  def.type("pentaho.ccc.TreemapChart", pentaho.ccc.Chart).add({_cccClass: "pvc.TreemapChart", _rolesToCccDimensionsMap: {"columns": null, "measures": null, "size": "size"}, _options: {valuesVisible: true}, _discreteColorRole: "rows", _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4068]++;
  this.base();
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4070]++;
  this.options.rootCategoryLabel = this._message("chartTreeMapRootCategoryLabel");
}), _getDiscreteColorScale: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4077]++;
  return this._getDefaultDiscreteColorScale();
}), _readUserOptions: (function (options, vizOptions) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4082]++;
  this.base(options, vizOptions);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4084]++;
  options.valuesFont = defaultFont(null, readFontSize(vizOptions, "label"));
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4088]++;
  def.type("pentaho.ccc.BulletChart", pentaho.ccc.Chart).add({_cccClass: "pvc.BulletChart", _rolesToCccDimensionsMap: {"multi": null, "columns": "subTitle", "rows": "title"}, _options: {valuesVisible: true, valuesAnchor: "right", titlePosition: "top", titleSize: 25, bulletTitle: "Test for title", bulletSubtitle: "Test for subtitle", bulletMeasures: [], bulletMarkers: ["7500"], bulletRanges: ["3000", "6500", "9000"], bulletMargin: 50, panelSizeRatio: 0.80000000000000004, extensionPoints: {"bulletRuleLabel_font": "7pt sans"}}, _configure: (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4126]++;
  this.base();
}), _prepareLayout: (function (options) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4149]++;
  this.base(options);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4151]++;
  var vizOptions = this._vizOptions;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4153]++;
  var isVertical = (options.orientation === "vertical");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4154]++;
  if ((this._resultset.length > 20)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4155]++;
    options.bulletSize = 10;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4156]++;
    options.bulletSpacing = (isVertical? 60: 20);
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4157]++;
    if ((this._resultset.length > 10)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4158]++;
      options.bulletSize = 15;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4159]++;
      options.bulletSpacing = (isVertical? 80: 30);
    }
    else {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4161]++;
      options.bulletSize = 20;
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4162]++;
      options.bulletSpacing = (isVertical? 120: 50);
    }
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4165]++;
  var totalSpace = ((2 + options.bulletSize + options.bulletSpacing) * this._resultset.length);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4169]++;
  if (isVertical) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4170]++;
    if ((totalSpace > options.width)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4171]++;
      vizOptions.controller.domNode.style.overflowX = "auto";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4172]++;
      vizOptions.controller.domNode.style.overflowY = "hidden";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4174]++;
      options.width = totalSpace;
    }
  }
  else {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4177]++;
    if ((totalSpace > options.height)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4178]++;
      vizOptions.controller.domNode.style.overflowY = "auto";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4179]++;
      vizOptions.controller.domNode.style.overflowX = "hidden";
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4181]++;
      options.height = totalSpace;
    }
  }
})});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4196]++;
  var oldCccChart = {};
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4197]++;
  oldCccChart._readDataBullet = (function () {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4198]++;
  var dataTable = this._dataTable, rowCount = dataTable.getNumberOfRows(), measureCols = this._otherDtColIndexes, seriesCount = this._otherDtColIndexes.length, vizOptions = this._vizOptions;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4204]++;
  this.options.seriesInRows = true;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4206]++;
  this._addCdaMetadata("Category", "Category", "STRING");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4207]++;
  this._addCdaMetadata("Series", "Series", "STRING");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4208]++;
  this._addCdaMetadata("Value", "Value", "NUMERIC");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4209]++;
  this._addCdaMetadata("Marker", "Marker", "NUMERIC");
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4211]++;
  if (vizOptions.bulletRanges) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4212]++;
    for (var i = 0, R = vizOptions.bulletRanges.length; (i < R); (i++)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4213]++;
      this._addCdaMetadata(("Range" + i), ("Range " + i), "NUMERIC");
}
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4217]++;
  var measuresCount = this.axes.measure.depth;
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4220]++;
  for (var tr = 0; (tr < rowCount); (tr++)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4222]++;
    var category = this._aggregateRowAxisForTableRow(tr);
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4224]++;
    for (var s = 0; (s < seriesCount); (s += measuresCount)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4231]++;
      for (var m = 0; (m < measuresCount); (m += 2)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4232]++;
        var valueColIndex = (s + m), markerColIndex = (valueColIndex + 1), tc = measureCols[valueColIndex], dtColParts = dataTable.getColumnId(tc).split("~");
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4237]++;
        dtColParts.pop();
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4239]++;
        var row = [category, dtColParts.join("~"), this._getTableValue(tr, tc), (((m + 1) < measuresCount)? this._getTableValue(tr, measureCols[markerColIndex]): vizOptions.bulletMarkers[0])];
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4252]++;
        var bulletRanges = vizOptions.bulletRanges;
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4253]++;
        if (bulletRanges) {
          _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4254]++;
          bulletRanges.forEach((function (rangeValue) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4255]++;
  row.push(rangeValue);
}));
        }
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4259]++;
        this._resultset.push(row);
}
}
}
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4265]++;
  oldCccChart._aggregateRowAxisForTableRow = (function (tr) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4267]++;
  var values = this._rowNormalDtColIndexes.map((function (tc) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4268]++;
  return this._getTableValue(tr, tc);
}), this);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4271]++;
  return values.join("~");
});
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4278]++;
  var _skipVizOptions = pv.dict(["action", "autoRange", "backgroundColor", "backgroundColorEnd", "backgroundFill", "chartType", "controller", "customChartType", "displayUnits", "maxChartsPerRow", "emptyCellsMode", "labelSize", "labelStyle", "labelFontFamily", "labelColor", "legendBackgroundColor", "legendColor", "legendFontFamily", "legendStyle", "legendSize", "lineShape", "maxValues", "metrics", "palette", "selections"], def.retTrue);
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4315]++;
  function writeCccColumnDataType(colType) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4316]++;
    switch (colType) {
    case "string":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4317]++;
      return "STRING";
    case "number":
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4318]++;
      return "NUMERIC";
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4321]++;
    throw new Error("Unsupported data type");
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4326]++;
  function splitColGroupAndMeasure(colGroupAndMeasure) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4327]++;
    var sepIndex = colGroupAndMeasure.lastIndexOf("~");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4331]++;
    if ((sepIndex < 0)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4332]++;
      return ["", colGroupAndMeasure];
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4335]++;
    return [colGroupAndMeasure.substring(0, sepIndex), colGroupAndMeasure.substring((sepIndex + 1))];
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4343]++;
  function defaultFont(font, defaultSize) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4344]++;
    if ((! font)) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4345]++;
      return ((defaultSize || 10) + "px sans-serif");
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4348]++;
    return font.replace(/\bdefault\s*$/i, "sans-serif");
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4353]++;
  function readFont(vizOptions, prefix) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4354]++;
    var size = vizOptions[(prefix + "Size")];
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4356]++;
    if (size) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4357]++;
      var style = vizOptions[(prefix + "Style")];
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4358]++;
      if (((style == null) || (style == "PLAIN"))) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4359]++;
        style = "";
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4361]++;
        style += " ";
      }
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4364]++;
      return (style + size + "px " + vizOptions[(prefix + "FontFamily")]);
    }
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4368]++;
  function readFontSize(vizOptions, prefix) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4369]++;
    return (+ vizOptions[(prefix + "Size")]);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4372]++;
  function readFontFamily(vizOptions, prefix) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4373]++;
    return vizOptions[(prefix + "FontFamily")];
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4377]++;
  function colorFromAnalyzer(color) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4378]++;
    var L = color.length;
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4379]++;
    if (((L > 4) && (L < 7) && (color.charAt(0) === "#"))) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4380]++;
      color = color.substr(1);
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4381]++;
      if ((L === 6)) {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4382]++;
        color = ("#0" + color);
      }
      else {
        _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4384]++;
        color = ("#00" + color);
      }
    }
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4387]++;
    return pv.color(color);
}
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4392]++;
  function getColumnRolesAndLevels(dataTable, tc) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4393]++;
    var dataReq = dataTable.getColumnProperty(tc, "dataReq");
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4394]++;
    if (dataReq) {
      _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4395]++;
      return def.array.to(dataReq).map((function (item) {
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4397]++;
  if ((! item.id)) {
    _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4397]++;
    item.id = "undefined";
  }
  _$jscoverage['vizapi/ccc/ccc_wrapper.js'][4398]++;
  return item;
}));
    }
}
}));
