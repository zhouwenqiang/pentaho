/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['util/HandlebarsCompiler.js']) {
  _$jscoverage['util/HandlebarsCompiler.js'] = [];
  _$jscoverage['util/HandlebarsCompiler.js'][8] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][19] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][20] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][21] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][22] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][31] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][32] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][33] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][35] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][36] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][39] = 0;
  _$jscoverage['util/HandlebarsCompiler.js'][42] = 0;
}
_$jscoverage['util/HandlebarsCompiler.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\"> * ******************************************************************************</span>","<span class=\"c\"> * Pentaho</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright (C) 2002-2013 by Pentaho : http://www.pentaho.com</span>","<span class=\"c\"> * ******************************************************************************</span>","<span class=\"c\"> */</span>"," pen<span class=\"k\">.</span>define<span class=\"k\">([</span>"," \t<span class=\"s\">\"common-ui/handlebars\"</span><span class=\"k\">,</span> "," \t<span class=\"s\">\"common-ui/jquery\"</span>"," <span class=\"k\">],</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>",""," \t<span class=\"c\">/*</span>","<span class=\"c\"> \t * Loops through all of the scripts of type 'text/x-handlebars-template'. A property of delayCompile=true</span>","<span class=\"c\"> \t * can be appended to these elements as to have them ignored from this compilation process. A post compile </span>","<span class=\"c\"> \t * function is required as looping over elements and compiling them is quite useless. The compiled content</span>","<span class=\"c\"> \t * and the current script element is passed into the post compile function</span>","<span class=\"c\"> \t */</span>"," \t<span class=\"k\">function</span> compileScripts<span class=\"k\">(</span>context<span class=\"k\">,</span> postCompile<span class=\"k\">)</span> <span class=\"k\">{</span>"," \t\t$<span class=\"k\">(</span><span class=\"s\">\"script[type='text/x-handlebars-template']:not([delayCompile='true'])\"</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>"," \t\t\t<span class=\"k\">var</span> jThis <span class=\"k\">=</span> $<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>"," \t\t\tpostCompile<span class=\"k\">(</span>compile<span class=\"k\">(</span>jThis<span class=\"k\">.</span>html<span class=\"k\">(),</span> context<span class=\"k\">),</span> jThis<span class=\"k\">);</span>"," \t\t<span class=\"k\">}</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>",""," \t<span class=\"c\">/*</span>","<span class=\"c\"> \t * Uses handlebars compile string html content. This can be used to compile a single content element,</span>","<span class=\"c\"> \t * provided that a context map is passed in. A post compile function can be provied and the compiled </span>","<span class=\"c\"> \t * content will be passed in</span>","<span class=\"c\"> \t */</span>"," \t<span class=\"k\">function</span> compile<span class=\"k\">(</span>content<span class=\"k\">,</span> context<span class=\"k\">,</span> postCompile<span class=\"k\">)</span> <span class=\"k\">{</span>","      \t<span class=\"k\">var</span> template <span class=\"k\">=</span> Handlebars<span class=\"k\">.</span>compile<span class=\"k\">(</span>content<span class=\"k\">);</span>","      \t<span class=\"k\">var</span> compiledContent <span class=\"k\">=</span> $<span class=\"k\">.</span>trim<span class=\"k\">(</span>template<span class=\"k\">(</span>context<span class=\"k\">));</span>","      \t","      \t<span class=\"k\">if</span> <span class=\"k\">(</span>postCompile<span class=\"k\">)</span> <span class=\"k\">{</span>","      \t\tpostCompile<span class=\"k\">(</span>compiledContent<span class=\"k\">);</span>","      \t<span class=\"k\">}</span>","","      \t<span class=\"k\">return</span> compiledContent<span class=\"k\">;</span>"," \t<span class=\"k\">}</span>",""," \t<span class=\"k\">return</span> <span class=\"k\">{</span>"," \t\tcompileScripts<span class=\"k\">:</span>compileScripts<span class=\"k\">,</span>"," \t\tcompile<span class=\"k\">:</span>compile"," \t<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['util/HandlebarsCompiler.js'][8]++;
pen.define(["common-ui/handlebars", "common-ui/jquery"], (function () {
  _$jscoverage['util/HandlebarsCompiler.js'][19]++;
  function compileScripts(context, postCompile) {
    _$jscoverage['util/HandlebarsCompiler.js'][20]++;
    $("script[type='text/x-handlebars-template']:not([delayCompile='true'])").each((function () {
  _$jscoverage['util/HandlebarsCompiler.js'][21]++;
  var jThis = $(this);
  _$jscoverage['util/HandlebarsCompiler.js'][22]++;
  postCompile(compile(jThis.html(), context), jThis);
}));
}
  _$jscoverage['util/HandlebarsCompiler.js'][31]++;
  function compile(content, context, postCompile) {
    _$jscoverage['util/HandlebarsCompiler.js'][32]++;
    var template = Handlebars.compile(content);
    _$jscoverage['util/HandlebarsCompiler.js'][33]++;
    var compiledContent = $.trim(template(context));
    _$jscoverage['util/HandlebarsCompiler.js'][35]++;
    if (postCompile) {
      _$jscoverage['util/HandlebarsCompiler.js'][36]++;
      postCompile(compiledContent);
    }
    _$jscoverage['util/HandlebarsCompiler.js'][39]++;
    return compiledContent;
}
  _$jscoverage['util/HandlebarsCompiler.js'][42]++;
  return ({compileScripts: compileScripts, compile: compile});
}));
